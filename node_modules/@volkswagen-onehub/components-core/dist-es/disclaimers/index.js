import * as React from 'react';
import { Text, TextAppearance, TextColor } from '../text';
import { styled } from '../theme-provider';
const StyledDL = styled.dl.withConfig({ displayName: "StyledDL", componentId: "sc-190wmkf" }) `
	display: grid;
	grid-template-columns: ${props => props.theme.size.dynamic0100} auto;
	grid-column-gap: ${props => props.theme.size.static150};
	grid-row-gap: ${props => props.theme.size.static200};
	margin: 0;
	padding: 0;
`;
const StyledDD = styled.dd.withConfig({ displayName: "StyledDD", componentId: "sc-51uwu8" }) `
	margin: 0;
	padding: 0;
`;
const StyledDT = styled.dt.withConfig({ displayName: "StyledDT", componentId: "sc-1sgse3z" }) `
	margin: 0;
	padding: 0;
`;
const StyledUL = styled.ul.withConfig({ displayName: "StyledUL", componentId: "sc-4ogw38" }) `
	display: grid;
	grid-row-gap: ${props => props.theme.size.static200};
	list-style: none;
	margin: 0;
	padding: 0;
`;
const StyledLI = styled.li.withConfig({ displayName: "StyledLI", componentId: "sc-1v4om6p" }) `
	margin: 0;
	padding: 0;
`;
const hasReferences = (disclaimers) => Boolean(disclaimers.find(disclaimer => Boolean(disclaimer.reference)));
export function Disclaimers(props) {
    const { disclaimers } = props;
    return (React.createElement(Text, { appearance: TextAppearance.copy0200, color: TextColor.secondary }, hasReferences(disclaimers) ? (React.createElement(StyledDL, null, disclaimers.map(disclaimer => (React.createElement(React.Fragment, null,
        React.createElement(StyledDT, null, disclaimer.reference),
        React.createElement(StyledDD, null, disclaimer.text)))))) : (React.createElement(StyledUL, null, disclaimers.map(disclaimer => (React.createElement(StyledLI, { key: disclaimer.key }, disclaimer.text)))))));
}
