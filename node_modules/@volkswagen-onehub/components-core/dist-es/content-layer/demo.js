import * as React from 'react';
import { Button } from '../button';
import { Checkbox } from '../checkbox';
import { Container, ContainerGutter, ContainerPadding, ContainerWrap } from '../container';
import { DemoContainer } from '../demo/demo-container';
import { DemoRoot } from '../demo/demo-root';
import { DemoThemeProviderWithToggle } from '../demo/demo-theme-provider-with-toggle';
import { withFocusLock } from '../hoc';
import { LayerWrapper } from '../layer-wrapper';
import { ShimLayer } from '../shim-layer';
import { Text, TextAppearance } from '../text';
import { demoData } from './demo-data';
import { ContentLayer } from './index';
const ContentLayerWithFocusLock = withFocusLock(ContentLayer);
class ContentLayerDemo extends React.Component {
    constructor() {
        super(...arguments);
        this.state = {
            withOverflowingContent: true,
            layerIsVisible: false
        };
        this.toggleVisibility = () => {
            this.setState(state => ({
                layerIsVisible: !state.layerIsVisible
            }));
        };
        this.toggleContent = (_event, props) => {
            this.setState({
                withOverflowingContent: !props.checked
            });
        };
    }
    render() {
        const layerContent = this.state.withOverflowingContent
            ? demoData.long
            : demoData.short;
        const { layerIsVisible } = this.state;
        return (React.createElement(DemoRoot, { showGridOverlayToggle: true },
            React.createElement(DemoThemeProviderWithToggle, null,
                React.createElement(DemoContainer, null,
                    React.createElement(Container, { gutter: ContainerGutter.dynamic0100, padding: ContainerPadding.grid001, wrap: ContainerWrap.always },
                        React.createElement(Text, { appearance: TextAppearance.headline0350 }, "Select your content layer options"),
                        React.createElement(Checkbox, { value: "long-text", checked: this.state.withOverflowingContent, onChange: this.toggleContent, label: "with overflowing text" }),
                        React.createElement(Button, { onClick: this.toggleVisibility }, "Open Content Layer")),
                    React.createElement(Container, { gutter: ContainerGutter.static100, padding: ContainerPadding.grid001, wrap: ContainerWrap.always },
                        React.createElement(Text, { appearance: TextAppearance.headline0350 }, "This is some dummy page content"),
                        React.createElement(Text, null, demoData.long)),
                    React.createElement(LayerWrapper, null, layerIsVisible
                        ? [
                            React.createElement(ShimLayer, { key: "shim", onClick: this.toggleVisibility }),
                            React.createElement(ContentLayerWithFocusLock, { key: "content-layer", active: layerIsVisible, ariaLabelledBy: "headline-id", onEscKeyUp: this.toggleVisibility },
                                React.createElement(Container, { gutter: ContainerGutter.dynamic0100, padding: ContainerPadding.grid001, wrap: ContainerWrap.always },
                                    React.createElement("div", { id: "headline-id" },
                                        React.createElement(Text, { bold: true, appearance: TextAppearance.headline0300 }, "Content layer demo")),
                                    React.createElement(Button, { onClick: this.toggleVisibility }, "Close Content Layer"),
                                    React.createElement(Container, { gutter: ContainerGutter.dynamic0200 }, layerContent
                                        .split('\n\n')
                                        .map((paragraph, index) => (React.createElement(Text, { key: `paragraph-${index}` }, paragraph)))),
                                    React.createElement(Button, { onClick: this.toggleVisibility }, "Close Content Layer")))
                        ]
                        : undefined)))));
    }
}
export default ContentLayerDemo;
