var __rest = (this && this.__rest) || function (s, e) {
    var t = {};
    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
        t[p] = s[p];
    if (s != null && typeof Object.getOwnPropertySymbols === "function")
        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
                t[p[i]] = s[p[i]];
        }
    return t;
};
import * as React from 'react';
import { css, styled } from '../theme-provider';
import { Text, TextAppearance, TextColor } from '../text';
const isLink = (props) => Boolean(props.tag === 'a');
const isButton = (props) => Boolean(props.tag === 'button');
// color styles for all CTAs
const colorStyle = css `
	${props => {
    const textRecipe = props.theme.interaction[props.emphasis === 'primary' ? 'recipe750' : 'recipe450'];
    const transparentRecipe = {
        default: 'transparent',
        disabled: 'transparent',
        hover: 'transparent',
        active: 'transparent'
    };
    const backgroundRecipe = props.emphasis === 'primary'
        ? props.theme.interaction.recipe450
        : transparentRecipe;
    const borderRecipe = props.theme.interaction.recipe450;
    return props.disabled
        ? css `
					background: ${backgroundRecipe.disabled};
					border-color: ${borderRecipe.disabled};
					color: ${textRecipe.disabled};
			  `
        : css `
					background: ${backgroundRecipe.default};
					border-color: ${borderRecipe.default};
					color: ${textRecipe.default};
			  `;
}};
`;
// hover style for buttons
const hoverButtonStyle = css `
	::before {
		content: '';
		background-color: ${props => props.emphasis === 'primary'
    ? props.theme.hoverIndicatorColor.filledElement.default
    : props.theme.hoverIndicatorColor.outlinedElement.default};
		border-radius: 500px; /* any absolute value larger than the largest sensible multi-line button will work */
		position: absolute;
		top: 0;
		right: 0;
		left: 0;
		bottom: 0;
	}
`;
// active style for buttons
const activeButtonStyle = css `
	${hoverButtonStyle}
	::before {
		background-color: ${props => props.emphasis === 'primary'
    ? props.theme.hoverIndicatorColor.filledElement.active
    : props.theme.hoverIndicatorColor.outlinedElement.active};
	}
`;
// style for buttons
const buttonStyle = css `
	position: relative;
	${props => props.stretchContent && 'width: 100%;'};
	display: inline-flex;
	text-align: center;
	justify-content: center;
	align-items: center;
	${props => {
    const width = props.size === 'small' ? props.theme.size.static400 : '44px';
    const padding = props.size === 'small'
        ? `${props.theme.size.static100} ${props.theme.size.static250}`
        : `0 ${props.theme.size.static450}`;
    const border = props.size === 'small' ? '1px' : '2px';
    const focusPadding = props.size === 'small' ? `2px 0` : `4px 0`;
    return css `
				min-height: ${width};
				min-width: ${width};
				${props.circular
        ? css `
								width: ${width};
								padding: 0;
						  `
        : css `
								padding: ${padding};
						  `}
				border: ${border} solid;
				${!props.disabled &&
        css `
						:hover {
							${hoverButtonStyle}
							::before {
								margin: -${border};
							}
						}
						:active {
							${activeButtonStyle}
							::before {
								margin: -${border};
							}
						}
						:focus {
							::after {
								content: '';
								position: absolute;
								width: 100%;
								padding: ${focusPadding};
								height: 100%;
								border-width: 2px 0;
								border-color: ${props => props.theme.focusColor};
								align-self: center;
								border-style: solid;
							}
						}
					`}
			`;
}}
	margin: 0;
	border-radius: 500px; /* any absolute value larger than the largest sensible multi-line button will work */
	outline: none;
	transition: all 0.2s ease-in-out;
	text-decoration: none;
	cursor: ${props => (props.disabled ? 'not-allowed' : 'pointer')};
	white-space: pre-wrap;

	${colorStyle}
`;
// styled component for icons in links
const StyledLinkIcon = styled.span.withConfig({ displayName: "StyledLinkIcon", componentId: "sc-wjrax8" }) `
	border-radius: 50%;
	line-height: 0;
	position: relative;
`;
// styled component for (text-) children in links
const StyledLinkText = styled.span.withConfig({ displayName: "StyledLinkText", componentId: "sc-1phwnwt" }) `
	display: inherit;
	position: relative;
	text-decoration: none;
	padding-bottom: 2px;
	border-bottom: 1px solid currentColor;

	${props => props.disabled
    ? css `
					pointer-events: none;
					cursor: not-allowed;
			  `
    : css `
					cursor: pointer;
			  `}
`;
// style for links
const linkStyle = css `
	border: none;
	position: relative;
	text-decoration: none;
	cursor: ${props => (props.disabled ? 'not-allowed' : 'pointer')};
	padding: 0;
	outline: none;

	${colorStyle}

	${props => !props.disabled &&
    css `
			:hover,
			:active {
				${StyledLinkText}:only-child {
					::before {
						content: '';
						border-radius: 2px;
						width: 100%;
						height: 100%;
						position: absolute;
					}
				}
				${StyledLinkIcon} {
					::before {
						content: '';
						border-radius: 50%;
						width: 100%;
						height: 100%;
						position: absolute;
					}
				}
			}
			:hover {
				${StyledLinkText}:only-child {
					::before {
						background-color: ${props => props.theme.hoverIndicatorColor.outlinedElement.default};
					}
				}
				${StyledLinkIcon} {
					::before {
						background-color: ${props => props.theme.hoverIndicatorColor.outlinedElement.default};
						box-shadow: 0 0 0
							${props => parseInt(props.theme.size.static350, 10) / 2}px
							${props => props.theme.hoverIndicatorColor.outlinedElement.default};
					}
				}
			}
			:active {
				${StyledLinkText}:only-child {
					::before {
						background-color: ${props => props.theme.hoverIndicatorColor.outlinedElement.active};
					}
				}
				${StyledLinkIcon} {
					::before {
						background-color: ${props => props.theme.hoverIndicatorColor.outlinedElement.active};
						box-shadow: 0 0 0
							${props => parseInt(props.theme.size.static350, 10) / 2}px
							${props => props.theme.hoverIndicatorColor.outlinedElement.active};
					}
				}
			}
			:focus {
				::before {
					content: '';
					position: absolute;
					width: 100%;
					padding: 2px 0;
					height: 100%;
					border-width: 2px 0;
					border-color: ${props => props.theme.focusColor};
					align-self: center;
					border-style: solid;
				}
			}
		`}

	${props => props.isInline
    ? css `
					text-align: left;
			  `
    : css `
					display: inline-flex;
					align-items: center;
			  `}
`;
// styled component for arranging icons and children in buttons (emphasis primary and secondary, size small and large)
const StyledButtonWrapper = styled.div.withConfig({ displayName: "StyledButtonWrapper", componentId: "sc-1i2uxjx" }) `
	display: grid;
	grid-template-columns: max-content repeat(
			${props => React.Children.count(props.children) - 1},
			auto
		);
	grid-column-gap: ${props => props.theme.size.static150};
	align-items: center;
`;
// styled component for arranging icons and children in links (emphasis tertiary)
const StyledLinkWrapper = styled.div.withConfig({ displayName: "StyledLinkWrapper", componentId: "sc-11a53hf" }) `
	display: grid;
	grid-template-columns: max-content auto;
	grid-column-gap: ${props => props.theme.size.static150};
	align-items: center;
`;
// styled component for large buttons (without icon, emphasis primary and secondary, that actually are buttons)
const StyledButtonAsButton = styled.button.withConfig({ displayName: "StyledButtonAsButton", componentId: "sc-11eiwbg" }) `
	${buttonStyle}
`;
// styled component for large buttons (without icons, emphasis primary and secondary, that actually are links)
const StyledButtonAsLink = styled.a.withConfig({ displayName: "StyledButtonAsLink", componentId: "sc-y3e1vz" }) `
	${buttonStyle}
`;
// styled component for links (with or without icons, emphasis tertiary, that actually are buttons)
const StyledLinkAsButton = styled.button.withConfig({ displayName: "StyledLinkAsButton", componentId: "sc-5dbtv7" }) `
	${linkStyle}
`;
// styled component for links (with or without icons, emphasis tertiary, that actually are links)
const StyledLinkAsLink = styled.a.withConfig({ displayName: "StyledLinkAsLink", componentId: "sc-73dgjr" }) `
	${linkStyle}
`;
export const CTA = React.forwardRef((props, forwardRef) => {
    if (isLink(props)) {
        const { ariaLabel, children, disabled, emphasis = 'primary', icon, size = 'large', 
        // eslint-disable-next-line @typescript-eslint/no-unused-vars
        tag: _tag, href } = props, rest = __rest(props, ["ariaLabel", "children", "disabled", "emphasis", "icon", "size", "tag", "href"]);
        const ref = (forwardRef || undefined);
        if (emphasis === 'tertiary') {
            // it is a link, it looks like a link
            return (React.createElement(StyledLinkAsLink, Object.assign({ "aria-label": ariaLabel, disabled: disabled, ref: ref, href: disabled ? undefined : href }, rest, { isInline: !icon }), icon ? (React.Children.count(children) === 0 ? (React.createElement(StyledLinkIcon, null, icon)) : (React.createElement(StyledLinkWrapper, null,
                React.createElement(StyledLinkIcon, null, icon),
                React.createElement(StyledLinkText, { disabled: disabled }, children)))) : (React.createElement(StyledLinkText, { disabled: disabled }, children))));
        }
        else {
            // it is a link, it looks like either a small or a large button
            return (React.createElement(StyledButtonAsLink, Object.assign({ "aria-label": ariaLabel, disabled: disabled, ref: ref, emphasis: emphasis, circular: icon && React.Children.count(children) === 0, size: size, href: disabled ? undefined : href }, rest), icon ? (React.Children.count(children) === 0 ? (icon) : (React.createElement(StyledButtonWrapper, null,
                icon,
                React.createElement(Text, { appearance: size === 'small'
                        ? TextAppearance.label0150
                        : TextAppearance.label0200, color: TextColor.inherit, staticSize: true }, children)))) : (React.createElement(Text, { appearance: size === 'small'
                    ? TextAppearance.label0150
                    : TextAppearance.label0200, color: TextColor.inherit, staticSize: true }, children))));
        }
    }
    else if (isButton(props)) {
        const { ariaLabel, children, disabled, emphasis = 'primary', icon, size = 'large', 
        // eslint-disable-next-line @typescript-eslint/no-unused-vars
        tag: _tag } = props, rest = __rest(props, ["ariaLabel", "children", "disabled", "emphasis", "icon", "size", "tag"]);
        const ref = (forwardRef || undefined);
        if (emphasis === 'tertiary') {
            // it is a button, it looks like a link
            return (React.createElement(StyledLinkAsButton, Object.assign({ "aria-label": ariaLabel, disabled: disabled, ref: ref }, rest, { isInline: !icon }), icon ? (React.Children.count(children) === 0 ? (React.createElement(StyledLinkIcon, null, icon)) : (React.createElement(StyledLinkWrapper, null,
                React.createElement(StyledLinkIcon, null, icon),
                React.createElement(StyledLinkText, { disabled: disabled }, children)))) : (React.createElement(StyledLinkText, { disabled: disabled }, children))));
        }
        else {
            // it is a button, it looks like either a small button or a large button
            return (React.createElement(StyledButtonAsButton, Object.assign({ "aria-label": ariaLabel, disabled: disabled, ref: ref, emphasis: emphasis, circular: icon && React.Children.count(children) === 0, size: size }, rest), icon ? (React.Children.count(children) === 0 ? (icon) : (React.createElement(StyledButtonWrapper, null,
                icon,
                React.createElement(Text, { appearance: size === 'small'
                        ? TextAppearance.label0150
                        : TextAppearance.label0200, color: TextColor.inherit, staticSize: true }, children)))) : (React.createElement(Text, { appearance: size === 'small'
                    ? TextAppearance.label0150
                    : TextAppearance.label0200, color: TextColor.inherit, staticSize: true }, children))));
        }
    }
    return null;
});
CTA.displayName = 'CTA';
