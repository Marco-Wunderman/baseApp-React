import * as React from 'react';
export declare type PropOrPropTuple<K> = K | [K] | [K, string];
export declare type ComponentConfiguration<K> = string | PropOrPropTuple<K>[];
export declare type Component<P> = React.ComponentClass<P>;
export declare type Arguments = any[];
export declare type Executable = (...args: Arguments) => any;
export declare type DeprecatedValue<K> = string | Executable | PropOrPropTuple<K>[];
export interface StaticPropertyDescription {
    readonly [property: string]: boolean;
}
/**
 * Provide a deprecation wrapper directly usable on functions as a wrapper or as decorator
 * on components (classes) or class methods.
 */
export declare function deprecated<P extends object = {}, K extends keyof P = keyof P>(value?: string): Executable;
export declare function deprecated<P extends object = {}, K extends keyof P = keyof P>(value: PropOrPropTuple<K>[] | Executable, config?: ComponentConfiguration<K>): Executable;
