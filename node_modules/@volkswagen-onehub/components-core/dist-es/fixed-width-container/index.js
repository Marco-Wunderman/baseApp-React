import * as React from 'react';
import { Breakpoints, compareBreakpoints, getColumnsWidthForBreakpoint, getGridColumn } from '../helpers';
import { styled } from '../theme-provider';
const StyledContainer = styled.div.withConfig({ displayName: "StyledContainer", componentId: "sc-13ur9q2" }) `
	${props => {
    const sortedBreakpointsWithConfiguration = Object.keys(props.columns).sort(compareBreakpoints);
    const maxConfiguredBreakpoint = sortedBreakpointsWithConfiguration[sortedBreakpointsWithConfiguration.length - 1];
    const maxBreakpoint = Breakpoints.b2560;
    const maxWidthStyles = maxConfiguredBreakpoint &&
        `
			@media (min-width: ${maxBreakpoint}px) {
				min-width: ${getColumnsWidthForBreakpoint(props.columns[maxConfiguredBreakpoint], maxBreakpoint)};
				max-width: ${getColumnsWidthForBreakpoint(props.columns[maxConfiguredBreakpoint], maxBreakpoint)};
			}
		`;
    const perBreakpointStyles = sortedBreakpointsWithConfiguration
        .map(breakpoint => {
        const columns = props.columns[breakpoint];
        const styles = `
				min-width: ${getGridColumn(columns)};
				max-width: ${getGridColumn(columns)};
			`;
        if (parseInt(breakpoint, 10) === Breakpoints.default) {
            return styles;
        }
        return `
				@media (min-width: ${breakpoint}px) {
					${styles}
				}
			`;
    })
        .join('\n');
    return `
			${perBreakpointStyles}
			${maxWidthStyles}
		`;
}}

	overflow: hidden;
`;
export const FixedWidthContainer = (props) => {
    const { columns, children } = props;
    const breakpointConfig = typeof columns === 'number' ? { [Breakpoints.default]: columns } : columns;
    return (React.createElement(StyledContainer, { columns: breakpointConfig }, children));
};
