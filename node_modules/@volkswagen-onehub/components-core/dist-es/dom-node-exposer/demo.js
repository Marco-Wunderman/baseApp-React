import * as React from 'react';
import { ActionButton } from '../action-button';
import { Button, ButtonAppearance } from '../button';
import { DemoRoot } from '../demo/demo-root';
import { IntegratorRoot } from '../integrator-root';
import { Text, TextTag } from '../text';
import { TextInput } from '../text-input';
import { ThemeProvider } from '../theme-provider';
import { DOMNodeExposer } from './index';
class DOMNodeExposerDemo extends React.Component {
    constructor() {
        super(...arguments);
        this.state = {
            unmount: false,
            updateComponent: false
        };
    }
    render() {
        return (React.createElement(DemoRoot, null,
            React.createElement(ThemeProvider, null,
                React.createElement("h2", null, "DOMNodeExposer"),
                React.createElement("h3", null, "You can find the detected elements when accessing `window.elementRefs`"),
                React.createElement(DOMNodeExposer, { name: "test" },
                    React.createElement(TextInput, null)),
                React.createElement(DOMNodeExposer, { name: "test2" },
                    React.createElement(Text, { tag: this.state.updateComponent ? TextTag.div : TextTag.h2 }, "Test 2")),
                React.createElement(DOMNodeExposer, { name: "integratorRoot" },
                    React.createElement(IntegratorRoot, null,
                        !this.state.unmount && (React.createElement(DOMNodeExposer, { name: "testButtonMounted" },
                            React.createElement(Button, { onClick: () => this.setState({ unmount: true }) }, "Unmount component"))),
                        this.state.unmount && (React.createElement(Button, { onClick: () => this.setState({ unmount: false }) }, "Remount component")),
                        React.createElement(DOMNodeExposer, { name: "testButton" },
                            React.createElement(Button, { appearance: this.state.updateComponent
                                    ? ButtonAppearance.Primary
                                    : ButtonAppearance.Secondary, onClick: () => this.setState({
                                    updateComponent: !this.state.updateComponent
                                }) }, "Update component")),
                        React.createElement(DOMNodeExposer, { name: "testButton" },
                            React.createElement(Button, null, "Test 2")),
                        React.createElement(DOMNodeExposer, { name: "testActionButton" },
                            React.createElement(ActionButton, null, "Test 2")))),
                React.createElement(DOMNodeExposer, { name: "testDiv" },
                    React.createElement("div", null, "Test")))));
    }
}
export default DOMNodeExposerDemo;
