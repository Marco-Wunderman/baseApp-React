/* eslint-disable @typescript-eslint/no-non-null-assertion */
import { mount } from 'enzyme';
import 'jest-styled-components';
import * as React from 'react';
import { DOMNodeExposer } from '../index';
describe('DOMNodeExposer', () => {
    const typedWindow = window;
    beforeEach(() => {
        typedWindow.elementRefs = undefined;
    });
    afterAll(() => {
        process.env.NODE_ENV = undefined;
    });
    test('will create elementRefs in window', () => {
        mount(React.createElement(DOMNodeExposer, { name: "test" },
            React.createElement("div", null, "Hello")));
        expect(typedWindow.elementRefs).toBeDefined();
    });
    test('will add the dom node of the child element to elementRefs', () => {
        const testNode = mount(React.createElement(DOMNodeExposer, { name: "test" },
            React.createElement("div", null, "Hello")));
        expect(typedWindow.elementRefs.test[0].domNode).toEqual(testNode.getDOMNode());
    });
    test('will add direct DOMNodeExposer children to its parent containedRefs attribute', () => {
        mount(React.createElement(DOMNodeExposer, { name: "parent" },
            React.createElement("div", null,
                "Parent",
                React.createElement(DOMNodeExposer, { name: "child" },
                    React.createElement("span", null, "Child")))));
        expect(typedWindow.elementRefs.parent[0].containedRefs.child[0].domNode).toBeDefined();
        expect(typedWindow.elementRefs.parent[0].containedRefs.child[0].domNode).toEqual(typedWindow.elementRefs.child[0].domNode);
    });
    test('should delete the reference from elementRefs if unmounted', () => {
        const testNode = mount(React.createElement(DOMNodeExposer, { name: "parent" },
            React.createElement("div", null, "Parent")));
        expect(typedWindow.elementRefs.parent[0]).toBeDefined();
        testNode.unmount();
        expect(typedWindow.elementRefs.parent[0]).toBeUndefined();
    });
    test('should delete the reference from parent references if unmounted', () => {
        const Component = (props) => (React.createElement(DOMNodeExposer, { name: "parent" },
            React.createElement("div", null, !props.unmounted && (React.createElement(DOMNodeExposer, { name: "child" },
                React.createElement("span", null, "Child"))))));
        const testNode = mount(React.createElement(Component, null));
        expect(typedWindow.elementRefs.parent[0].containedRefs.child[0]).toBeDefined();
        testNode.setProps({ unmounted: true });
        expect(typedWindow.elementRefs.parent[0].containedRefs.child[0]).toBeUndefined();
    });
    test('should update the reference when dom node gets changed', () => {
        const Component = (props) => (React.createElement(DOMNodeExposer, { name: "parent" },
            React.createElement("div", null,
                React.createElement(DOMNodeExposer, { name: "child" }, props.changed ? React.createElement("span", null, "new child") : React.createElement("div", null, "old child")))));
        const testNode = mount(React.createElement(Component, null));
        expect(typedWindow.elementRefs.child[0].domNode.nodeName).toEqual('DIV');
        testNode.setProps({ changed: true });
        expect(typedWindow.elementRefs.child[0].domNode.nodeName).toEqual('SPAN');
    });
    test('should update the reference on the parent when dom node gets changed', () => {
        const Component = (props) => (React.createElement(DOMNodeExposer, { name: "parent" },
            React.createElement("div", null,
                React.createElement(DOMNodeExposer, { name: "child" }, props.changed ? React.createElement("span", null, "new child") : React.createElement("div", null, "old child")))));
        const testNode = mount(React.createElement(Component, null));
        expect(typedWindow.elementRefs.parent[0].containedRefs.child[0].domNode
            .nodeName).toEqual('DIV');
        testNode.setProps({ changed: true });
        expect(typedWindow.elementRefs.parent[0].containedRefs.child[0].domNode
            .nodeName).toEqual('SPAN');
    });
    test('should not do anything when run with NODE_ENV set to production', () => {
        process.env.NODE_ENV = 'production';
        mount(React.createElement(DOMNodeExposer, { name: "test" },
            React.createElement("div", null, "Hello")));
        expect(typedWindow.elementRefs).toBeUndefined();
    });
});
