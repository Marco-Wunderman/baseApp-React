import * as React from 'react';
import { ThemeProvider, styled } from '../../theme-provider';
import { themeSet } from '../../theme-provider/example-theme-definitions';
const StyledDemoToggleLabel = styled.label.withConfig({ displayName: "StyledDemoToggleLabel", componentId: "sc-1m7jhpo" }) `
	position: fixed;
	right: 0;
	bottom: 0;
	cursor: pointer;
	opacity: 0.3;
	background: #fff;
	transition: opacity ease-in-out 0.25s;
	font: 400 11px system-ui;
	margin-bottom: 10px;

	&:hover {
		opacity: 1;
	}
`;
const StyledDemoThemeToggle = styled.select.withConfig({ displayName: "StyledDemoThemeToggle", componentId: "sc-sxwms2" }) `
	border: 1px dashed #8f8f8f;
	border-radius: 4px;
	padding: 6px 8px 8px 8px;
	margin-bottom: 20px;
	cursor: pointer;
`;
export const DemoThemeProviderToggleContext = React.createContext({
    hasImageTheme: false,
    direction: 'ltr',
    language: ''
});
// @todo @refactor this is a temporary solution
//  rework this and use a standalone toggle component with
//  special DemoThemeContext.Provider/Consumer
export class DemoThemeProviderWithToggle extends React.Component {
    constructor(props) {
        super(props);
        this.handleThemeChange = (e) => {
            const theme = e.target.value;
            this.setState(state => (Object.assign({}, state, { theme })));
        };
        this.handleDirectionChange = (e) => {
            const direction = e.target.value;
            this.setState(state => (Object.assign({}, state, { direction })));
        };
        this.handleLanguageChange = (e) => {
            const language = e.target.value;
            this.setState(state => (Object.assign({}, state, { language })));
        };
        this.state = {
            theme: 'main',
            direction: 'ltr',
            language: ''
        };
    }
    render() {
        const { children } = this.props;
        const { theme, direction, language } = this.state;
        const hasImageTheme = theme === 'image';
        return (React.createElement(React.Fragment, null,
            React.createElement(StyledDemoToggleLabel, null,
                "Use Theme:\u00A0",
                React.createElement(StyledDemoThemeToggle, { onChange: this.handleThemeChange }, Object.keys(themeSet).map(key => (React.createElement("option", { value: key, key: key }, key)))),
                "\u00A0 Direction:\u00A0",
                React.createElement(StyledDemoThemeToggle, { onChange: this.handleDirectionChange },
                    React.createElement("option", { value: "ltr", key: "ltr" }, "LTR"),
                    React.createElement("option", { value: "rtl", key: "rtl" }, "RTL")),
                "\u00A0 Language:\u00A0",
                React.createElement(StyledDemoThemeToggle, { onChange: this.handleLanguageChange },
                    React.createElement("option", { value: "", key: "default" }, "Default"),
                    React.createElement("option", { value: "ko", key: "ko" }, "Korean"),
                    React.createElement("option", { value: "zh", key: "zh" }, "Chinese (Simplified | China)"),
                    React.createElement("option", { value: "tw", key: "tw" }, "Chinese (Traditional | Taiwan)"),
                    React.createElement("option", { value: "ja", key: "ja" }, "Japanese"))),
            React.createElement(ThemeProvider, { theme: this.state.theme },
                React.createElement(DemoThemeProviderToggleContext.Provider, { value: { hasImageTheme, direction, language } }, children))));
    }
}
