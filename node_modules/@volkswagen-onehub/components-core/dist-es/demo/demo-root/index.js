import * as React from 'react';
import { Helmet } from 'react-helmet';
import { IntegratorRoot } from '../../integrator-root';
import { styled } from '../../theme-provider';
const StyledDemoRoot = styled.div.withConfig({ displayName: "StyledDemoRoot", componentId: "sc-mddwwj" }) `
	margin: ${props => (props.showMargin ? '40px 0 20px' : '0')};
	position: relative;

	@font-face {
		font-family: 'vw-head';
		font-weight: 400;
		src: url('/api/static/fonts/vwhead-regular.woff2') format('woff2');
	}
	@font-face {
		font-family: 'vw-head';
		font-weight: 400;
		font-style: italic;
		src: url('/api/static/fonts/vwhead-regularitalic.woff2') format('woff2');
	}
	@font-face {
		font-family: 'vw-head';
		font-weight: 700;
		src: url('/api/static/fonts/vwhead-bold.woff2') format('woff2');
	}
	@font-face {
		font-family: 'vw-head';
		font-weight: 700;
		font-style: italic;
		src: url('/api/static/fonts/vwhead-bolditalic.woff2') format('woff2');
	}
	@font-face {
		font-family: 'vw-head';
		font-weight: 800;
		src: url('/api/static/fonts/vwhead-extrabold.woff2') format('woff2');
	}
	@font-face {
		font-family: 'vw-head';
		font-weight: 200;
		src: url('/api/static/fonts/vwhead-light.woff2') format('woff2');
	}

	@font-face {
		font-family: 'vw-text';
		font-weight: 400;
		src: url('/api/static/fonts/vwtext-regular.woff2') format('woff2');
	}
	@font-face {
		font-family: 'vw-text';
		font-weight: 400;
		font-style: italic;
		src: url('/api/static/fonts/vwtext-regularitalic.woff2') format('woff2');
	}
	@font-face {
		font-family: 'vw-text';
		font-weight: 700;
		src: url('/api/static/fonts/vwtext-bold.woff2') format('woff2');
	}
	@font-face {
		font-family: 'vw-text';
		font-weight: 700;
		font-style: italic;
		src: url('/api/static/fonts/vwtext-bolditalic.woff2') format('woff2');
	}
	@font-face {
		font-family: 'vw-text';
		font-weight: 200;
		src: url('/api/static/fonts/vwtext-light.woff2') format('woff2');
	}
`;
StyledDemoRoot.displayName = 'StyledDemoRoot';
const StyledDemoGrid = styled.div.withConfig({ displayName: "StyledDemoGrid", componentId: "sc-k0z02s" }) `
	display: ${props => (props.alwaysVisible ? 'block' : 'none')};
	position: absolute;
	top: 0;
	left: 0;
	bottom: 0;
	right: 0;
	pointer-events: none;
	z-index: 100;
	height: 100%;
	background: repeating-linear-gradient(
		to right,
		rgba(255, 194, 244, 0.1) 0%,
		rgba(255, 194, 244, 0.1) ${100 / 24}%,
		rgba(255, 194, 244, 0.3) ${100 / 24}%,
		rgba(255, 191, 244, 0.3) ${(100 / 24) * 2}%,
		rgba(255, 194, 244, 0.1) ${(100 / 24) * 2}%
	);
	max-width: 2560px;
	margin: auto;
`;
const StyledDemoGridLabel = styled.label.withConfig({ displayName: "StyledDemoGridLabel", componentId: "sc-7arv9e" }) `
	position: fixed;
	bottom: 8px;
	right: 8px;
	color: black;
	font-size: 16px;
	padding: 0 8px;
	background: white;
	border: 1px solid black;
	opacity: 0.3;
	cursor: pointer;
	font-weight: bold;
	transition: opacity ease-in-out 0.25s;
	border-radius: 12px;

	&:hover {
		opacity: 1;
	}
`;
const StyledDemoGridCheckbox = styled.input.withConfig({ displayName: "StyledDemoGridCheckbox", componentId: "sc-62336y" }) `
	position: fixed;
	top: 0;
	left: 0;
	transform: translate(-200%, -200%);
	&:checked {
		~ ${StyledDemoGrid} {
			display: block;
		}
	}
`;
/**
 * DemoRoot component
 *
 * Provides a wrapper element for component demos. This wrapper includes styles as well as global definitions like theme definitions.
 *
 * @param props Component properties
 */
export class DemoRoot extends React.Component {
    constructor(props) {
        super(props);
        this.renderMetaInfo = () => (React.createElement("meta", { name: "viewport", content: "width=device-width, initial-scale=1" }));
        this.state = {
            language: undefined
        };
    }
    componentDidMount() {
        // **************
        // WARNING START: this is NOT how this libary should be included! Have a look into the 'Dos and donâ€™ts' in the index.md
        // **************
        if (typeof window.lazySizes === 'undefined') {
            // loading the 3rd party lib asynchronous for the demo, in order to prevent server-side-rendering issues and easily avoid them
            const scriptElement = document.createElement('script');
            scriptElement.src =
                'https://afarkas.github.io/lazysizes/lazysizes.min.js';
            scriptElement.type = 'text/javascript';
            document.body.appendChild(scriptElement);
        }
        // ***********
        // WARNING END
        // ***********
    }
    render() {
        const { children, showGrid, showGridOverlayToggle, hideMargin = false } = this.props;
        const { language } = this.state;
        return (React.createElement(IntegratorRoot, { language: language },
            React.createElement(Helmet, null, this.renderMetaInfo()),
            React.createElement(StyledDemoRoot, { showMargin: !hideMargin },
                showGridOverlayToggle && (React.createElement(React.Fragment, null,
                    React.createElement(StyledDemoGridLabel, { htmlFor: "showGrid" }, "IIIIIIII"),
                    React.createElement(StyledDemoGridCheckbox, { id: "showGrid", type: "checkbox" }),
                    React.createElement(StyledDemoGrid, null))),
                showGrid && React.createElement(StyledDemoGrid, { alwaysVisible: true }),
                children)));
    }
}
