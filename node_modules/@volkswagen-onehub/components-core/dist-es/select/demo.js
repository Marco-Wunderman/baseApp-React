import * as React from 'react';
import { DemoContainer } from '../demo/demo-container';
import { DemoRoot } from '../demo/demo-root';
import { DemoThemeProviderWithToggle, DemoThemeProviderToggleContext } from '../demo/demo-theme-provider-with-toggle';
import { InputAppearance } from '../helpers/input';
import { styled } from '../theme-provider';
import { Select } from './index';
const StyledSelectDemoElementContainer = styled.div.withConfig({ displayName: "StyledSelectDemoElementContainer", componentId: "sc-15n0hac" }) `
	width: 300px;
`;
// Create 5 option items
const options = [...Array(5).keys()].map(index => (React.createElement("option", { key: index + 1, value: index + 1 },
    "Option ",
    index + 1)));
export default class SelectDemo extends React.PureComponent {
    constructor(props) {
        super(props);
        this.state = {
            selectedOptionFirstSelect: '',
            selectedOptionSecondSelect: ''
        };
    }
    render() {
        const { selectedOptionFirstSelect: selectedOptionFirstSelect, selectedOptionSecondSelect: selectedOptionSecondSelect } = this.state;
        return (React.createElement(DemoRoot, null,
            React.createElement("h2", null, "Select"),
            React.createElement("p", null, "Please note: the keys used in this demo cause a re-render of the select component right when you change the text direction. You probably don't want to do that in your application."),
            React.createElement(DemoThemeProviderWithToggle, null,
                React.createElement(DemoThemeProviderToggleContext.Consumer, null, value => (React.createElement(React.Fragment, null,
                    React.createElement("h4", null, "default"),
                    React.createElement(DemoContainer, null,
                        React.createElement(StyledSelectDemoElementContainer, null,
                            React.createElement(Select, { label: "What do you want to do", value: selectedOptionFirstSelect, name: "what_to_do", onChange: (evt) => {
                                    const { value } = evt.currentTarget;
                                    this.setState({ selectedOptionFirstSelect: value });
                                    alert(`You have selected the Option ${value}`);
                                }, autoComplete: 'given-name', key: `select-1-${value.direction}` }, options))),
                    React.createElement("h4", null, "invalid and with error text"),
                    React.createElement(DemoContainer, null,
                        React.createElement(StyledSelectDemoElementContainer, null,
                            React.createElement(Select, { appearance: InputAppearance.Error, errorText: "This field is required", label: "What do you want to do", value: selectedOptionSecondSelect, name: "what_to_do", onChange: (evt) => {
                                    const { value } = evt.currentTarget;
                                    this.setState({ selectedOptionSecondSelect: value });
                                    alert(`You have selected the Option ${value}`);
                                }, key: `select-2-${value.direction}` }, options))),
                    React.createElement("h4", null, "disabled"),
                    React.createElement(DemoContainer, null,
                        React.createElement(StyledSelectDemoElementContainer, null,
                            React.createElement(Select, { disabled: true, label: "What do you want to do", key: `select-3-${value.direction}` }, options))),
                    React.createElement("h4", null, "with empty option"),
                    React.createElement(DemoContainer, null,
                        React.createElement(StyledSelectDemoElementContainer, null,
                            React.createElement(Select, { label: "What do you want to do", key: `select-4-${value.direction}` },
                                React.createElement("option", { disabled: true, value: "" }),
                                options))),
                    React.createElement("h4", null, "required"),
                    React.createElement(DemoContainer, null,
                        React.createElement(StyledSelectDemoElementContainer, null,
                            React.createElement(Select, { label: "What do you want to do", value: selectedOptionFirstSelect, name: "what_to_do", onChange: (evt) => {
                                    const { value } = evt.currentTarget;
                                    this.setState({ selectedOptionFirstSelect: value });
                                    alert(`You have selected the Option ${value}`);
                                }, required: true, key: `select-5-${value.direction}` }, options))),
                    React.createElement("h4", null, "default with autoFocus"),
                    React.createElement(DemoContainer, null,
                        React.createElement(StyledSelectDemoElementContainer, null,
                            React.createElement(Select, { label: "What do you want to do", value: selectedOptionFirstSelect, name: "what_to_do", onChange: (evt) => {
                                    const { value } = evt.currentTarget;
                                    this.setState({ selectedOptionFirstSelect: value });
                                    alert(`You have selected the Option ${value}`);
                                }, autoComplete: 'given-name', autoFocus: true, key: `select-6-${value.direction}` }, options)))))))));
    }
}
