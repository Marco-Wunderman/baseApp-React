import * as React from 'react';
import { TextAreaAppearance } from '../shared';
import { TextFieldWrapper, FloatingStyledLabelText } from '../text-field-wrapper';
import { getColor, getStatusColor } from '../utils';
import { styled, css } from '../../theme-provider';
// @todo get from theme
const borderSize = '2px';
const StyledTextArea = styled.textarea.withConfig({ displayName: "StyledTextArea", componentId: "sc-7xrm5a" }) `
	width: 100%;
	border-radius: 0;
	/* MinHeight is calculated via lineHeight and padding of the element. If any value is changed then you have to update it */
	min-height: calc(
		${props => props.theme.size.static150} * 2 +
			${props => props.theme.textAppearances.copy0200.lineHeight}
	);
	background: transparent;
	border: 0;
	color: ${getColor};
	cursor: ${({ appearance }) => appearance === TextAreaAppearance.Disabled ? 'not-allowed' : ''};
	padding: ${props => props.theme.size.static150} 0;
	border-bottom: ${({ appearance }) => appearance !== TextAreaAppearance.ReadOnly && `${borderSize} solid`};
	border-color: ${getStatusColor};
	outline: 0;
	font-size: ${props => props.theme.textAppearances.copy0200.fontSize};
	line-height: ${props => props.theme.textAppearances.copy0200.lineHeight};
	font-family: inherit;
	margin: ${props => props.theme.size.static100} 0;

	&:focus {
		border-color: ${props => {
    if (props.appearance === TextAreaAppearance.Error) {
        return;
    }
    return props.theme.interaction.recipe150.checked;
}};
		outline-style: solid;
		outline-width: 1px;
		outline-color: ${props => props.theme.interaction.recipe100.active};
		outline-offset: 2px;

		& + div span {
			color: ${props => props.theme.border.color.primary};
		}

		~ ${FloatingStyledLabelText} {
			transform: translateY(0);
			font-size: ${props => props.theme.textAppearances.copy100.fontSize};
		}
	}

	${props => props.valid &&
    css `
			& ~ ${FloatingStyledLabelText} {
				transform: translateY(0);
				font-size: ${props.theme.textAppearances.copy100.fontSize};
			}
		`}
`;
export class TextArea extends React.Component {
    constructor(props) {
        super(props);
        this.state = { valid: false };
        this.validateTextArea = this.validateTextArea.bind(this);
    }
    validateTextArea(event) {
        this.setState({ valid: Boolean(event.currentTarget.value) });
    }
    render() {
        const { label, appearance, name, onChange, onBlur, onFocus, value, errorText, placeholder, rows = 1, minLength, maxLength, required, isFloating } = this.props;
        const { valid } = this.state;
        return (React.createElement(TextFieldWrapper, { appearance: appearance, label: label, maxLength: maxLength, errorText: errorText, required: required, value: value, isFloating: isFloating },
            React.createElement(StyledTextArea, { readOnly: appearance === TextAreaAppearance.ReadOnly, disabled: appearance === TextAreaAppearance.Disabled, rows: rows, appearance: appearance, minLength: minLength, name: name, onChange: onChange, onBlur: event => {
                    this.validateTextArea(event);
                    if (onBlur) {
                        onBlur(event);
                    }
                }, onFocus: onFocus, placeholder: placeholder, value: value, required: required, valid: valid })));
    }
}
