import * as React from 'react';
import { styled } from '../../theme-provider';
import { Text, TextAppearance, TextColor } from '../../text';
import { getLabelIconColor, getStatusColor } from '../utils';
import { TextAreaAppearance, TextInputAppearance } from '../shared';
const StyledLabelText = styled.p.withConfig({ displayName: "StyledLabelText", componentId: "sc-136sgtd" }) `
	font-size: ${props => props.theme.textAppearances.copy0100.fontSize};
	color: ${getLabelIconColor};
	margin: 0;
	padding: 0 ${props => (props.hasIcon ? props.theme.size.static400 : 0)};
	position: absolute;
	top: 0;
`;
export const FloatingStyledLabelText = styled.p.withConfig({ displayName: "FloatingStyledLabelText", componentId: "sc-gzhfid" }) `
	font-size: ${props => props.theme.textAppearances.copy0200.fontSize};
	color: ${getLabelIconColor};
	margin: 0;
	position: absolute;
	top: 0;
	left: 0;
	padding: 0 ${props => (props.hasIcon ? props.theme.size.static400 : 0)};
	transition: all ease-in-out 0.25s;
	transform: translateY(${props => props.theme.size.static100})
		translateY(${props => props.theme.size.static150})
		translateY(${props => props.theme.textAppearances.copy0100.fontSize});
`;
const StyledLabel = styled.label.withConfig({ displayName: "StyledLabel", componentId: "sc-pw4kdr" }) `
	display: block;
	width: 100%;
	position: relative;
	padding-top: ${props => props.theme.size.static250};
`;
const AdditionalInfo = styled.div.withConfig({ displayName: "AdditionalInfo", componentId: "sc-7kcxrm" }) `
	display: flex;
	flex-direction: row;
	justify-content: ${props => props.errorShouldBeVisible ? 'space-between' : 'flex-end'};
`;
const StyledErrorText = styled.p.withConfig({ displayName: "StyledErrorText", componentId: "sc-1gsseyr" }) `
	display: block;
	color: ${props => props.theme.interaction.recipe360.default};
	font-size: ${props => props.theme.textAppearances.copy0100.fontSize};
	margin: 0;
`;
const StyledCharacterCounterWrapper = styled.span.withConfig({ displayName: "StyledCharacterCounterWrapper", componentId: "sc-113ryio" }) `
	display: flex;
	justify-content: flex-end;
	color: ${getStatusColor};
`;
const StyledIcon = styled.div.withConfig({ displayName: "StyledIcon", componentId: "sc-fo1bds" }) `
	position: absolute;
	/* text-input margin + text-input padding + CharacterCounter line-height */
	bottom: ${props => {
    const textInputSpacings = parseInt(props.theme.size.static150) +
        parseInt(props.theme.size.static100);
    if (props.maxLength) {
        return `calc(${textInputSpacings}px + ${props.theme.textAppearances.copy100.lineHeight})`;
    }
    return `${textInputSpacings}px`;
}};
	color: ${getLabelIconColor};
`;
const CharacterCounter = ({ maxLength, appearance, value = '' }) => (React.createElement(StyledCharacterCounterWrapper, { "aria-hidden": true, appearance: appearance },
    React.createElement(Text, { color: TextColor.inherit, appearance: TextAppearance.copy100 },
        value.length,
        "/",
        maxLength)));
const TextLabel = ({ appearance, icon, isFloating, children }) => {
    if (isFloating) {
        return (React.createElement(FloatingStyledLabelText, { appearance: appearance, hasIcon: Boolean(icon) }, children));
    }
    return (React.createElement(StyledLabelText, { appearance: appearance, hasIcon: Boolean(icon) }, children));
};
TextLabel.displayName = 'TextLabel';
export const TextFieldWrapper = props => {
    const { additionalFeedback, appearance, children, errorText, label, maxLength, required, value, icon, isFloating } = props;
    const errorShouldBeVisible = Boolean((appearance === TextAreaAppearance.Error ||
        appearance === TextInputAppearance.Error) &&
        errorText);
    const additionalInfoShouldBeVisible = errorShouldBeVisible || maxLength;
    return (React.createElement(StyledLabel, null,
        icon && (React.createElement(StyledIcon, { appearance: appearance, maxLength: maxLength }, icon)),
        children,
        React.createElement(TextLabel, { appearance: appearance, icon: icon, isFloating: isFloating },
            label,
            required && '*'),
        additionalInfoShouldBeVisible && (React.createElement(AdditionalInfo, { errorShouldBeVisible: errorShouldBeVisible },
            errorShouldBeVisible && (React.createElement(StyledErrorText, { "aria-live": "assertive", "aria-relevant": "all" }, errorText)),
            maxLength && (React.createElement(CharacterCounter, { appearance: appearance, value: value, maxLength: maxLength })))),
        additionalFeedback));
};
TextFieldWrapper.displayName = 'TextFieldWrapper';
