import * as React from 'react';
import { styled, css } from '../../theme-provider';
import { TextInputAppearance } from '../shared';
import { TextFieldCleanWrapper } from '../text-field-clean-wrapper';
import { TextFieldWrapper, FloatingStyledLabelText } from '../text-field-wrapper';
import { getColor } from '../utils';
// @todo get from theme
const borderSize = '1px';
const StyledInput = styled.input.withConfig({ displayName: "StyledInput", componentId: "sc-7giqxg" }) `
	min-height: ${props => props.theme.size.static300};
	width: 100%;
	padding: ${props => props.icon
    ? `${props.theme.size.static150} ${props.theme.size.static400}`
    : `${props.theme.size.static150} 0`};
	border: 0;
	border-bottom: ${({ appearance }) => appearance !== TextInputAppearance.ReadOnly && `${borderSize} solid`};
	border-color: ${props => {
    let color = props.theme.interaction.recipe150.default;
    if (props.appearance === TextInputAppearance.Error) {
        color = props.theme.interaction.recipe360.default;
    }
    else if (props.appearance === TextInputAppearance.Success) {
        color = props.theme.interaction.recipe350.default;
    }
    return color;
}};
	border-radius: 0;
	background: transparent;
	cursor: ${props => props.appearance === TextInputAppearance.Disabled ? 'not-allowed' : ''};

	color: ${getColor};
	outline: 0;
	font-size: ${props => props.theme.textAppearances.copy0200.fontSize};

	font-family: inherit;
	margin: ${props => props.theme.size.static100} 0;

	&:focus {
		border-color: ${props => {
    if (props.appearance === TextInputAppearance.Error ||
        props.appearance === TextInputAppearance.Success) {
        return;
    }
    return props.theme.interaction.recipe150.checked;
}};
		outline-style: solid;
		outline-width: 1px;
		outline-color: ${props => props.theme.interaction.recipe100.active};
		outline-offset: 2px;

		~ ${FloatingStyledLabelText} {
			transform: translateY(0);
			font-size: ${props => props.theme.textAppearances.copy100.fontSize};
		}
	}

	${props => props.valid &&
    css `
			& ~ ${FloatingStyledLabelText} {
				transform: translateY(0);
				font-size: ${props.theme.textAppearances.copy100.fontSize};
			}
		`}

	&::-ms-clear {
		display: none;
	}
`;
/* eslint-disable-next-line react/display-name */
class TextInputInner extends React.Component {
    constructor(props) {
        super(props);
        this.state = { valid: false };
        this.validateInputField = this.validateInputField.bind(this);
    }
    validateInputField(event) {
        this.setState({ valid: Boolean(event.currentTarget.value) });
    }
    render() {
        const { additionalFeedback, appearance, autoFocus, clearIconLabel = '', defaultValue, errorText, hasClearButton, icon, innerRef, isClearButtonVisible, isFloating, label = '', maxLength, name, onBlur, onChange, onKeyDown, onClear, onFocus, required = false, type, value, autoComplete } = this.props;
        const { valid } = this.state;
        return (React.createElement(TextFieldWrapper, { appearance: appearance, label: label, errorText: errorText, value: value, required: required, icon: icon, additionalFeedback: additionalFeedback, maxLength: maxLength, isFloating: isFloating },
            React.createElement(TextFieldCleanWrapper, { onClear: onClear, hasClearButton: hasClearButton, isClearButtonVisible: isClearButtonVisible, clearIconLabel: clearIconLabel, maxLength: maxLength },
                React.createElement(StyledInput, { appearance: appearance, autoFocus: autoFocus, defaultValue: defaultValue, disabled: appearance === TextInputAppearance.Disabled, icon: icon, maxLength: maxLength, name: name, onBlur: event => {
                        this.validateInputField(event);
                        if (onBlur) {
                            onBlur(event);
                        }
                    }, onChange: onChange, onFocus: onFocus, onKeyDown: onKeyDown, readOnly: appearance === TextInputAppearance.ReadOnly, ref: innerRef, required: required, type: type, valid: valid, value: value, autoComplete: autoComplete }))));
    }
}
export const TextInput = React.forwardRef((props, ref) => React.createElement(TextInputInner, Object.assign({}, props, { innerRef: ref })));
