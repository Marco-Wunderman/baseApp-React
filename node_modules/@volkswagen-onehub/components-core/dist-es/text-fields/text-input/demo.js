import * as React from 'react';
import * as ReactDOM from 'react-dom';
import { DemoContainer } from '../../demo/demo-container';
import { DemoRoot } from '../../demo/demo-root';
import { DemoThemeProviderWithToggle } from '../../demo/demo-theme-provider-with-toggle';
import { TextInputAppearance } from '../shared';
import { TextInput } from './index';
import { Container, ContainerPadding } from '../../container';
import { Infobox } from '../../infobox';
import { Text, TextTag } from '../../text';
import { ThemeProvider } from '../../theme-provider';
import { Magnifier } from '@volkswagen-onehub/icons-core';
const handleChange = (event) => {
    console.log('onChange', event.currentTarget.value);
};
const handleBlur = (event) => {
    console.log('onBlur', event.currentTarget.value);
};
const handleFocus = (event) => {
    console.log('onFocus', event.currentTarget.value);
};
export class TextInputDemo extends React.PureComponent {
    constructor() {
        super(...arguments);
        this.state = {
            isClearButtonVisible: false
        };
    }
    renderSearchError() {
        return (React.createElement(Container, { padding: {
                top: ContainerPadding.static100,
                bottom: ContainerPadding.static100
            } },
            React.createElement(ThemeProvider, { theme: "inverted" },
                React.createElement(Infobox, { ariaLabel: "Notification", ariaLive: "polite" },
                    React.createElement(Text, { tag: TextTag.p }, 'There are no matches to your search')))));
    }
    render() {
        const textInputSearchRef = React.createRef();
        const { isClearButtonVisible } = this.state;
        const handleClear = () => {
            // We need to use findDOMNode to ensure that we also get the
            // element from the reference in styled-components version v3.x.x.
            // After discontinuing the support for styled-components v3 we can remove
            // the `findDOMNode` and directly access the reference again.
            // eslint-disable-next-line react/no-find-dom-node
            const target = ReactDOM.findDOMNode(textInputSearchRef.current);
            if (target) {
                target.value = '';
                this.setState({
                    isClearButtonVisible: false
                });
            }
        };
        const handleSeachChange = () => {
            // We need to use findDOMNode to ensure that we also get the
            // element from the reference in styled-components version v3.x.x.
            // After discontinuing the support for styled-components v3 we can remove
            // the `findDOMNode` and directly access the reference again.
            // eslint-disable-next-line react/no-find-dom-node
            const target = ReactDOM.findDOMNode(textInputSearchRef.current);
            this.setState({
                isClearButtonVisible: target && target.value !== '' ? true : false
            });
        };
        return (React.createElement(DemoRoot, null,
            React.createElement("h2", null, "Text Input"),
            React.createElement(DemoThemeProviderWithToggle, null,
                React.createElement("h4", null, "default style"),
                React.createElement(DemoContainer, null,
                    React.createElement(TextInput, { appearance: TextInputAppearance.Default, label: "Firstname", name: "firstname", onChange: handleChange })),
                React.createElement("h4", null, "with floating label"),
                React.createElement(DemoContainer, null,
                    React.createElement(TextInput, { appearance: TextInputAppearance.Default, label: "Firstname", name: "firstname", onChange: handleChange, onBlur: handleBlur, isFloating: true })),
                React.createElement("h4", null, "with default value"),
                React.createElement(DemoContainer, null,
                    React.createElement(TextInput, { appearance: TextInputAppearance.Default, label: "Username", defaultValue: "username" })),
                React.createElement("h4", null, "directly controlled component"),
                React.createElement(DemoContainer, null,
                    React.createElement(TextInput, { appearance: TextInputAppearance.Default, label: "Username", defaultValue: "username" })),
                React.createElement("h4", null, "required"),
                React.createElement(DemoContainer, null,
                    React.createElement(TextInput, { appearance: TextInputAppearance.Default, label: "Username", defaultValue: "username", required: true })),
                React.createElement("h4", null, "success style"),
                React.createElement(DemoContainer, null,
                    React.createElement(TextInput, { appearance: TextInputAppearance.Success, label: "Username", defaultValue: "Username" })),
                React.createElement("h4", null, "invalid and with error text"),
                React.createElement(DemoContainer, null,
                    React.createElement(TextInput, { appearance: TextInputAppearance.Error, label: "Username", defaultValue: "username", errorText: "Username does not exist" })),
                React.createElement("h4", null, "with infobox displaying error message"),
                React.createElement(DemoContainer, null,
                    React.createElement(TextInput, { appearance: TextInputAppearance.Search, label: "Search", defaultValue: "search", additionalFeedback: this.renderSearchError() })),
                React.createElement("h4", null, "disabled"),
                React.createElement(DemoContainer, null,
                    React.createElement(TextInput, { appearance: TextInputAppearance.Disabled, label: "Username" })),
                React.createElement("h4", null, "disabled with value"),
                React.createElement(DemoContainer, null,
                    React.createElement(TextInput, { appearance: TextInputAppearance.Disabled, label: "Username", defaultValue: "username" })),
                React.createElement("h4", null, "readonly mode"),
                React.createElement(DemoContainer, null,
                    React.createElement(TextInput, { appearance: TextInputAppearance.ReadOnly, label: "Username", defaultValue: "username" })),
                React.createElement("h4", null, "with placeholder"),
                React.createElement(DemoContainer, null,
                    React.createElement(TextInput, { appearance: TextInputAppearance.Default, label: "Username", placeholder: "placeholder" })),
                React.createElement("h4", null, "with onBlur handler"),
                React.createElement(DemoContainer, null,
                    React.createElement(TextInput, { appearance: TextInputAppearance.Default, label: "Firstname", name: "firstname", onBlur: handleBlur })),
                React.createElement("h4", null, "with onFocus handler"),
                React.createElement(DemoContainer, null,
                    React.createElement(TextInput, { appearance: TextInputAppearance.Default, label: "Firstname", name: "firstname", onFocus: handleFocus })),
                React.createElement("h4", null, "with maxLength defined"),
                React.createElement(DemoContainer, null,
                    React.createElement(TextInput, { appearance: TextInputAppearance.Default, label: "Firstname", name: "firstname", maxLength: 5 })),
                React.createElement("h4", null, "with autofocus"),
                React.createElement(DemoContainer, null,
                    React.createElement(TextInput, { appearance: TextInputAppearance.Default, label: "autofocus", name: "autofocus", autoFocus: true })),
                React.createElement("h4", null, "with a type (password)"),
                React.createElement(DemoContainer, null,
                    React.createElement(TextInput, { appearance: TextInputAppearance.Default, label: "Password", placeholder: "placeholder", type: "password" })),
                React.createElement("h4", null, "with a reference"),
                React.createElement(DemoContainer, null,
                    React.createElement(TextInput, { appearance: TextInputAppearance.Default, label: "Username", defaultValue: "username", ref: React.createRef() })),
                React.createElement("h4", null, "with icon and clear button"),
                React.createElement(DemoContainer, null,
                    React.createElement(TextInput, { appearance: TextInputAppearance.Search, label: "Search", name: "search", icon: React.createElement(Magnifier, { variant: "default" }), hasClearButton: true, isClearButtonVisible: isClearButtonVisible, onClear: handleClear, onChange: handleSeachChange, clearIconLabel: "Clear search", ref: textInputSearchRef })),
                React.createElement("h4", null, "with icon and floating label"),
                React.createElement(DemoContainer, null,
                    React.createElement(TextInput, { icon: React.createElement(Magnifier, { variant: "default" }), appearance: TextInputAppearance.Default, label: "Firstname", name: "firstname", onChange: handleChange, onBlur: handleBlur, isFloating: true })),
                React.createElement("h4", null, "with icon and floating label and maxLength"),
                React.createElement(DemoContainer, null,
                    React.createElement(TextInput, { maxLength: 100, appearance: TextInputAppearance.Search, label: "Search", name: "search", icon: React.createElement(Magnifier, { variant: "default" }), hasClearButton: true, isClearButtonVisible: true, clearIconLabel: "Clear search" })))));
    }
}
export default TextInputDemo;
