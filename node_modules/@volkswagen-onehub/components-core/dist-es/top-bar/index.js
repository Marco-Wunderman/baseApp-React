import * as React from 'react';
import { Container, ContainerGutter, ContainerPadding, ContainerVerticalAlignment, ContainerWrap } from '../container';
import { Breakpoints } from '../helpers';
import { MovingFrame } from '../moving-frame';
import { css, styled } from '../theme-provider';
const StyledTopBar = styled.div.withConfig({ displayName: "StyledTopBar", componentId: "sc-1wmd8m2" }) `
	width: 100%;
	transform: translateZ(0);
	transition: min-height
		${props => `${props.theme.animation.duration.layer} ${props.theme.animation.timingFunction.navigation}`};
	color: ${props => props.theme.interaction.recipe400.default};
	background-color: ${props => props.theme.navigation.backgroundColor};
	/* without a logo the min-height is menu icon size plus top and bottom margins of menu icon plus top and bottom margin of navigation */
	min-height: ${props => parseInt(props.theme.size.static150, 10) * 4 +
    parseInt(props.theme.size.static350, 10)}px;

	${props => !props.hideLogo &&
    css `
			/* with a logo the min-height is menu icon size plus top and bottom margins of menu icon plus top margin of navigation plus lower half of logo plus bottom logo margin*/
			min-height: ${parseInt(props.theme.size.static150, 10) * 3 +
        parseInt(props.theme.size.static350, 10) +
        parseInt(props.theme.size.static400, 10)}px;

			@media (min-width: ${Breakpoints.b560}px) {
				min-height: ${parseInt(props.theme.size.static150, 10) * 3 +
        parseInt(props.theme.size.static350, 10) +
        parseInt(props.theme.size.static450, 10)}px;
			}

			@media (min-width: ${Breakpoints.b960}px) {
				min-height: ${parseInt(props.theme.size.static150, 10) * 3 +
        parseInt(props.theme.size.static350, 10) +
        parseInt(props.theme.size.static510, 10)}px;
			}

			@media (min-width: ${Breakpoints.b1920}px) {
				min-height: ${parseInt(props.theme.size.static150, 10) * 3 +
        parseInt(props.theme.size.static350, 10) +
        parseInt(props.theme.size.static520, 10)}px;
			}
		`}
`;
const StyledLogoLayer = styled.div.withConfig({ displayName: "StyledLogoLayer", componentId: "sc-17elgef" }) `
	display: flex;
	position: absolute;
	top: 0;
	width: 100%;
	align-items: center;
	pointer-events: none;
	transition: transform
		${props => `${props.theme.animation.duration.layer} ${props.theme.animation.timingFunction.navigation}`};
	/* the free space around logo is 0.5 times logo size, */
	/* for small breakpoints the top padding is at least the size of the menu button */
	padding: ${props => Math.max(parseInt(props.theme.size.static400, 10) * 0.5, parseInt(props.theme.size.static450, 10) +
    parseInt(props.theme.size.static150, 10) -
    parseInt(props.theme.size.static400, 10) * 0.5)}px
		0 ${props => parseInt(props.theme.size.static400, 10) * 0.5}px;

	@media (min-width: ${Breakpoints.b560}px) {
		padding: ${props => Math.max(parseInt(props.theme.size.static450, 10) * 0.5, parseInt(props.theme.size.static450, 10) +
    parseInt(props.theme.size.static150, 10) -
    parseInt(props.theme.size.static450, 10) * 0.5)}px
			0 ${props => parseInt(props.theme.size.static450, 10) * 0.5}px;
	}

	@media (min-width: ${Breakpoints.b960}px) {
		padding: ${props => parseInt(props.theme.size.static510, 10) * 0.5}px 0;
	}

	@media (min-width: ${Breakpoints.b1920}px) {
		padding: ${props => parseInt(props.theme.size.static520, 10) * 0.5}px 0;
	}

	${props => props.hideLogo && `transform: translateY(-100%);`}
`;
export const TopBar = props => {
    const { hideLogo, logo, children } = props;
    return (React.createElement(StyledTopBar, { hideLogo: hideLogo },
        React.createElement(Container, { padding: {
                left: ContainerPadding.grid001,
                right: ContainerPadding.grid001,
                top: ContainerPadding.static150,
                bottom: ContainerPadding.static150
            }, gutter: ContainerGutter.static300, wrap: ContainerWrap.never, verticalAlign: ContainerVerticalAlignment.center, stretchContent: true }, children),
        React.createElement(StyledLogoLayer, { hideLogo: hideLogo },
            React.createElement(MovingFrame, { logo: logo }))));
};
