import * as React from 'react';
import { Breakpoints } from '../helpers';
import { DemoContainer, DemoPlaceholderText, DemoRoot, DemoThemeProviderWithToggle } from '../demo';
import { Text, TextAlignment, TextAppearance, TextColor, TextTag, WhiteSpace } from './index';
const TextDemo = () => (React.createElement(DemoRoot, null,
    React.createElement("h2", null, "Text"),
    React.createElement(DemoThemeProviderWithToggle, null,
        React.createElement("h4", null, "with default appearance and tag"),
        React.createElement(DemoContainer, null,
            React.createElement(Text, null,
                React.createElement(DemoPlaceholderText, null))),
        React.createElement("hr", null),
        React.createElement("h4", null, "with changed appearance"),
        React.createElement(DemoContainer, null,
            React.createElement(Text, { appearance: TextAppearance.headline450 },
                React.createElement(DemoPlaceholderText, null))),
        React.createElement("hr", null),
        React.createElement("h4", null, "with changed tag"),
        React.createElement(DemoContainer, null,
            React.createElement(Text, { tag: TextTag.span },
                React.createElement(DemoPlaceholderText, null))),
        React.createElement("hr", null),
        React.createElement("h4", null, "available appearances"),
        React.createElement("table", null,
            React.createElement("tbody", null,
                React.createElement("tr", null,
                    React.createElement("td", null, "appearance"),
                    React.createElement("td", null, "Render output")),
                Object.entries(TextAppearance)
                    .filter(entry => {
                    const [key] = entry;
                    return key.match(/[a-z]+[1-9]\d+/);
                })
                    .map(entry => {
                    const [key, value] = entry;
                    return (React.createElement("tr", { key: key },
                        React.createElement("td", null, TextAppearance[value]),
                        React.createElement("td", null,
                            React.createElement(DemoContainer, null,
                                React.createElement(Text, { appearance: value },
                                    React.createElement(DemoPlaceholderText, null))))));
                }))),
        React.createElement("hr", null),
        React.createElement("h4", null, "available tags"),
        React.createElement("table", null,
            React.createElement("tbody", null,
                React.createElement("tr", null,
                    React.createElement("td", null, "Tag"),
                    React.createElement("td", null, "Render output")),
                Object.values(TextTag).map(tag => (React.createElement("tr", { key: tag },
                    React.createElement("td", null, TextTag[tag]),
                    React.createElement("td", null,
                        React.createElement(DemoContainer, null,
                            React.createElement(Text, { tag: tag },
                                React.createElement(DemoPlaceholderText, null))))))))),
        React.createElement("hr", null),
        React.createElement("h4", null, "Bold text."),
        React.createElement("h5", null, "Bold text can be defined by setting the `bold` property."),
        React.createElement(DemoContainer, null,
            React.createElement(Text, { bold: true },
                React.createElement(DemoPlaceholderText, null))),
        React.createElement("h4", null, "Text with multiple different font-weights/text-appearances."),
        React.createElement("h5", null, "Bold text can be defined by wrapping a text area with a `b` tag but it is also possible to use another `Text` component inside."),
        React.createElement(DemoContainer, null,
            React.createElement(Text, null,
                "Lorem ipsum dolor sit amet, ",
                React.createElement("b", null, "consectetur adipisicing elit"),
                ". Amet incidunt aut voluptatum autem voluptates ea numquam cupiditate deleniti unde.",
                ' ',
                React.createElement(Text, { appearance: TextAppearance.headline350, tag: TextTag.span }, "Eum, reprehenderit quidem!"),
                ' ',
                "Rem suscipit sit sint. Quasi molestiae error eum!")),
        React.createElement("hr", null),
        React.createElement("h4", null, "Align text."),
        React.createElement("h5", null, "The alignement of your text can be defined by setting the `textAlign` property and giving it a valid string (currently: 'center', 'left', 'right')."),
        React.createElement(DemoContainer, null,
            React.createElement("h5", null, "Centered text"),
            React.createElement(Text, { textAlign: TextAlignment.center },
                React.createElement(DemoPlaceholderText, null)),
            React.createElement("h5", null, "Left aligned text"),
            React.createElement(Text, { textAlign: TextAlignment.left },
                React.createElement(DemoPlaceholderText, null)),
            React.createElement("h5", null, "Right aligned text"),
            React.createElement(Text, { textAlign: TextAlignment.right },
                React.createElement(DemoPlaceholderText, null)),
            React.createElement("h5", null, "Start aligned text"),
            React.createElement(Text, { textAlign: TextAlignment.start },
                React.createElement(DemoPlaceholderText, null)),
            React.createElement("h5", null, "End aligned text"),
            React.createElement(Text, { textAlign: TextAlignment.end },
                React.createElement(DemoPlaceholderText, null)),
            React.createElement("h5", null, "Breakpoints related text alignement"),
            React.createElement(Text, { textAlign: {
                    [Breakpoints.default]: TextAlignment.left,
                    [Breakpoints.b960]: TextAlignment.right,
                    [Breakpoints.b1280]: TextAlignment.center
                } },
                React.createElement(DemoPlaceholderText, null))),
        React.createElement("hr", null),
        React.createElement("h4", null, "Text color."),
        React.createElement("h5", null, "The color of your text can be defined by setting the `color` property and giving it a valid string (currently: 'primary', 'secondary', 'inherit'). 'primary' and 'secondary' will change according to the theme"),
        React.createElement(DemoContainer, null,
            React.createElement("h5", null, "Primary text"),
            React.createElement(Text, { color: TextColor.primary },
                React.createElement(DemoPlaceholderText, null),
                React.createElement(Text, { sup: true }, "*1")),
            React.createElement("h5", null, "Secondary text"),
            React.createElement(Text, { color: TextColor.secondary },
                React.createElement(DemoPlaceholderText, null),
                React.createElement(Text, { sup: true }, "*1")),
            React.createElement("h5", null, "Text which inherits its color from its parent"),
            React.createElement("h6", null, "This is used for example in links (Note: It will not change its color based on the theme)."),
            React.createElement(Text, { color: TextColor.inherit },
                React.createElement(DemoPlaceholderText, null),
                React.createElement(Text, { sup: true }, "*1"))),
        React.createElement("hr", null),
        React.createElement("h4", null, "Special case for rendering text with sub- and superscript inheritance."),
        React.createElement(DemoContainer, null,
            React.createElement(Text, { appearance: TextAppearance.headline400 },
                "First",
                ' ',
                React.createElement(Text, { bold: true },
                    "Second",
                    ' ',
                    React.createElement(Text, { appearance: TextAppearance.headline200 }, "Text in bold text")),
                ' ',
                "Hallo",
                ' ',
                React.createElement(Text, { sup: true },
                    "sup",
                    ' ',
                    React.createElement(Text, { sup: true, bold: true },
                        "sup ",
                        React.createElement(Text, { sup: true }, "sup"))),
                "Hallo ",
                React.createElement(Text, { sub: true }, "sub"))),
        React.createElement(DemoContainer, null,
            React.createElement(Text, null,
                "Lorem ipsum dolor sit amet, consectetur adipisicing elit. Amet incidunt aut voluptatum ",
                React.createElement(Text, { sup: true }, "autem"),
                " voluptates ea numquam cupiditate deleniti unde. Eum, ",
                React.createElement(Text, { sub: true }, "blablabla"),
                ' ',
                "reprehenderit quidem! Rem suscipit sit sint. Quasi molestiae error eum!")),
        React.createElement("hr", null),
        React.createElement("h4", null, "Strikethrough Text / Deleted Element."),
        React.createElement(DemoContainer, null,
            React.createElement(Text, { strikethrough: true }, "Text can also be displayed crossed through"),
            React.createElement(Text, null,
                "...or be wrapped in a ",
                React.createElement("em", null, '<del>'),
                "-Tag without predefined styling")),
        React.createElement("hr", null),
        React.createElement("h4", null, "Text wrapping."),
        React.createElement("h5", null, "The way the `white-space` characthers are handled (U+0009 TAB, U+000A LF, U+000C FF, U+000D CR, and U+0020 SPACE. ) can be changed using the `whiteSpace` property. In the following example `preWrap` will add support to break lines at newline characters."),
        React.createElement(DemoContainer, null,
            React.createElement(Text, { whiteSpace: WhiteSpace.preWrap },
                "Lorem ipsum dolor sit amet, consectetur adipisicing. ",
                '\n',
                "Amet incidunt aut voluptatum voluptates ea numquam cupiditate deleniti unde.",
                '\n',
                "Eum, reprehenderit quidem!. Rem suscipit sit sint. Quasi molestiae error eum!")))));
export default TextDemo;
