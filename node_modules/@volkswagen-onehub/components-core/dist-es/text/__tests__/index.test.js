/* eslint-disable @typescript-eslint/no-non-null-assertion */
import { mount } from 'enzyme';
import 'jest-styled-components';
import * as React from 'react';
import * as renderer from 'react-test-renderer';
import { ThemeProvider } from '../../theme-provider';
import { Text, TextAlignment, TextAppearance, TextColor, TextContext, TextTag } from '../index';
describe('Text', () => {
    test('simple', () => {
        const toTest = mount(React.createElement(ThemeProvider, null,
            React.createElement(Text, null, "Hello")));
        expect(toTest.text()).toBe('Hello');
    });
    test('context to children', () => {
        const fn = jest.fn();
        mount(React.createElement(ThemeProvider, null,
            React.createElement(Text, null,
                React.createElement(TextContext.Consumer, null, fn))));
        expect(fn).toBeCalled();
        expect(fn.mock.calls[0][0]).toEqual({
            bold: undefined,
            textAppearance: 'copy200'
        });
    });
    test('context to children override bold default', () => {
        const toTest = renderer
            .create(React.createElement(ThemeProvider, null,
            React.createElement(Text, null,
                React.createElement(Text, null, "Hallo"),
                "World")))
            .toJSON();
        expect(toTest).toHaveStyleRule('font-weight', 'normal');
        expect(toTest.children[0]).toHaveStyleRule('font-weight', 'normal');
    });
    test('context to children override bold false->true', () => {
        const toTest = renderer
            .create(React.createElement(ThemeProvider, null,
            React.createElement(Text, { bold: false },
                React.createElement(Text, { bold: true }, "Hallo"),
                "World")))
            .toJSON();
        expect(toTest).toHaveStyleRule('font-weight', 'normal');
        expect(toTest.children[0]).toHaveStyleRule('font-weight', 'bold');
    });
    test('context to children override bold true->default', () => {
        const toTest = renderer
            .create(React.createElement(ThemeProvider, null,
            React.createElement(Text, { bold: true },
                React.createElement(Text, null, "Hallo"),
                "World")))
            .toJSON();
        expect(toTest).toHaveStyleRule('font-weight', 'bold');
        expect(toTest.children[0]).toHaveStyleRule('font-weight', 'bold');
    });
    test('context to children override bold true->false', () => {
        const toTest = renderer
            .create(React.createElement(ThemeProvider, null,
            React.createElement(Text, { bold: true },
                React.createElement(Text, { bold: false },
                    React.createElement(Text, null,
                        React.createElement(Text, { bold: true },
                            React.createElement(Text, null, "kkk"),
                            "luch"),
                        "Maus"),
                    "Hallo"),
                "World")))
            .toJSON();
        expect(toTest).toHaveStyleRule('font-weight', 'bold');
        expect(toTest.children[0]).toHaveStyleRule('font-weight', 'normal');
        expect(toTest.children[0].children[0]).toHaveStyleRule('font-weight', 'normal');
        expect(toTest.children[0].children[0].children[0]).toHaveStyleRule('font-weight', 'bold');
        expect(toTest.children[0].children[0].children[0].children[0]).toHaveStyleRule('font-weight', 'bold');
    });
    test('position default', () => {
        const toTest = renderer
            .create(React.createElement(ThemeProvider, null,
            React.createElement(Text, null, "default")))
            .toJSON();
        expect(toTest).not.toHaveStyleRule('position');
    });
    test('tag default block', () => {
        const toTest = renderer
            .create(React.createElement(ThemeProvider, null,
            React.createElement(Text, null, "meno")))
            .toJSON();
        expect(toTest.type).toBe('div');
    });
    test('tag default nested block', () => {
        const toTest = renderer
            .create(React.createElement(ThemeProvider, null,
            React.createElement(Text, null,
                React.createElement(Text, null, "hund"),
                "meno")))
            .toJSON();
        expect(toTest.type).toBe('div');
        expect(toTest.children[0].type).toBe('span');
    });
    test('tag explitz block', () => {
        const toTest = renderer
            .create(React.createElement(ThemeProvider, null,
            React.createElement(Text, { tag: TextTag.h2 },
                React.createElement(Text, null, "hund"),
                "meno")))
            .toJSON();
        expect(toTest.type).toBe('h2');
        expect(toTest.children[0].type).toBe('span');
    });
    test('tag explicit 2 block', () => {
        const toTest = renderer
            .create(React.createElement(ThemeProvider, null,
            React.createElement(Text, { tag: TextTag.h2 },
                React.createElement(Text, { tag: TextTag.h5 }, "hund"),
                "meno")))
            .toJSON();
        expect(toTest.type).toBe('h2');
        expect(toTest.children[0].type).toBe('h5');
    });
    [
        { sup: true, name: 'sup', alignment: 'super' },
        { sub: true, name: 'sub', alignment: 'sub' }
    ].forEach(flag => {
        const { name } = flag;
        test(`${name} on div ${name} span`, () => {
            const toTest = renderer
                .create(React.createElement(ThemeProvider, null,
                React.createElement(Text, null,
                    "murgs",
                    React.createElement(Text, { sup: flag.sup, sub: flag.sub },
                        React.createElement(Text, null, "luchs")))))
                .toJSON();
            expect(toTest.type).toBe('div');
            expect(toTest.children[1].type).toBe(name);
            expect(toTest.children[1].children[0].type).toBe('span');
        });
        test(`${name} on ${name} span`, () => {
            const toTest = renderer
                .create(React.createElement(ThemeProvider, null,
                React.createElement(Text, { sup: flag.sup, sub: flag.sub },
                    React.createElement(Text, null, "murgs"),
                    "murgs")))
                .toJSON();
            expect(toTest.type).toBe(name);
            expect(toTest.children[0].type).toBe('span');
            expect(toTest).toHaveStyleRule('position', 'static');
            expect(toTest).toHaveStyleRule('vertical-align', flag.alignment);
        });
    });
    test('font-family default', () => {
        const toTest = renderer
            .create(React.createElement(ThemeProvider, null,
            React.createElement(Text, null, "murgs")))
            .toJSON();
        expect(toTest).toHaveStyleRule('font-family', 'var(--font-family-text,vw-text,Helvetica,Arial,sans-serif)');
    });
    test('font-family default', () => {
        expect(() => renderer
            .create(React.createElement(ThemeProvider, null,
            React.createElement(Text, { appearance: 'Wurst' }, "murgs")))
            .toJSON()).toThrowError();
    });
    test('font-family set', () => {
        const toTest = renderer
            .create(React.createElement(ThemeProvider, null,
            React.createElement(Text, { appearance: TextAppearance.headline400 }, "murgs")))
            .toJSON();
        expect(toTest).toHaveStyleRule('font-family', 'var(--font-family-head,vw-head,Helvetica,Arial,sans-serif)');
    });
    test('default color', () => {
        const toTest = renderer
            .create(React.createElement(ThemeProvider, null,
            React.createElement(Text, null, "murgs")))
            .toJSON();
        expect(toTest).toHaveStyleRule('color', '#000000');
    });
    test('inherit color', () => {
        const toTest = renderer
            .create(React.createElement(ThemeProvider, null,
            React.createElement(Text, { color: TextColor.inherit }, "murgs")))
            .toJSON();
        expect(toTest).toHaveStyleRule('color', 'inherit');
    });
    test('word-break default', () => {
        const toTest = renderer
            .create(React.createElement(ThemeProvider, null,
            React.createElement(Text, null, "murgs")))
            .toJSON();
        expect(toTest).toHaveStyleRule('word-break', 'inherit');
    });
    test('word-break set', () => {
        const toTest = renderer
            .create(React.createElement(ThemeProvider, null,
            React.createElement(Text, { wordBreak: true }, "murgs")))
            .toJSON();
        expect(toTest).toHaveStyleRule('word-break', 'break-word');
    });
    test('font-weight default', () => {
        const toTest = renderer
            .create(React.createElement(ThemeProvider, null,
            React.createElement(Text, null, "murgs")))
            .toJSON();
        expect(toTest).toHaveStyleRule('font-weight', 'normal');
    });
    test('font-weight bold', () => {
        const toTest = renderer
            .create(React.createElement(ThemeProvider, null,
            React.createElement(Text, { bold: true }, "murgs")))
            .toJSON();
        expect(toTest).toHaveStyleRule('font-weight', 'bold');
    });
    test('font-weight appearence Header', () => {
        const toTest = renderer
            .create(React.createElement(ThemeProvider, null,
            React.createElement(Text, { appearance: TextAppearance.headline300 },
                React.createElement(Text, null,
                    React.createElement(Text, { appearance: TextAppearance.copy100 },
                        React.createElement(Text, null, "jjj"),
                        "louu"),
                    "mmjo"),
                "murgs")))
            .toJSON();
        expect(toTest).toHaveStyleRule('font-weight', '200');
        expect(toTest.children[0]).toHaveStyleRule('font-weight', '200');
        expect(toTest.children[0].children[0]).toHaveStyleRule('font-weight', 'normal');
        expect(toTest.children[0].children[0].children[0]).toHaveStyleRule('font-weight', 'normal');
    });
    test('font-weight appearence Header', () => {
        const toTest = renderer
            .create(React.createElement(ThemeProvider, null,
            React.createElement(Text, { appearance: TextAppearance.copy100 },
                React.createElement(Text, null, "mmjo"),
                "murgs")))
            .toJSON();
        expect(toTest).toHaveStyleRule('font-weight', 'normal');
        expect(toTest.children[0]).toHaveStyleRule('font-weight', 'normal');
    });
    test('font-size no appearence', () => {
        const toTest = renderer
            .create(React.createElement(ThemeProvider, null,
            React.createElement(Text, null,
                React.createElement(Text, null, "mmjo"),
                "murgs")))
            .toJSON();
        expect(toTest).toHaveStyleRule('font-size', 'var(--textappearances-copy200-fontsize)');
        expect(toTest.children[0]).toHaveStyleRule('font-size', 'var(--textappearances-copy200-fontsize)');
    });
    test('font-size appearence', () => {
        const toTest = renderer
            .create(React.createElement(ThemeProvider, null,
            React.createElement(Text, { appearance: TextAppearance.copy250 },
                React.createElement(Text, null, "mmjo"),
                "murgs")))
            .toJSON();
        expect(toTest).toHaveStyleRule('font-size', 'var(--textappearances-copy250-fontsize)');
        expect(toTest.children[0]).toHaveStyleRule('font-size', 'var(--textappearances-copy250-fontsize)');
    });
    test('font-size appearence sub', () => {
        const toTest = renderer
            .create(React.createElement(ThemeProvider, null,
            React.createElement(Text, { appearance: TextAppearance.copy250, sub: true },
                React.createElement(Text, null, "mmjo"),
                "murgs")))
            .toJSON();
        expect(toTest).toHaveStyleRule('font-size', 'var(--textappearances-copy250-reducedfontsize)');
        expect(toTest.children[0]).toHaveStyleRule('font-size', 'var(--textappearances-copy250-fontsize)');
    });
    test('font-size appearence sup', () => {
        const toTest = renderer
            .create(React.createElement(ThemeProvider, null,
            React.createElement(Text, { appearance: TextAppearance.copy250, sup: true },
                React.createElement(Text, null, "mmjo"),
                "murgs")))
            .toJSON();
        expect(toTest).toHaveStyleRule('font-size', 'var(--textappearances-copy250-reducedfontsize)');
        expect(toTest.children[0]).toHaveStyleRule('font-size', 'var(--textappearances-copy250-fontsize)');
    });
    test('font-size appearence staticSize', () => {
        const toTest = renderer
            .create(React.createElement(ThemeProvider, null,
            React.createElement(Text, { appearance: TextAppearance.copy250, staticSize: true },
                React.createElement(Text, null, "mmjo"),
                React.createElement(Text, { staticSize: true }, "mmjo"),
                "murgs")))
            .toJSON();
        expect(toTest).toHaveStyleRule('font-size', '20px');
        expect(toTest.children[0]).toHaveStyleRule('font-size', 'var(--textappearances-copy250-fontsize)');
        expect(toTest.children[1]).toHaveStyleRule('font-size', '20px');
    });
    test('line-height sub', () => {
        const toTest = renderer
            .create(React.createElement(ThemeProvider, null,
            React.createElement(Text, { sub: true }, "uyytuw")))
            .toJSON();
        expect(toTest).toHaveStyleRule('line-height', '0');
    });
    test('line-height sup', () => {
        const toTest = renderer
            .create(React.createElement(ThemeProvider, null,
            React.createElement(Text, { sup: true }, "uyytuw")))
            .toJSON();
        expect(toTest).toHaveStyleRule('line-height', '0');
    });
    test('line-height no appearance', () => {
        const toTest = renderer
            .create(React.createElement(ThemeProvider, null,
            React.createElement(Text, null, "uyytuw")))
            .toJSON();
        expect(toTest).not.toHaveStyleRule('line-height');
    });
    test('line-height appearance ', () => {
        const toTest = renderer
            .create(React.createElement(ThemeProvider, null,
            React.createElement(Text, { appearance: TextAppearance.copy150 },
                React.createElement(Text, null, "dkdf"),
                "uyytuw")))
            .toJSON();
        expect(toTest).toHaveStyleRule('line-height', 'var(--textappearances-copy150-lineheight)');
        expect(toTest.children[0]).toHaveStyleRule('line-height', 'var(--textappearances-copy150-lineheight)');
    });
    test('line-height appearance staticSize', () => {
        const toTest = renderer
            .create(React.createElement(ThemeProvider, null,
            React.createElement(Text, { appearance: TextAppearance.copy150, staticSize: true },
                React.createElement(Text, null, "dkdf"),
                React.createElement(Text, { staticSize: true }, "dkdf"),
                "uyytuw")))
            .toJSON();
        expect(toTest).toHaveStyleRule('line-height', '24px');
        expect(toTest.children[0]).toHaveStyleRule('line-height', 'var(--textappearances-copy150-lineheight)');
        expect(toTest.children[1]).toHaveStyleRule('line-height', '24px');
    });
    test('letter-spacing no appearence', () => {
        const toTest = renderer
            .create(React.createElement(ThemeProvider, null,
            React.createElement(Text, null,
                React.createElement(Text, null, "dkdf"),
                "menkd")))
            .toJSON();
        expect(toTest).not.toHaveStyleRule('letter-spacing');
        expect(toTest.children[0]).not.toHaveStyleRule('letter-spacing');
    });
    test('letter-spacing appearence', () => {
        const toTest = renderer
            .create(React.createElement(ThemeProvider, null,
            React.createElement(Text, { appearance: TextAppearance.copy150 },
                React.createElement(Text, null, "dkdf"),
                "uyytuw")))
            .toJSON();
        expect(toTest).toHaveStyleRule('letter-spacing', 'var(--textappearances-copy150-letterspacing)');
        expect(toTest.children[0]).toHaveStyleRule('letter-spacing', 'var(--textappearances-copy150-letterspacing)');
    });
    test('letter-spacing appearence staticSize', () => {
        const toTest = renderer
            .create(React.createElement(ThemeProvider, null,
            React.createElement(Text, { appearance: TextAppearance.copy150, staticSize: true },
                React.createElement(Text, null, "dkdf"),
                React.createElement(Text, { staticSize: true }, "dkdf"),
                "uyytuw")))
            .toJSON();
        expect(toTest).toHaveStyleRule('letter-spacing', '0.04px');
        expect(toTest.children[0]).toHaveStyleRule('letter-spacing', 'var(--textappearances-copy150-letterspacing)');
        expect(toTest.children[1]).toHaveStyleRule('letter-spacing', '0.04px');
    });
    test(`text-align default`, () => {
        const toTest = renderer
            .create(React.createElement(ThemeProvider, null,
            React.createElement(Text, null, "mskddk")))
            .toJSON();
        expect(toTest).not.toHaveStyleRule('text-align');
    });
    [TextAlignment.center, TextAlignment.left, TextAlignment.right].forEach(align => {
        test(`text-align ${align}`, () => {
            const toTest = renderer
                .create(React.createElement(ThemeProvider, null,
                React.createElement(Text, { textAlign: align }, "mskddk")))
                .toJSON();
            expect(toTest).toHaveStyleRule('text-align', align);
        });
    });
    test('text-decoration default', () => {
        const toTest = renderer
            .create(React.createElement(ThemeProvider, null,
            React.createElement(Text, null, "mskddk")))
            .toJSON();
        expect(toTest).not.toHaveStyleRule('text-decoration');
    });
    test('text-decoration default', () => {
        const toTest = renderer
            .create(React.createElement(ThemeProvider, null,
            React.createElement(Text, { strikethrough: true }, "mskddk")))
            .toJSON();
        expect(toTest).toHaveStyleRule('text-decoration', 'line-through');
    });
    test('text-decoration default', () => {
        const toTest = renderer
            .create(React.createElement(ThemeProvider, null,
            React.createElement(Text, { strikethrough: false }, "mskddk")))
            .toJSON();
        expect(toTest).toHaveStyleRule('text-decoration', 'initial');
    });
});
