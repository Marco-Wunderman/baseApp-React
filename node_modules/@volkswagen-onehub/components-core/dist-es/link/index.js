import * as React from 'react';
import { css } from 'styled-components';
import { styled } from '../theme-provider';
import { createA11yOutlineStyles } from '../helpers';
const linkBaseStyles = css `
	position: relative;
	color: ${props => props.disabled
    ? props.theme.interaction.recipe400.disabled
    : props.theme.interaction.recipe400.default};
	text-decoration: none;

	${props => props.disabled
    ? css `
					pointer-events: none;
			  `
    : css `
					:hover,
					:focus {
						border-bottom-color: ${props.theme.interaction.recipe400.hover};
						color: ${props.theme.interaction.recipe400.hover};
					}
					:focus {
						${createA11yOutlineStyles(props)}
					}
			  `}

	${props => props.isInline &&
    css `
			padding-bottom: 2px;
			border-bottom: 1px solid currentColor;
		`};
`;
const StyledLink = styled.a.withConfig({ displayName: "StyledLink", componentId: "sc-jijr17" }) `
	${linkBaseStyles}
`;
const StyledLinkButton = styled.button.withConfig({ displayName: "StyledLinkButton", componentId: "sc-mr76mu" }) `
	cursor: pointer;
	background: none;
	border: none;
	padding: inherit;
	appearance: none;
	font-weight: inherit;
	${linkBaseStyles}
`;
export const Link = props => {
    const { children, href, onClick, onMouseOut, onMouseOver, rel, target, innerRef, isInline, title, property, typeOf, disabled, itemProp } = props;
    return (React.createElement(StyledLink, { ref: innerRef, isInline: isInline, href: (!disabled && href) || undefined, onClick: (!disabled && onClick) || undefined, onMouseOver: onMouseOver, onMouseOut: onMouseOut, target: target, rel: rel, title: title, property: property, typeOf: typeOf, disabled: disabled, itemProp: itemProp }, children));
};
export const LinkButton = props => {
    const { children, onClick, innerRef, isInline, disabled } = props;
    return (React.createElement(StyledLinkButton, { ref: innerRef, isInline: isInline, onClick: (!disabled && onClick) || undefined, disabled: disabled }, children));
};
