/// <reference types="styled-components" />
import * as React from 'react';
import { ThemeDefinition } from '../theme-provider';
export declare enum ShimBackgroundType {
    OPAQUE = "OPAQUE",
    TRANSPARENT = "TRANSPARENT"
}
export interface ShimLayerProps {
    readonly onClick?: React.ReactEventHandler<HTMLDivElement>;
    readonly backgroundType?: ShimBackgroundType;
    /**
     * This is provided by the react-transition-group. No need to use it when instantiating the component.
     * Note: If you write a wrapper for this component, take care to pass these props through to ensure that the
     * animations still work
     */
    readonly in?: boolean;
    /**
     * This is provided by the react-transition-group. No need to use it when instantiating the component.
     * Note: If you write a wrapper for this component, take care to pass these props through to ensure that the
     * animations still work
     */
    onExited?(): void;
}
export interface ShimLayerPropsWithAnimation extends ShimLayerProps {
    readonly theme: ThemeDefinition;
    /**
     * This is provided by the react-transition-group. No need to use it when instantiating the component.
     * Note: If you write a wrapper for this component, take care to pass these props through to ensure that the
     * animations still work
     */
    readonly in?: boolean;
    /**
     * This is provided by the react-transition-group. No need to use it when instantiating the component.
     * Note: If you write a wrapper for this component, take care to pass these props through to ensure that the
     * animations still work
     */
    onExited?(): void;
}
export declare const InternalShimLayer: React.FunctionComponent<ShimLayerPropsWithAnimation>;
export declare const ShimLayer: React.ForwardRefExoticComponent<Pick<React.PropsWithChildren<ShimLayerPropsWithAnimation>, "children" | "in" | "onClick" | "onExited" | "backgroundType"> & {
    theme?: any;
}>;
