import 'jest-styled-components';
import { Breakpoints } from '../../helpers';
import { createTestStyledComponent } from '../../helpers/__tests__/helpers';
import { ContainerWrap } from '../definitions';
import { createCSSVariablesForSizes, createSpacingAroundElementsStyles, createSpacingBetweenElementsStyles } from '../helpers';
import { ContainerPadding } from '../index';
describe('createCSSVariablesForSizes', () => {
    const testConfig = {
        [Breakpoints.default]: ContainerPadding.static100
    };
    const testTheme = {
        size: {
            static100: 'testToken'
        }
    };
    test('creates media queries for test config', () => {
        const css = createCSSVariablesForSizes(testConfig, testTheme);
        expect(createTestStyledComponent(css)).toHaveStyleRule('--container-0-static100', 'testToken');
    });
});
describe('createSpacingBetweenElementsStyles', () => {
    const testTheme = {
        size: {
            static100: 'testToken'
        }
    };
    test('creates styles without media query', () => {
        const css = createSpacingBetweenElementsStyles(ContainerWrap.always, testTheme);
        expect(JSON.stringify(css)).not.toMatch(/media/);
    });
    test('creates styles with media query', () => {
        const testConfigWrap = {
            [Breakpoints.b960]: ContainerWrap.always
        };
        const breakpoint = `(min-width: ${Breakpoints.b960}px)`;
        const css = createSpacingBetweenElementsStyles(testConfigWrap, testTheme);
        expect(JSON.stringify(css)).toContain(breakpoint);
    });
});
describe('createSpacingAroundElementsStyles', () => {
    const testTheme = {
        size: {
            static100: 'testToken'
        }
    };
    test('creates media queries for test config with breakpoints', () => {
        const testPadding = {
            [Breakpoints.default]: ContainerPadding.static100
        };
        const css = createSpacingAroundElementsStyles(testPadding, testTheme);
        expect(createTestStyledComponent(css)).toHaveStyleRule('padding', 'var(--container-0-static100)');
        expect(createTestStyledComponent(css)).toHaveStyleRule('padding', 'var(--container-0-static100)');
    });
    test('creates media queries for test config with directions', () => {
        const testPadding = {
            top: ContainerPadding.static100
        };
        const css = createSpacingAroundElementsStyles(testPadding, testTheme);
        expect(createTestStyledComponent(css)).toHaveStyleRule('padding-top', 'testToken');
    });
    test('creates media queries for test config with directions and breakpoints', () => {
        const testPadding = {
            top: {
                [Breakpoints.default]: ContainerPadding.static100
            }
        };
        const css = createSpacingAroundElementsStyles(testPadding, testTheme);
        expect(createTestStyledComponent(css)).toHaveStyleRule('padding-top', 'var(--container-0-static100)');
    });
});
