import * as React from 'react';
import { BreakpointWrapper } from '../breakpoint-wrapper';
import { DemoRoot } from '../demo/demo-root/index';
import { Breakpoints } from '../helpers';
import { styled } from '../theme-provider';
import { Container, ContainerGutter, ContainerHorizontalAlignment, ContainerPadding, ContainerVerticalAlignment, ContainerWrap } from './index';
import { DemoThemeProviderWithToggle, DemoContainer } from '../demo';
export const DemoContent = styled.div.withConfig({ displayName: "DemoContent", componentId: "sc-tc7e8z" }) `
	color: ${props => props.theme.text.color.primary};
	border: 1px solid ${props => props.theme.text.color.primary};
	padding: 5px;
`;
export const LargeDemoContent = styled(DemoContent).withConfig({ displayName: "LargeDemoContent", componentId: "sc-dg8mqm" }) `
	height: 150px;
`;
const DemoContainerWrapper = styled.div.withConfig({ displayName: "DemoContainerWrapper", componentId: "sc-w2h6ov" }) `
	border: 1px solid ${props => props.theme.text.color.primary};
`;
export const demoContent = [
    React.createElement(DemoContent, { key: "first_div" }, "First div"),
    React.createElement(DemoContent, { key: "second_div" }, "Second div"),
    React.createElement(DemoContent, { key: "third_div" }, "Third div"),
    React.createElement(DemoContent, { key: "fourth_div" }, "Fourth div"),
    React.createElement(DemoContent, { key: "fifth_div" }, "Fifth div"),
    React.createElement(DemoContent, { key: "sixth_div" }, "Sixth div"),
    React.createElement(DemoContent, { key: "seventh_div" }, "Seventh div"),
    React.createElement(DemoContent, { key: "eighth_div" }, "Eighth div"),
    React.createElement(DemoContent, { key: "ninth_div" }, "Ninth div"),
    React.createElement(DemoContent, { key: "tenth_div" }, "Tenth div")
];
export const demoContentWithSeparators = [
    React.createElement(DemoContent, { key: "first_div" }, "First div"),
    React.createElement("hr", { key: "first_separator" }),
    React.createElement(DemoContent, { key: "second_div" }, "Second div"),
    React.createElement("hr", { key: "second_separator" }),
    React.createElement(DemoContent, { key: "third_div" }, "Third div"),
    React.createElement("hr", { key: "third_separator" }),
    React.createElement(DemoContent, { key: "fourth_div" }, "Fourth div"),
    React.createElement("hr", { key: "fourth_separator" }),
    React.createElement(DemoContent, { key: "fifth_div" }, "Fifth div"),
    React.createElement("hr", { key: "fifth_separator" }),
    React.createElement(DemoContent, { key: "sixth_div" }, "Sixth div"),
    React.createElement("hr", { key: "sixth_separator" }),
    React.createElement(DemoContent, { key: "seventh_div" }, "Seventh div"),
    React.createElement("hr", { key: "seventh_separator" }),
    React.createElement(DemoContent, { key: "eighth_div" }, "Eighth div"),
    React.createElement("hr", { key: "eighth_separator" }),
    React.createElement(DemoContent, { key: "ninth_div" }, "Ninth div"),
    React.createElement("hr", { key: "ninth_separator" }),
    React.createElement(DemoContent, { key: "tenth_div" }, "Tenth div")
];
const ContainerDemo = () => (React.createElement(DemoRoot, { showGridOverlayToggle: true },
    React.createElement("h2", null, "Container"),
    React.createElement("p", null, "Please note: the container is a pattern used for arranging it's child components. The child components used here are supposed to visualize the layout, they are not actual patterns."),
    React.createElement("hr", null),
    React.createElement(DemoThemeProviderWithToggle, null,
        React.createElement("h3", null, "basic styles"),
        React.createElement("h4", null, "single child"),
        React.createElement(DemoContainer, null,
            React.createElement(Container, null,
                React.createElement(DemoContent, { key: "first_div" }, "First div"))),
        React.createElement("h4", null, "without gutter between children"),
        React.createElement(DemoContainer, null,
            React.createElement(Container, null, demoContent)),
        React.createElement("hr", null),
        React.createElement("h3", null, "gutter widths between children"),
        React.createElement("h4", null, "with gutter between children (static100)"),
        React.createElement(DemoContainer, null,
            React.createElement(Container, { gutter: ContainerGutter.static100 }, demoContent)),
        React.createElement("h4", null, "with gutter between children (static200)"),
        React.createElement(DemoContainer, null,
            React.createElement(Container, { gutter: ContainerGutter.static200 }, demoContent)),
        React.createElement("h4", null, "with gutter between children (static300)"),
        React.createElement(DemoContainer, null,
            React.createElement(Container, { gutter: ContainerGutter.static300 }, demoContent)),
        React.createElement("hr", null),
        React.createElement("h3", null, "wrapping modes"),
        React.createElement("h4", null, "with space between children (static100) and wrap 'never'"),
        React.createElement(DemoContainer, null,
            React.createElement(Container, { gutter: ContainerGutter.static100, wrap: ContainerWrap.never }, demoContent)),
        React.createElement("h4", null, "with space between children (static100) and wrap 'always'"),
        React.createElement(DemoContainer, null,
            React.createElement(Container, { gutter: ContainerGutter.static100, wrap: ContainerWrap.always }, demoContent)),
        React.createElement("h4", null, "with wrap mode 'always' and 'never' on various breakpoints"),
        React.createElement(DemoContainer, null,
            React.createElement(DemoContainerWrapper, null,
                React.createElement(Container, { gutter: ContainerGutter.static100, wrap: {
                        [Breakpoints.default]: ContainerWrap.always,
                        [Breakpoints.b960]: ContainerWrap.never
                    } }, demoContent))),
        React.createElement("h4", null, "with wrap mode 'always' and 'auto' on various breakpoints"),
        React.createElement(DemoContainer, null,
            React.createElement(DemoContainerWrapper, null,
                React.createElement(Container, { gutter: ContainerGutter.static100, wrap: {
                        [Breakpoints.default]: ContainerWrap.always,
                        [Breakpoints.b560]: ContainerWrap.auto
                    } }, demoContent))),
        React.createElement("hr", null),
        React.createElement("h3", null, "stretch content to width of container"),
        React.createElement(DemoContainer, null,
            React.createElement(Container, { stretchContent: true }, demoContent)),
        React.createElement("hr", null),
        React.createElement("h3", null, "surrounding padding widths"),
        React.createElement("h4", null, "with padding (static100)"),
        React.createElement(DemoContainer, null,
            React.createElement(DemoContainerWrapper, null,
                React.createElement(Container, { gutter: ContainerGutter.static100, padding: ContainerPadding.static100 }, demoContent))),
        React.createElement("h4", null, "with padding (static200)"),
        React.createElement(DemoContainer, null,
            React.createElement(DemoContainerWrapper, null,
                React.createElement(Container, { gutter: ContainerGutter.static100, padding: ContainerPadding.static200 }, demoContent))),
        React.createElement("hr", null),
        React.createElement("h4", null, "with padding (static300)"),
        React.createElement(DemoContainer, null,
            React.createElement(DemoContainerWrapper, null,
                React.createElement(Container, { gutter: ContainerGutter.static100, padding: ContainerPadding.static300 }, demoContent))),
        React.createElement("h4", null, "with different padding for all sides"),
        React.createElement(DemoContainerWrapper, null,
            React.createElement(Container, { gutter: ContainerGutter.static100, padding: {
                    top: ContainerPadding.static100,
                    left: {
                        [Breakpoints.b960]: ContainerPadding.grid001,
                        [Breakpoints.b1280]: ContainerPadding.grid002
                    }
                } }, demoContent)),
        React.createElement("hr", null),
        React.createElement("h3", null, "Vertical alignment of children"),
        React.createElement("h4", null, "children vertically centered"),
        React.createElement(DemoContainer, null,
            React.createElement(DemoContainerWrapper, null,
                React.createElement(Container, { gutter: ContainerGutter.static100, verticalAlign: ContainerVerticalAlignment.center },
                    React.createElement(DemoContent, null, "small content"),
                    React.createElement(LargeDemoContent, null, "large content")))),
        React.createElement("h4", null, "children aligned to the bottom"),
        React.createElement(DemoContainer, null,
            React.createElement(DemoContainerWrapper, null,
                React.createElement(Container, { gutter: ContainerGutter.static100, verticalAlign: ContainerVerticalAlignment.flexEnd },
                    React.createElement(DemoContent, null, "small content"),
                    React.createElement(LargeDemoContent, null, "large content")))),
        React.createElement("hr", null),
        React.createElement("h3", null, "Horizontal alignment of children"),
        React.createElement("h4", null, "centered children"),
        React.createElement(DemoContainer, null,
            React.createElement(DemoContainerWrapper, null,
                React.createElement(Container, { gutter: ContainerGutter.static100, horizontalAlign: ContainerHorizontalAlignment.center },
                    React.createElement(DemoContent, null, "small content")))),
        React.createElement("h4", null, "children aligned to the end"),
        React.createElement(DemoContainer, null,
            React.createElement(DemoContainerWrapper, null,
                React.createElement(Container, { gutter: ContainerGutter.static100, horizontalAlign: ContainerHorizontalAlignment.flexEnd },
                    React.createElement(DemoContent, null, "small content")))),
        React.createElement("h4", null, "children aligned differently on various breakpoints"),
        React.createElement(DemoContainer, null,
            React.createElement(DemoContainerWrapper, null,
                React.createElement(Container, { gutter: ContainerGutter.static100, horizontalAlign: {
                        [Breakpoints.default]: ContainerHorizontalAlignment.flexStart,
                        [Breakpoints.b560]: ContainerHorizontalAlignment.flexEnd,
                        [Breakpoints.b960]: ContainerHorizontalAlignment.flexStart,
                        [Breakpoints.b1280]: ContainerHorizontalAlignment.center
                    } },
                    React.createElement(DemoContent, null, "small content")))),
        React.createElement("hr", null),
        React.createElement("h3", null, "Separators between children"),
        React.createElement(DemoContainer, null,
            React.createElement(DemoContainerWrapper, null,
                React.createElement(Container, { gutter: ContainerGutter.static100, wrap: ContainerWrap.always }, demoContentWithSeparators))),
        React.createElement("hr", null),
        React.createElement("h3", null, "Container Configuration Options"),
        React.createElement("h4", null, "Container Gutter Configuration"),
        React.createElement("p", null, "using static100, static200, and static300 on various breakpoints"),
        React.createElement(DemoContainer, null,
            React.createElement(DemoContainerWrapper, null,
                React.createElement(Container, { gutter: {
                        [Breakpoints.default]: ContainerGutter.static100,
                        [Breakpoints.tablet]: ContainerGutter.static200,
                        [Breakpoints.desktop]: ContainerGutter.static300
                    } }, demoContent))),
        React.createElement("h4", null, "Container Padding Configuration"),
        React.createElement("p", null, "using static100, static200, and static300 on various breakpoints"),
        React.createElement(DemoContainer, null,
            React.createElement(DemoContainerWrapper, null,
                React.createElement(Container, { padding: {
                        [Breakpoints.default]: ContainerPadding.static100,
                        [Breakpoints.tablet]: ContainerPadding.static200,
                        [Breakpoints.desktop]: ContainerPadding.static300
                    } }, demoContent))),
        React.createElement("h4", null, "Container Padding Configuration"),
        React.createElement("p", null, "using grid001, grid002, and grid003 on various breakpoints"),
        React.createElement(DemoContainerWrapper, null,
            React.createElement(Container, { padding: {
                    [Breakpoints.default]: ContainerPadding.grid001,
                    [Breakpoints.tablet]: ContainerPadding.grid002,
                    [Breakpoints.desktop]: ContainerPadding.grid003
                } }, demoContent)),
        React.createElement("h4", null, "Directional Container Padding Configuration"),
        React.createElement("p", null, "using static100, static200, static300, and static400 for different directions on various breakpoints"),
        React.createElement(DemoContainer, null,
            React.createElement(DemoContainerWrapper, null,
                React.createElement(Container, { padding: {
                        top: {
                            [Breakpoints.default]: ContainerPadding.static100,
                            [Breakpoints.tablet]: ContainerPadding.static200,
                            [Breakpoints.desktop]: ContainerPadding.static300
                        },
                        bottom: {
                            [Breakpoints.default]: ContainerPadding.static300,
                            [Breakpoints.tablet]: ContainerPadding.static400,
                            [Breakpoints.desktop]: ContainerPadding.static500
                        }
                    } }, demoContent))),
        React.createElement("h4", null, "Directional Container Padding Configuration with LTR / RTL"),
        React.createElement("p", null, "using different sized paddings (static100, static200, static300, and static400) for inlineStart and inlineEnd directions on various breakpoints"),
        React.createElement(DemoContainer, null,
            React.createElement(DemoContainerWrapper, null,
                React.createElement(Container, { padding: {
                        inlineStart: {
                            [Breakpoints.default]: ContainerPadding.static100,
                            [Breakpoints.tablet]: ContainerPadding.static200,
                            [Breakpoints.desktop]: ContainerPadding.static300
                        },
                        inlineEnd: {
                            [Breakpoints.default]: ContainerPadding.static300,
                            [Breakpoints.tablet]: ContainerPadding.static400,
                            [Breakpoints.desktop]: ContainerPadding.static500
                        }
                    } }, demoContent))),
        ' ',
        React.createElement("h4", null, "With children that render `null`"),
        React.createElement("p", null, "using static300 as gutter. If any child returns `null` in its render method, no gutter will be reserved"),
        React.createElement(DemoContainer, null,
            React.createElement(DemoContainerWrapper, null,
                React.createElement(Container, { gutter: ContainerGutter.static300 },
                    React.createElement(BreakpointWrapper, { max: Breakpoints.b960 },
                        React.createElement(DemoContent, null, "I'm only visible below 960px, so there is no gutter for me in larger breakpoints")),
                    demoContent))),
        React.createElement("h4", null, "With reference"),
        React.createElement(DemoContainer, null,
            React.createElement(DemoContainerWrapper, null,
                React.createElement(Container, { ref: React.createRef() }, demoContent))))));
export default ContainerDemo;
