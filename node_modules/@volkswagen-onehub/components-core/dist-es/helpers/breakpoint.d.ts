export declare enum Breakpoints {
    default = 0,
    tablet = 768,
    desktop = 1440,
    max = 1920,
    b560 = 560,
    b960 = 960,
    b1280 = 1280,
    b1600 = 1600,
    b1920 = 1920,
    b2560 = 2560
}
export interface BreakpointConfigType<X = string> {
    readonly [breakpoint: string]: X;
}
export declare function isBreakpointConfig<X = any>(prop?: X | BreakpointConfigType<X>): prop is BreakpointConfigType<X>;
/**
 * Compare two breakpoints to each other
 *
 * Pass to sort the breakpoints in ascending order
 *
 * All non-default breakpoints can also be passed as strings to enable mapping over Objects with breakpoints as keys:
 * ```
 * const breakpointConfig = {
 *     [Breakpoints.default]: theme.size.static250,
 *     [Breakpoints.b560]: theme.size.static350
 * };
 *
 * Object.keys(breakpointConfig).sort(compareBreakpoints).map(breakpoint => `
 *     @media (min-with: ${breakpoint}) {
 *         padding: ${breakpointConfig[breakpoint]}
 *     }
 * `)
 * ```
 */
export declare function compareBreakpoints(a: string | number, b: string | number): number;
export declare function createStylesForBreakpoints<T = string>(config: BreakpointConfigType<T>, fn?: (x: T) => string): string;
