/// <reference types="styled-components" />
import * as React from 'react';
import { ThemeDefinition } from '../theme-provider';
export declare enum InteractionLayerSize {
    A = "A",
    B = "B",
    C = "C"
}
export interface InteractionLayerProps {
    /**
     * Defines the width of the layer
     */
    readonly size: InteractionLayerSize;
    /**
     * Indicates whether the layer instance is the currently active layer
     */
    readonly active: boolean;
    /**
     * Reference for the element that will be able to scroll. This is needed for body-scroll-lock.
     */
    readonly scrollElementRef?: React.RefObject<HTMLDivElement> | ((el: HTMLDivElement) => void);
}
export interface InteractionLayerPropsWithAnimation extends InteractionLayerProps {
    readonly theme: ThemeDefinition;
    /**
     * This is provided by the react-transition-group. No need to use it when instantiating the component.
     * Note: If you write a wrapper for this component, take care to pass these props through to ensure that the
     * animations still work
     */
    readonly in?: boolean;
    /**
     * This is provided by the react-transition-group. No need to use it when instantiating the component.
     * Note: If you write a wrapper for this component, take care to pass these props through to ensure that the
     * animations still work
     */
    onExited?(): void;
    key?: string;
}
interface InteractionLayerState {
    readonly direction?: 'ltr' | 'rtl';
    readonly windowHeight?: number;
}
declare class InteractionLayerInternal extends React.PureComponent<React.PropsWithChildren<InteractionLayerPropsWithAnimation>, InteractionLayerState> {
    constructor(props: InteractionLayerPropsWithAnimation);
    private readonly getWindowHeight;
    private readonly resizeInteractionLayer;
    componentDidMount(): void;
    componentWillUnmount(): void;
    private ref;
    render(): JSX.Element | null;
}
export declare const InteractionLayer: React.ForwardRefExoticComponent<Pick<InteractionLayerPropsWithAnimation & {
    children?: React.ReactNode;
} & React.RefAttributes<InteractionLayerInternal>, "active" | "size" | "key" | "ref" | "children" | "in" | "onExited" | "scrollElementRef"> & {
    theme?: any;
}>;
export {};
