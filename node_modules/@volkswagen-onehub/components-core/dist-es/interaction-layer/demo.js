import * as React from 'react';
import { Button } from '../button';
import { Checkbox } from '../checkbox';
import { Container, ContainerGutter, ContainerPadding, ContainerWrap } from '../container';
import { DemoContainer } from '../demo/demo-container';
import { DemoRoot } from '../demo/demo-root';
import { DemoThemeProviderWithToggle, DemoThemeProviderToggleContext } from '../demo/demo-theme-provider-with-toggle';
import { Breakpoints } from '../helpers';
import { withFocusLock } from '../hoc';
import { LayerWrapper } from '../layer-wrapper';
import { RadioButton } from '../radio-button';
import { Text } from '../text';
import { InteractionLayer, InteractionLayerSize } from './index';
import { data } from './demo-data';
const InteractionLayerWithFocusLock = withFocusLock(InteractionLayer);
export default class InteractionLayerDemo extends React.Component {
    constructor() {
        super(...arguments);
        this.state = {
            size: InteractionLayerSize.A,
            longContent: true,
            show: false,
            direction: 'ltr'
        };
        this.handleShow = (show) => {
            this.setState({
                show
            });
        };
        this.handleSizeChange = (_event, props) => {
            this.setState({
                size: props.value
            });
        };
        this.handleLongTextChange = (_event, props) => {
            this.setState({
                longContent: !props.checked
            });
        };
    }
    render() {
        const { longContent, show, size } = this.state;
        const content = longContent ? data.long : data.short;
        return (React.createElement(DemoRoot, { showGridOverlayToggle: true },
            React.createElement(DemoThemeProviderWithToggle, null,
                React.createElement(DemoThemeProviderToggleContext.Consumer, null, value => (React.createElement(React.Fragment, null,
                    React.createElement("h2", null, "Interaction Layer"),
                    React.createElement("p", null, "Note: to make this area not clickable, use a shim component!"),
                    React.createElement("p", null, "Please note: the keys used in this demo cause a re-render of the button right when you change the text direction. You probably don't want to do that in your application."),
                    React.createElement(DemoContainer, null,
                        React.createElement(Text, null, "Select the layer you want to open:"),
                        React.createElement(RadioButton, { name: "size", value: "A", checked: size === 'A', onChange: this.handleSizeChange, label: "Size A" }),
                        React.createElement(RadioButton, { name: "size", value: "B", checked: size === 'B', onChange: this.handleSizeChange, label: "Size B" }),
                        React.createElement(RadioButton, { name: "size", value: "C", checked: size === 'C', onChange: this.handleSizeChange, label: "Size C" }),
                        React.createElement(Checkbox, { value: "long-text", checked: longContent, onChange: this.handleLongTextChange, label: "has long text" }),
                        React.createElement(Button, { onClick: () => this.handleShow(true) }, "Show Layer"),
                        data.long.split('\n\n').map((paragraph, index) => (React.createElement(Text, { key: `background-paragraph-${index}` }, paragraph))),
                        React.createElement(LayerWrapper, null, show ? (React.createElement(InteractionLayerWithFocusLock, { key: `interaction-layer-${value.direction}`, size: size, active: true, onEscKeyUp: () => this.handleShow(false) },
                            React.createElement(Container, { gutter: {
                                    [Breakpoints.default]: ContainerGutter.static300,
                                    [Breakpoints.b560]: ContainerGutter.static350,
                                    [Breakpoints.b1600]: ContainerGutter.static370
                                }, padding: ContainerPadding.grid001, wrap: ContainerWrap.always },
                                React.createElement(Button, { key: "close-top", onClick: () => this.handleShow(false) }, "Close Top"),
                                content.split('\n\n').map((paragraph, index) => (React.createElement(Text, { key: `content-paragraph-${index}` }, paragraph))),
                                React.createElement(Button, { key: "close-bottom", onClick: () => this.handleShow(false) }, "Close Bottom")))) : (undefined)))))))));
    }
}
