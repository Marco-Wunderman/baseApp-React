var __rest = (this && this.__rest) || function (s, e) {
    var t = {};
    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
        t[p] = s[p];
    if (s != null && typeof Object.getOwnPropertySymbols === "function")
        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) if (e.indexOf(p[i]) < 0)
            t[p[i]] = s[p[i]];
    return t;
};
import * as React from 'react';
import * as ReactDOM from 'react-dom';
import { ArrowLeft, ArrowRight } from '@volkswagen-onehub/icons-core';
import { CTA } from '../call-to-action';
import { styled } from '../theme-provider';
const TrailingArrowRight = styled(ArrowRight).withConfig({ displayName: "TrailingArrowRight", componentId: "sc-1b5br3g" }) `
	order: 1; /* move the icon from its leading position to a trailing position, without changing direction */
`;
const TrailingArrowLeft = styled(ArrowLeft).withConfig({ displayName: "TrailingArrowLeft", componentId: "sc-1nuavp8" }) `
	order: 1; /* move the icon from its leading position to a trailing position, without changing direction */
`;
export class ButtonNext extends React.PureComponent {
    constructor(props) {
        super(props);
        this.ref = React.createRef();
        this.state = {
            direction: 'ltr'
        };
    }
    componentDidMount() {
        const direction = this.ref &&
            this.ref.current &&
            window &&
            // We need to use findDOMNode to ensure that we also get the
            // element from the reference in styled-components version v3.x.x.
            // After discontinuing the support for styled-components v3 we can remove
            // the `findDOMNode` and directly access the reference again.
            // eslint-disable-next-line react/no-find-dom-node
            window.getComputedStyle(ReactDOM.findDOMNode(this.ref.current)).direction;
        if (direction === 'ltr' || direction === 'rtl') {
            this.setState({ direction });
        }
    }
    render() {
        const { size } = this.props;
        const { direction } = this.state;
        const icon = direction === 'ltr' ? (React.createElement(TrailingArrowRight, { variant: size === 'small' ? 'small' : 'default' })) : (React.createElement(TrailingArrowLeft, { variant: size === 'small' ? 'small' : 'default' }));
        const _a = this.props, { children } = _a, rest = __rest(_a, ["children"]);
        return (React.createElement(CTA, Object.assign({}, rest, { icon: icon, ref: this.ref, size: size }), children));
    }
}
