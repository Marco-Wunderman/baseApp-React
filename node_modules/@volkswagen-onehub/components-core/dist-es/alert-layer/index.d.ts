import * as React from 'react';
import { ThemeDefinition } from '../theme-provider/definitions';
export interface AlertLayerProps {
    /**
     * Indicates whether the layer instance is the currently active layer
     */
    readonly active: boolean;
    /**
     * This is provided by the react-transition-group. No need to use it when instantiating the component.
     * Note: If you write a wrapper for this component, take care to pass these props through to ensure that the
     * animations still work
     */
    readonly in?: boolean;
    /**
     * Set the aria role to be used in the alert.
     *
     * @param alert is used to communicate an important and usually time-sensitive message to the user.
     * @param alertdialog  is used to notify the user of urgent information that demands the user's immediate attention.
     */
    readonly role?: 'alert' | 'alertdialog';
    /**
     * Localized label for this component. For proper accessibility, this prop *must* be set to a non-empty value.
     */
    readonly ariaLabel?: string;
    /**
     * The id of the element used to title the dialog.
     */
    readonly ariaDescribedBy?: string;
    /**
     * The IDs of elements which holds the description for the alert dialog.
     */
    readonly ariaLabelledBy?: string;
    /**
     * Reference for the element that will be able to scroll. This is needed for body-scroll-lock.
     */
    readonly scrollElementRef?: React.RefObject<HTMLDivElement> | ((el: HTMLDivElement) => void);
    /**
     * This is provided by the react-transition-group. No need to use it when instantiating the component.
     * Note: If you write a wrapper for this component, take care to pass these props through to ensure that the
     * animations still work
     */
    onExited?(): void;
}
export interface AlertLayerPropsWithAnimation extends AlertLayerProps {
    readonly theme: ThemeDefinition;
    /**
     * This is provided by the react-transition-group. No need to use it when instantiating the component.
     * Note: If you write a wrapper for this component, take care to pass these props through to ensure that the
     * animations still work
     */
    readonly in?: boolean;
    /**
     * This is provided by the react-transition-group. No need to use it when instantiating the component.
     * Note: If you write a wrapper for this component, take care to pass these props through to ensure that the
     * animations still work
     */
    onExited?(): void;
}
export declare const AlertLayer: React.ForwardRefExoticComponent<Pick<React.PropsWithChildren<AlertLayerPropsWithAnimation>, "active" | "children" | "role" | "in" | "onExited" | "ariaLabel" | "ariaDescribedBy" | "ariaLabelledBy" | "scrollElementRef"> & {
    theme?: any;
}>;
