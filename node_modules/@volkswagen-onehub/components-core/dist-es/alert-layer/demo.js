import * as React from 'react';
import { Button, ButtonAppearance } from '../button';
import { Checkbox } from '../checkbox';
import { Container, ContainerGutter, ContainerHorizontalAlignment, ContainerPadding, ContainerVerticalAlignment, ContainerWrap } from '../container';
import { DemoContainer } from '../demo/demo-container';
import { DemoRoot } from '../demo/demo-root';
import { DemoThemeProviderWithToggle } from '../demo/demo-theme-provider-with-toggle';
import { Breakpoints } from '../helpers';
import { withFocusLock } from '../hoc';
import { LayerWrapper } from '../layer-wrapper';
import { ShimLayer } from '../shim-layer';
import { Text, TextAppearance, TextTag } from '../text';
import { demoData } from './demo-data';
import { AlertLayer } from './index';
/**
 * `AlertLayer` with additional `FocusLock` and keyboard ESC key handling
 */
const AlertLayerWithFocusLock = withFocusLock(AlertLayer);
const headline = 'AlertLayer with FocusLock';
class AlertLayerDemo extends React.Component {
    constructor() {
        super(...arguments);
        this.state = {
            withOverflowingContent: false,
            layerIsVisible: false
        };
        this.toggleVisibility = () => {
            const { layerIsVisible } = this.state;
            this.setState({
                layerIsVisible: !layerIsVisible
            });
        };
        this.toggleVisibilityEsc = () => {
            const { layerIsVisible } = this.state;
            if (layerIsVisible) {
                this.setState({
                    layerIsVisible: !layerIsVisible
                });
            }
        };
        this.toggleContent = (_event, props) => {
            this.setState({
                withOverflowingContent: !props.checked
            });
        };
        this.renderOkButton = () => (React.createElement(Button, { onClick: this.toggleVisibility, appearance: ButtonAppearance.Primary, stretchContent: true }, "Ok"));
        this.renderCloseButton = () => (React.createElement(Button, { onClick: this.toggleVisibility, appearance: ButtonAppearance.Secondary, stretchContent: true }, "Close"));
        this.renderLayer = () => {
            const key = 'alert-layer';
            const id = `${key}_copy_id`;
            const layerComponent = (React.createElement(AlertLayerWithFocusLock, { key: key, active: true, onEscKeyUp: this.toggleVisibilityEsc, role: "alertdialog", ariaLabel: headline, ariaDescribedBy: id }, this.renderLayerContent(id)));
            const shimComponent = (React.createElement(ShimLayer, { key: "shim", onClick: this.toggleVisibility }));
            return [shimComponent, layerComponent];
        };
    }
    renderCopy(id, copy) {
        return (React.createElement("div", { id: id },
            React.createElement(Text, { appearance: TextAppearance.copy0200 }, copy)));
    }
    renderLayerContent(id) {
        const layerContent = this.state.withOverflowingContent
            ? demoData.long
            : demoData.short;
        return (React.createElement(Container, { gutter: ContainerGutter.static400, horizontalAlign: ContainerHorizontalAlignment.center, padding: ContainerPadding.static450, verticalAlign: ContainerVerticalAlignment.center, wrap: ContainerWrap.always, stretchContent: true },
            React.createElement(Container, { gutter: ContainerGutter.static100, wrap: ContainerWrap.always },
                React.createElement(Text, { bold: true, appearance: TextAppearance.headline0400, tag: TextTag.h2 }, headline),
                React.createElement(Text, { appearance: TextAppearance.copy0200 }, this.renderCopy(id, layerContent))),
            React.createElement(Container, { gutter: ContainerGutter.static300, wrap: ContainerWrap.always },
                this.renderOkButton(),
                this.renderCloseButton())));
    }
    render() {
        return (React.createElement(DemoRoot, { showGridOverlayToggle: true },
            React.createElement(DemoThemeProviderWithToggle, null,
                React.createElement(DemoContainer, null,
                    React.createElement(Container, { gutter: {
                            [Breakpoints.default]: ContainerGutter.static300,
                            [Breakpoints.b560]: ContainerGutter.static350,
                            [Breakpoints.b1600]: ContainerGutter.static370
                        }, padding: ContainerPadding.grid001, wrap: ContainerWrap.always },
                        React.createElement(Button, { onClick: this.toggleVisibility, appearance: ButtonAppearance.Primary }, "Open Alert Layer"),
                        React.createElement(Checkbox, { value: "long-text", checked: this.state.withOverflowingContent, onChange: this.toggleContent, label: "with overflowing text" })),
                    React.createElement(LayerWrapper, { contentCentered: true }, this.state.layerIsVisible ? this.renderLayer() : undefined)))));
    }
}
export default AlertLayerDemo;
