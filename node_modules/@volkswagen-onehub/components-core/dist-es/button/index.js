import * as React from 'react';
import { createA11yOutlineStyles } from '../helpers';
import { css, styled } from '../theme-provider';
export var ButtonAppearance;
(function (ButtonAppearance) {
    ButtonAppearance["Primary"] = "Primary";
    ButtonAppearance["Secondary"] = "Secondary";
})(ButtonAppearance || (ButtonAppearance = {}));
export var ButtonType;
(function (ButtonType) {
    ButtonType["Submit"] = "submit";
    ButtonType["Reset"] = "reset";
    ButtonType["Button"] = "button";
})(ButtonType || (ButtonType = {}));
const buttonStyle = css `
	${props => props.stretchContent && 'width: 100%;'};
	display: inline-flex;
	text-align: center;
	justify-content: center;
	align-items: center;
	min-height: 44px;
	margin: 0;
	padding: 0 ${props => props.theme.size.static450};
	border: 2px solid;
	border-radius: 22px;
	outline: none;
	transition: all 0.2s ease-in-out;
	${props => {
    const { appearance } = props;
    const textRecipe = props.theme.interaction[appearance === ButtonAppearance.Primary ? 'recipe750' : 'recipe450'];
    const transparentRecipe = {
        default: 'transparent',
        disabled: 'transparent',
        hover: 'transparent',
        active: 'transparent'
    };
    const backgroundRecipe = appearance === ButtonAppearance.Primary
        ? props.theme.interaction.recipe450
        : transparentRecipe;
    const borderRecipe = props.theme.interaction.recipe450;
    return props.disabled
        ? css `
					cursor: not-allowed;
					background: ${backgroundRecipe.disabled};
					border-color: ${borderRecipe.disabled};
					color: ${textRecipe.disabled};
			  `
        : css `
					& {
						cursor: pointer;
						background: ${backgroundRecipe.default};
						border-color: ${borderRecipe.default};
						color: ${textRecipe.default};
					}
					@media (hover: hover) {
						:hover,
						:focus {
							background: ${backgroundRecipe.hover};
							border-color: ${borderRecipe.hover};
							color: ${textRecipe.hover};
						}
						:focus {
							${createA11yOutlineStyles(props)}
						}
					}
					:active {
						background: ${backgroundRecipe.active};
						border-color: ${borderRecipe.active};
						color: ${textRecipe.active};
					}
			  `;
}};
`;
const StyledButton = styled.button.withConfig({ displayName: "StyledButton", componentId: "sc-1gcpt77" }) `
	${buttonStyle}
`;
const StyledButtonLink = styled.a.withConfig({ displayName: "StyledButtonLink", componentId: "sc-v4r7p2" }) `
	text-decoration: none;
	${buttonStyle}
`;
export const Button = props => {
    const { appearance = ButtonAppearance.Secondary, children, disabled, innerRef, onClick, stretchContent, type } = props;
    return (React.createElement(StyledButton, { disabled: disabled, appearance: appearance, type: type, onClick: onClick, stretchContent: stretchContent, ref: innerRef }, children));
};
export const ButtonLink = props => {
    const { appearance = ButtonAppearance.Secondary, children, disabled, href, target, innerRef, rel, title, onClick, stretchContent } = props;
    return (React.createElement(StyledButtonLink, { disabled: disabled, appearance: appearance, href: href, target: target, ref: innerRef, rel: rel, title: title, onClick: onClick, stretchContent: stretchContent }, children));
};
