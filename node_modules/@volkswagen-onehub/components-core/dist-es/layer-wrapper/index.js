var __rest = (this && this.__rest) || function (s, e) {
    var t = {};
    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
        t[p] = s[p];
    if (s != null && typeof Object.getOwnPropertySymbols === "function")
        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) if (e.indexOf(p[i]) < 0)
            t[p[i]] = s[p[i]];
    return t;
};
import * as React from 'react';
import { TransitionGroup } from 'react-transition-group';
import { styled } from '../theme-provider';
const StyledLayerWrapper = styled.div.withConfig({ displayName: "StyledLayerWrapper", componentId: "sc-1bl8kxv" }) `
	position: fixed;
	top: 0;
	right: 0;
	bottom: 0;
	left: 0;
	${props => props.contentCentered &&
    `
		display: flex;
		justify-content: center;
		align-items: center;
	`}
	overflow: hidden;

	// The wrapper must always be mounted for animations to work, So we need to be able to click "through" it
	pointer-events: none;

	// All clicks go through the layer wrapper, so enable it for the children (= actual layers) again
	& > * {
		pointer-events: auto;
	}
`;
StyledLayerWrapper.displayName = 'StyledLayerWrapper';
export const LayerWrapper = props => {
    const { contentCentered } = props, rest = __rest(props, ["contentCentered"]);
    return (React.createElement(StyledLayerWrapper, { contentCentered: contentCentered },
        React.createElement(TransitionGroup, Object.assign({}, rest, { appear: true }))));
};
