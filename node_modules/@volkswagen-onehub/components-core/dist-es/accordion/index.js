import * as React from 'react';
import { Breakpoints, createA11yOutlineStyles } from '../helpers';
import { styled } from '../theme-provider';
import { ChevronDown } from '@volkswagen-onehub/icons-core';
// NOTE: anim definition taken from CMS helpers
const ANIMATION_FUNCTION = '0.3s cubic-bezier(0.14, 1.12, 0.67, 0.99)';
const StyledIcon = styled(ChevronDown).withConfig({ displayName: "StyledIcon", componentId: "sc-ivhe3f" }) `
	color: ${props => props.theme.interaction.recipe450.default};
	transition: transform ${ANIMATION_FUNCTION};
	transform: ${props => (props.isOpen ? 'rotateX(180deg)' : 'rotateX(0)')};
	// To center icon vertically we need to calculate difference
	// between headline line height (headline300) and icon size (s200)
	margin-top: ${props => `calc((${props.theme.textAppearances.headline0300.lineHeight} - ${props.theme.size.static350}) / 2)`};
	transform-origin: 50% 50%;

	:hover {
		color: ${props => props.theme.interaction.recipe450.hover};
	}
`;
const StyledAccordion = styled.div.withConfig({ displayName: "StyledAccordion", componentId: "sc-cqj46j" }) `
	border-bottom: solid 2px ${props => props.theme.border.color.secondary};
`;
const StyledAccordionHead = styled.button.withConfig({ displayName: "StyledAccordionHead", componentId: "sc-826zgp" }) `
	// NOTE: button reset
	padding: 0;
	border: 0;
	background: none;
	appearance: none;
	text-align: inherit;
	word-break: break-all;
	:lang(ko) {
		word-break: keep-all;
	}
	width: 100%;
	padding-top: ${props => props.theme.size.dynamic0100};
	padding-bottom: ${props => props.isOpen ? props.theme.size.dynamic0040 : props.theme.size.dynamic0100};

	@media (min-width: ${Breakpoints.desktop}px) {
		padding-bottom: ${props => props.theme.size.dynamic0050};
	}

	cursor: pointer;
	user-select: none;

	:focus {
		outline: none;

		${StyledIcon} {
			${props => createA11yOutlineStyles(props)}
		}
	}
`;
const StyledAccordionBody = styled.div.withConfig({ displayName: "StyledAccordionBody", componentId: "sc-1kl75yy" }) `
	display: ${props => (props.isOpen ? 'grid' : 'none')};
	grid-template-columns: auto ${props => props.theme.size.grid001};
	padding-bottom: ${props => props.theme.size.dynamic0100};
`;
const StyledHeadWrapper = styled.div.withConfig({ displayName: "StyledHeadWrapper", componentId: "sc-3h6ml" }) `
	display: grid;
	grid-column-gap: ${props => props.theme.size.dynamic0100};
	grid-template-columns: auto max-content;
`;
export const Accordion = props => {
    const { id, isOpen = false, headline, children, onClick } = props;
    const headId = id + '_head';
    const bodyId = id + '_body';
    return (React.createElement(StyledAccordion, { id: id },
        React.createElement(StyledAccordionHead, { id: headId, tabIndex: 0, isOpen: isOpen, onClick: onClick, "aria-expanded": isOpen, "aria-controls": bodyId },
            React.createElement(StyledHeadWrapper, null,
                headline,
                React.createElement(StyledIcon, { isOpen: isOpen, variant: "default" }))),
        React.createElement(StyledAccordionBody, { id: bodyId, isOpen: isOpen, "aria-hidden": !isOpen, "aria-labelledby": headId, role: "region" },
            React.createElement("div", null, children))));
};
Accordion.displayName = 'Accordion';
