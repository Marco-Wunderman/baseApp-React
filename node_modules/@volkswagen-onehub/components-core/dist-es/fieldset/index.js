import * as React from 'react';
import { Text, TextAppearance, TextColor, TextTag } from '../text';
import { styled } from '../theme-provider';
import { Container, ContainerGutter, ContainerWrap } from '../container';
export var FieldsetAppearance;
(function (FieldsetAppearance) {
    FieldsetAppearance[FieldsetAppearance["Default"] = 0] = "Default";
    FieldsetAppearance[FieldsetAppearance["Error"] = 1] = "Error";
})(FieldsetAppearance || (FieldsetAppearance = {}));
const StyledFieldset = styled.fieldset.withConfig({ displayName: "StyledFieldset", componentId: "sc-16gvfsk" }) `
	border: none;
	padding: 0;
	margin: 0;
	min-width: 0;
`;
const StyledErrorText = styled.span.withConfig({ displayName: "StyledErrorText", componentId: "sc-1cts30a" }) `
	display: block;
	color: ${props => props.theme.interaction.recipe360.default};
	&:first-child {
		margin-bottom: ${props => props.errorShouldBeVisible && props.theme.size.static350};
	}
	&:nth-child(2) {
		margin-bottom: ${props => props.theme.size.static350};
		margin-top: ${props => props.errorShouldBeVisible && props.theme.size.static200};
	}
`;
export const Fieldset = props => {
    const { children, legend, required, appearance, errorText } = props;
    const errorShouldBeVisible = Boolean(appearance === FieldsetAppearance.Error && errorText);
    return (React.createElement(StyledFieldset, null,
        legend && (React.createElement(Text, { appearance: TextAppearance.copy0200, bold: true, staticSize: true, tag: TextTag.legend },
            legend,
            required && '*')),
        React.createElement(StyledErrorText, { errorShouldBeVisible: errorShouldBeVisible, "aria-live": "assertive", "aria-relevant": "all" }, errorShouldBeVisible && (React.createElement(Text, { appearance: TextAppearance.copy0100, color: TextColor.inherit, staticSize: true }, errorText))),
        React.createElement(Container, { gutter: ContainerGutter.static350, wrap: ContainerWrap.always }, children)));
};
