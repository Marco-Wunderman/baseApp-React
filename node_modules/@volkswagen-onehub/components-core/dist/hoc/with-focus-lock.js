"use strict";
var __rest = (this && this.__rest) || function (s, e) {
    var t = {};
    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
        t[p] = s[p];
    if (s != null && typeof Object.getOwnPropertySymbols === "function")
        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) if (e.indexOf(p[i]) < 0)
            t[p[i]] = s[p[i]];
    return t;
};
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];
    result["default"] = mod;
    return result;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const React = __importStar(require("react"));
const react_focus_lock_1 = __importDefault(require("react-focus-lock"));
/**
 * WithFocusLock
 *
 * The `WithFocusLock` higher order component provides two things:
 *
 * - `FocusLock` (provided by
 *   [react-focus-lock](https://github.com/theKashey/react-focus-lock)) to keep the
 *   user focus in the current layer so that keyboard navigation will be restricted
 *   to the elements within the `FocusLock`
 * - the `onEscKeyUp` handler that listens for the ESC keyup event to enable
 *   closing the current layer by pressing the escape key
 *
 * Example
 *
 * ```javascript
 *   const Layer = LayerComponent;
 *   const LayerComponentWithFocusLock = withFocusLock(Layer);
 *
 *   <Layer active={true}>
 *     // some content ...
 *   <Layer/>
 *
 *   <LayerComponentWithFocusLock
 *     active={true}
 *     onEscKeyUp={() => doSomething()}
 *   >
 *     // some content ...
 *   <LayerComponentWithFocusLock/>
 * ```
 */
exports.withFocusLock = (WrappedComponent) => { var _a; return _a = class WithFocusLock extends React.PureComponent {
        constructor() {
            super(...arguments);
            this.handleKeyUp = (event) => {
                const { onEscKeyUp } = this.props;
                if (event.key === 'Escape' && onEscKeyUp) {
                    event.stopPropagation();
                    onEscKeyUp(event);
                }
            };
        }
        render() {
            // eslint-disable-next-line @typescript-eslint/no-unused-vars
            const _a = this.props, { onEscKeyUp } = _a, wrappedComponentProps = __rest(_a, ["onEscKeyUp"]);
            return (React.createElement(react_focus_lock_1.default, { returnFocus: true, autoFocus: true },
                React.createElement("div", { onKeyUp: this.handleKeyUp },
                    React.createElement(WrappedComponent, Object.assign({}, wrappedComponentProps)))));
        }
    },
    _a.displayName = `WithFocusLock(${WrappedComponent.displayName})`,
    _a; };
