import * as React from 'react';
declare type Emphasis = 'primary' | 'secondary' | 'tertiary';
declare type Size = 'small' | 'large';
interface CTACommonProps {
    readonly emphasis?: Emphasis;
    readonly size?: Size;
    readonly icon?: React.ReactElement;
    readonly stretchContent?: boolean;
    readonly ariaLabel?: string;
}
export interface CTAButtonProps {
    readonly tag: 'button';
    readonly onClick?: React.MouseEventHandler<HTMLButtonElement>;
    readonly disabled?: boolean;
    readonly title?: string;
    readonly type?: 'submit' | 'reset' | 'button';
}
export interface CTALinkProps {
    readonly tag: 'a';
    readonly href?: string;
    readonly disabled?: boolean;
    readonly onClick?: React.MouseEventHandler<HTMLAnchorElement>;
    readonly property?: string;
    readonly rel?: 'alternate' | 'archives' | 'author' | 'bookmark' | 'external' | 'help' | 'license' | 'next' | 'nofollow' | 'noopener' | 'noreferrer' | 'prev' | 'search' | 'tag';
    readonly target?: '_self' | '_blank' | '_parent' | '_top';
    readonly title?: string;
    readonly typeOf?: string;
}
export declare type CTAProps = CTACommonProps & (CTAButtonProps | CTALinkProps);
export declare const CTA: React.ForwardRefExoticComponent<(CTACommonProps & CTAButtonProps & {
    children?: React.ReactNode;
} & React.RefAttributes<HTMLAnchorElement | HTMLButtonElement>) | (CTACommonProps & CTALinkProps & {
    children?: React.ReactNode;
} & React.RefAttributes<HTMLAnchorElement | HTMLButtonElement>)>;
export {};
