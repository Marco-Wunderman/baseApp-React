"use strict";
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];
    result["default"] = mod;
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
const React = __importStar(require("react"));
const button_1 = require("../button");
const checkbox_1 = require("../checkbox");
const container_1 = require("../container");
const demo_container_1 = require("../demo/demo-container");
const demo_root_1 = require("../demo/demo-root");
const demo_theme_provider_with_toggle_1 = require("../demo/demo-theme-provider-with-toggle");
const hoc_1 = require("../hoc");
const layer_wrapper_1 = require("../layer-wrapper");
const shim_layer_1 = require("../shim-layer");
const text_1 = require("../text");
const demo_data_1 = require("./demo-data");
const index_1 = require("./index");
const ContentLayerWithFocusLock = hoc_1.withFocusLock(index_1.ContentLayer);
class ContentLayerDemo extends React.Component {
    constructor() {
        super(...arguments);
        this.state = {
            withOverflowingContent: true,
            layerIsVisible: false
        };
        this.toggleVisibility = () => {
            this.setState(state => ({
                layerIsVisible: !state.layerIsVisible
            }));
        };
        this.toggleContent = (_event, props) => {
            this.setState({
                withOverflowingContent: !props.checked
            });
        };
    }
    render() {
        const layerContent = this.state.withOverflowingContent
            ? demo_data_1.demoData.long
            : demo_data_1.demoData.short;
        const { layerIsVisible } = this.state;
        return (React.createElement(demo_root_1.DemoRoot, { showGridOverlayToggle: true },
            React.createElement(demo_theme_provider_with_toggle_1.DemoThemeProviderWithToggle, null,
                React.createElement(demo_container_1.DemoContainer, null,
                    React.createElement(container_1.Container, { gutter: container_1.ContainerGutter.dynamic0100, padding: container_1.ContainerPadding.grid001, wrap: container_1.ContainerWrap.always },
                        React.createElement(text_1.Text, { appearance: text_1.TextAppearance.headline0350 }, "Select your content layer options"),
                        React.createElement(checkbox_1.Checkbox, { value: "long-text", checked: this.state.withOverflowingContent, onChange: this.toggleContent, label: "with overflowing text" }),
                        React.createElement(button_1.Button, { onClick: this.toggleVisibility }, "Open Content Layer")),
                    React.createElement(container_1.Container, { gutter: container_1.ContainerGutter.static100, padding: container_1.ContainerPadding.grid001, wrap: container_1.ContainerWrap.always },
                        React.createElement(text_1.Text, { appearance: text_1.TextAppearance.headline0350 }, "This is some dummy page content"),
                        React.createElement(text_1.Text, null, demo_data_1.demoData.long)),
                    React.createElement(layer_wrapper_1.LayerWrapper, null, layerIsVisible
                        ? [
                            React.createElement(shim_layer_1.ShimLayer, { key: "shim", onClick: this.toggleVisibility }),
                            React.createElement(ContentLayerWithFocusLock, { key: "content-layer", active: layerIsVisible, ariaLabelledBy: "headline-id", onEscKeyUp: this.toggleVisibility },
                                React.createElement(container_1.Container, { gutter: container_1.ContainerGutter.dynamic0100, padding: container_1.ContainerPadding.grid001, wrap: container_1.ContainerWrap.always },
                                    React.createElement("div", { id: "headline-id" },
                                        React.createElement(text_1.Text, { bold: true, appearance: text_1.TextAppearance.headline0300 }, "Content layer demo")),
                                    React.createElement(button_1.Button, { onClick: this.toggleVisibility }, "Close Content Layer"),
                                    React.createElement(container_1.Container, { gutter: container_1.ContainerGutter.dynamic0200 }, layerContent
                                        .split('\n\n')
                                        .map((paragraph, index) => (React.createElement(text_1.Text, { key: `paragraph-${index}` }, paragraph)))),
                                    React.createElement(button_1.Button, { onClick: this.toggleVisibility }, "Close Content Layer")))
                        ]
                        : undefined)))));
    }
}
exports.default = ContentLayerDemo;
