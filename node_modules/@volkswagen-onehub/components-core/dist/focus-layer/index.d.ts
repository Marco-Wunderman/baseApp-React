import * as React from 'react';
import { ThemeDefinition } from '../theme-provider';
/**
 * Possible layer size variations
 */
export declare enum FocusLayerSize {
    /** small layer */
    A = "A",
    /** big layer */
    B = "B"
}
export interface FocusLayerProps {
    /**
     * Indicates whether the layer instance is the currently active layer
     */
    readonly active: boolean;
    /**
     * Defines the width of the layer
     */
    readonly size: FocusLayerSize;
    /**
     * This is provided by the react-transition-group. No need to use it when instantiating the component.
     * Note: If you write a wrapper for this component, take care to pass these props through to ensure that the
     * animations still work
     */
    readonly in?: boolean;
    /**
     * Reference for the element that will be able to scroll. This is needed for body-scroll-lock.
     */
    readonly scrollElementRef?: React.RefObject<HTMLDivElement> | ((el: HTMLDivElement) => void);
    /**
     * Localized label for this component. For proper accessibility, this prop *must* be set to a non-empty value.
     */
    readonly ariaLabel?: string;
    /**
     * The id of the element used to title the dialog.
     */
    readonly ariaDescribedBy?: string;
    /**
     * The id of the element used to title the dialog.
     */
    readonly ariaLabelledBy?: string;
    /**
     * This is provided by the react-transition-group. No need to use it when instantiating the component.
     * Note: If you write a wrapper for this component, take care to pass these props through to ensure that the
     * animations still work
     */
    onExited?(): void;
}
export interface FocusLayerPropsWithAnimation extends FocusLayerProps {
    readonly theme: ThemeDefinition;
    readonly in?: boolean;
    onExited?(): void;
}
export declare const FocusLayer: React.ForwardRefExoticComponent<Pick<React.PropsWithChildren<FocusLayerPropsWithAnimation>, "size" | "active" | "children" | "in" | "onExited" | "ariaLabel" | "ariaDescribedBy" | "ariaLabelledBy" | "scrollElementRef"> & {
    theme?: any;
}>;
