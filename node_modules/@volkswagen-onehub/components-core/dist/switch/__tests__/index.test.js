"use strict";
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];
    result["default"] = mod;
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
const enzyme_1 = require("enzyme");
require("jest-styled-components");
const React = __importStar(require("react"));
const index_1 = require("../index");
describe('Switch', () => {
    const checkboxSelector = '[type="checkbox"]';
    describe('checked prop', () => {
        it('sets checkbox to checked when checked=true', () => {
            // given
            const checked = true;
            // when
            const wrapper = enzyme_1.shallow(React.createElement(index_1.Switch, { checked: checked }));
            // then
            expect(wrapper.find(checkboxSelector).props().checked).toBeTruthy();
        });
        it('does not set checkbox to checked when checked=false', () => {
            // given
            const checked = false;
            // when
            const wrapper = enzyme_1.shallow(React.createElement(index_1.Switch, { checked: checked }));
            // then
            expect(wrapper.find(checkboxSelector).props().checked).toBeFalsy();
        });
    });
    describe('defaultChecked prop', () => {
        it('sets checkbox to defaultChecked when defaultChecked=true', () => {
            // given
            const defaultChecked = true;
            // when
            const wrapper = enzyme_1.shallow(React.createElement(index_1.Switch, { defaultChecked: defaultChecked }));
            // then
            expect(wrapper.find(checkboxSelector).props().defaultChecked).toBeTruthy();
        });
        it('does not set checkbox to defaultChecked when defaultChecked=false', () => {
            // given
            const defaultChecked = false;
            // when
            const wrapper = enzyme_1.shallow(React.createElement(index_1.Switch, { defaultChecked: defaultChecked }));
            // then
            expect(wrapper.find(checkboxSelector).props().defaultChecked).toBeFalsy();
        });
    });
    describe('disabled prop', () => {
        it('sets checkbox to disabled when disabled=true', () => {
            // given
            const disabled = true;
            // when
            const wrapper = enzyme_1.shallow(React.createElement(index_1.Switch, { disabled: disabled }));
            // then
            expect(wrapper.find(checkboxSelector).props().disabled).toBeTruthy();
        });
        it('does not set checkbox to disabled when disabled=false', () => {
            // given
            const disabled = false;
            // when
            const wrapper = enzyme_1.shallow(React.createElement(index_1.Switch, { disabled: disabled }));
            // then
            expect(wrapper.find(checkboxSelector).props().disabled).toBeFalsy();
        });
    });
    describe('onChange prop', () => {
        test.each([[true], [false]])('calls given onChange function when checkbox is clicked (checked=%s)', checked => {
            // given
            const onChangeFn = jest.fn();
            // when
            const wrapper = enzyme_1.shallow(React.createElement(index_1.Switch, { checked: checked, onChange: onChangeFn }));
            wrapper
                .find(checkboxSelector)
                .simulate('change', { target: { checked: !checked } });
            // then
            expect(onChangeFn).toHaveBeenCalledTimes(1);
        });
        test.each([[true], [false]])('calls given onChange function when checkbox is clicked (defaultChecked=%s)', defaultChecked => {
            // given
            const onChangeFn = jest.fn();
            // when
            const wrapper = enzyme_1.shallow(React.createElement(index_1.Switch, { defaultChecked: defaultChecked, onChange: onChangeFn }));
            wrapper
                .find(checkboxSelector)
                .simulate('change', { target: { checked: !defaultChecked } });
            // then
            expect(onChangeFn).toHaveBeenCalledTimes(1);
        });
        it('calls given onChange function when checkbox is clicked (without checked & defaultChecked prop)', () => {
            // given
            const onChangeFn = jest.fn();
            // when
            const wrapper = enzyme_1.shallow(React.createElement(index_1.Switch, { onChange: onChangeFn }));
            wrapper
                .find(checkboxSelector)
                .simulate('change', { target: { checked: undefined } });
            // then
            expect(onChangeFn).toHaveBeenCalledTimes(1);
        });
    });
});
