"use strict";
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];
    result["default"] = mod;
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
const React = __importStar(require("react"));
const theme_provider_1 = require("../theme-provider");
const text_1 = require("../text");
const StyledDescription = theme_provider_1.styled.span.withConfig({ displayName: "StyledDescription", componentId: "sc-16m87bh" }) `
	color: ${props => props.disabled
    ? props.theme.interaction.recipe450.disabled
    : props.theme.interaction.recipe450.default};
`;
const StyledIndicator = theme_provider_1.styled.span.withConfig({ displayName: "StyledIndicator", componentId: "sc-mr2f0v" }) `
	position: relative;
	display: block;
	width: ${props => props.theme.size.static530};
	height: ${props => props.theme.size.static350};
	background-color: ${props => props.theme.interaction.recipe750.default};
	transition: 0.4s;
	border-radius: ${props => props.theme.size.static350};
	border: ${props => parseInt(props.theme.size.static100) / 2}px solid
		${props => props.disabled
    ? props.theme.interaction.recipe450.disabled
    : props.theme.interaction.recipe450.default};

	&::before {
		content: '';
		position: absolute;
		top: 50%;
		/* Left should always have the same value as the border */
		left: -${props => parseInt(props.theme.size.static100) / 2}px;
		transform: translateY(-50%)
			translateX(${props => props.theme.size.static100}) scale(0.75);
		height: ${props => props.theme.size.static250};
		width: ${props => props.theme.size.static250};
		background-color: ${props => props.disabled
    ? props.theme.interaction.recipe450.disabled
    : props.theme.interaction.recipe450.default};
		transition: 0.4s;
		border-radius: 50%;
	}
`;
const StyledInput = theme_provider_1.styled.input.withConfig({ displayName: "StyledInput", componentId: "sc-d4l317" }) `
	position: absolute;
	opacity: 0;
	outline: 0;
	user-select: none;
	pointer-events: none;

	&:focus {
		~ ${StyledDescription} {
			color: ${props => props.theme.interaction.recipe450.active};
		}

		~ ${StyledIndicator} {
			border-color: ${props => props.theme.interaction.recipe450.active};

			&::before {
				background-color: ${props => props.theme.interaction.recipe450.active};
			}
		}
	}

	&:checked {
		~ ${StyledDescription} {
			color: ${props => props.disabled
    ? props.theme.interaction.recipe450.disabled
    : props.theme.interaction.recipe450.checked};
		}

		~ ${StyledIndicator} {
			background-color: ${props => props.disabled
    ? props.theme.interaction.recipe450.disabled
    : props.theme.interaction.recipe450.default};

			&::before {
				background-color: ${props => props.theme.interaction.recipe750.default};
				/*
					Move indicator by the width of the wrapping element,
					move the indicator by its own width and also move it back by the size of
					the border of the wrapping element.
				*/
				transform: translateY(-50%)
					translateX(${props => props.theme.size.static530}) translateX(-100%)
					translateX(-${props => props.theme.size.static100});
			}
		}

		&:focus {
			~ ${StyledIndicator} {
				background-color: ${props => props.theme.interaction.recipe450.active};

				&::before {
					background-color: ${props => props.theme.interaction.recipe750.active};
				}
			}
		}
	}
`;
const StyledLabel = theme_provider_1.styled.label.withConfig({ displayName: "StyledLabel", componentId: "sc-ag1uan" }) `
	display: inline-grid;
	grid-column-gap: ${props => props.theme.size.static200};
	grid-template-columns: max-content auto;
	align-items: center;
	cursor: ${props => (props.disabled ? 'not-allowed' : 'pointer')};

	${props => !props.disabled &&
    theme_provider_1.css `
			&:hover {
				${StyledDescription} {
					color: ${props.theme.interaction.recipe450.hover};
				}

				${StyledIndicator} {
					background-color: ${props.theme.interaction.recipe750.hover};
					border-color: ${props.theme.interaction.recipe450.hover};
					&::before {
						background-color: ${props.theme.interaction.recipe450.hover};
					}
				}

				${StyledInput}:checked {
					~ ${StyledIndicator} {
						background-color: ${props.theme.interaction.recipe450.hover};
						&::before {
							background-color: ${props.theme.interaction.recipe750.hover};
						}
					}
				}
			}
		`}
`;
exports.Switch = props => {
    const { checked, children, defaultChecked, onChange, disabled } = props;
    return (React.createElement(StyledLabel, { disabled: disabled },
        React.createElement(StyledInput, { type: 'checkbox', checked: checked, defaultChecked: defaultChecked, onChange: onChange, disabled: disabled }),
        React.createElement(StyledIndicator, { disabled: disabled }),
        children && (React.createElement(StyledDescription, { disabled: disabled }, typeof children === 'string' ? (React.createElement(text_1.Text, { tag: text_1.TextTag.span, color: text_1.TextColor.inherit }, children)) : (children)))));
};
