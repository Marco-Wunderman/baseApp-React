"use strict";
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];
    result["default"] = mod;
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
const React = __importStar(require("react"));
const button_1 = require("../button");
const checkbox_1 = require("../checkbox");
const container_1 = require("../container");
const demo_container_1 = require("../demo/demo-container");
const demo_root_1 = require("../demo/demo-root");
const demo_theme_provider_with_toggle_1 = require("../demo/demo-theme-provider-with-toggle");
const helpers_1 = require("../helpers");
const hoc_1 = require("../hoc");
const layer_wrapper_1 = require("../layer-wrapper");
const shim_layer_1 = require("../shim-layer");
const text_1 = require("../text");
const demo_data_1 = require("./demo-data");
const index_1 = require("./index");
/**
 * `AlertLayer` with additional `FocusLock` and keyboard ESC key handling
 */
const AlertLayerWithFocusLock = hoc_1.withFocusLock(index_1.AlertLayer);
const headline = 'AlertLayer with FocusLock';
class AlertLayerDemo extends React.Component {
    constructor() {
        super(...arguments);
        this.state = {
            withOverflowingContent: false,
            layerIsVisible: false
        };
        this.toggleVisibility = () => {
            const { layerIsVisible } = this.state;
            this.setState({
                layerIsVisible: !layerIsVisible
            });
        };
        this.toggleVisibilityEsc = () => {
            const { layerIsVisible } = this.state;
            if (layerIsVisible) {
                this.setState({
                    layerIsVisible: !layerIsVisible
                });
            }
        };
        this.toggleContent = (_event, props) => {
            this.setState({
                withOverflowingContent: !props.checked
            });
        };
        this.renderOkButton = () => (React.createElement(button_1.Button, { onClick: this.toggleVisibility, appearance: button_1.ButtonAppearance.Primary, stretchContent: true }, "Ok"));
        this.renderCloseButton = () => (React.createElement(button_1.Button, { onClick: this.toggleVisibility, appearance: button_1.ButtonAppearance.Secondary, stretchContent: true }, "Close"));
        this.renderLayer = () => {
            const key = 'alert-layer';
            const id = `${key}_copy_id`;
            const layerComponent = (React.createElement(AlertLayerWithFocusLock, { key: key, active: true, onEscKeyUp: this.toggleVisibilityEsc, role: "alertdialog", ariaLabel: headline, ariaDescribedBy: id }, this.renderLayerContent(id)));
            const shimComponent = (React.createElement(shim_layer_1.ShimLayer, { key: "shim", onClick: this.toggleVisibility }));
            return [shimComponent, layerComponent];
        };
    }
    renderCopy(id, copy) {
        return (React.createElement("div", { id: id },
            React.createElement(text_1.Text, { appearance: text_1.TextAppearance.copy0200 }, copy)));
    }
    renderLayerContent(id) {
        const layerContent = this.state.withOverflowingContent
            ? demo_data_1.demoData.long
            : demo_data_1.demoData.short;
        return (React.createElement(container_1.Container, { gutter: container_1.ContainerGutter.static400, horizontalAlign: container_1.ContainerHorizontalAlignment.center, padding: container_1.ContainerPadding.static450, verticalAlign: container_1.ContainerVerticalAlignment.center, wrap: container_1.ContainerWrap.always, stretchContent: true },
            React.createElement(container_1.Container, { gutter: container_1.ContainerGutter.static100, wrap: container_1.ContainerWrap.always },
                React.createElement(text_1.Text, { bold: true, appearance: text_1.TextAppearance.headline0400, tag: text_1.TextTag.h2 }, headline),
                React.createElement(text_1.Text, { appearance: text_1.TextAppearance.copy0200 }, this.renderCopy(id, layerContent))),
            React.createElement(container_1.Container, { gutter: container_1.ContainerGutter.static300, wrap: container_1.ContainerWrap.always },
                this.renderOkButton(),
                this.renderCloseButton())));
    }
    render() {
        return (React.createElement(demo_root_1.DemoRoot, { showGridOverlayToggle: true },
            React.createElement(demo_theme_provider_with_toggle_1.DemoThemeProviderWithToggle, null,
                React.createElement(demo_container_1.DemoContainer, null,
                    React.createElement(container_1.Container, { gutter: {
                            [helpers_1.Breakpoints.default]: container_1.ContainerGutter.static300,
                            [helpers_1.Breakpoints.b560]: container_1.ContainerGutter.static350,
                            [helpers_1.Breakpoints.b1600]: container_1.ContainerGutter.static370
                        }, padding: container_1.ContainerPadding.grid001, wrap: container_1.ContainerWrap.always },
                        React.createElement(button_1.Button, { onClick: this.toggleVisibility, appearance: button_1.ButtonAppearance.Primary }, "Open Alert Layer"),
                        React.createElement(checkbox_1.Checkbox, { value: "long-text", checked: this.state.withOverflowingContent, onChange: this.toggleContent, label: "with overflowing text" })),
                    React.createElement(layer_wrapper_1.LayerWrapper, { contentCentered: true }, this.state.layerIsVisible ? this.renderLayer() : undefined)))));
    }
}
exports.default = AlertLayerDemo;
