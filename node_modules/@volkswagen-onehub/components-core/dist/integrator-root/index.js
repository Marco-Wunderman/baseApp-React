"use strict";
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];
    result["default"] = mod;
    return result;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const styled_components_injectglobal_polyfill_1 = require("@volkswagen-onehub/styled-components-injectglobal-polyfill");
const React = __importStar(require("react"));
const styled_normalize_1 = require("styled-normalize");
const vh_check_1 = __importDefault(require("vh-check"));
const theme_provider_1 = require("../theme-provider");
const GlobalStyle = styled_components_injectglobal_polyfill_1.createGlobalStyle `
	${
// eslint-disable-next-line @typescript-eslint/no-explicit-any
styled_normalize_1.normalize};

	b, strong {
		font-weight: bold;
	}
`;
const helpers_1 = require("../helpers");
const get_media_query_vars_1 = require("../theme-provider/get-media-query-vars");
// Please do not import this const. It is meant to be used internally only.
exports._fontFamilyStyles = theme_provider_1.css `
	--font-family-head: vw-head, Helvetica, Arial, sans-serif;
	--font-family-text: vw-text, Helvetica, Arial, sans-serif;

	:lang(ko),
	:lang(zh),
	:lang(tw),
	:lang(ja) {
		font-style: normal;
	}

	:lang(ko) {
		--font-family-head: vw-head, Apple SD Gothic Neo, BonGothic, 맑은 고딕,
			Malgun Gothic, 굴림, Gulim, 돋움, Dotum, Helvetica Neue, Helvetica, Arial,
			sans-serif;
		--font-family-text: vw-text, Apple SD Gothic Neo, BonGothic, 맑은 고딕,
			Malgun Gothic, 굴림, Gulim, 돋움, Dotum, Helvetica Neue, Helvetica, Arial,
			sans-serif;
		word-break: keep-all;
		hyphens: auto; /* Needed for breaking long URLs */
	}

	:lang(zh) {
		--font-family-head: vw-head, 华文细黑, STXihei, PingFang TC, 微软雅黑体,
			Microsoft YaHei New, 微软雅黑, Microsoft Yahei, 宋体, SimSun,
			Helvetica Neue, Helvetica, Arial, sans-serif;
		--font-family-text: vw-text, 华文细黑, STXihei, PingFang TC, 微软雅黑体,
			Microsoft YaHei New, 微软雅黑, Microsoft Yahei, 宋体, SimSun,
			Helvetica Neue, Helvetica, Arial, sans-serif;
	}

	:lang(tw) {
		--font-family-head: vw-head, Helvetica Neue, Helvetica, Arial, sans-serif;
		--font-family-text: vw-text, Helvetica Neue, Helvetica, Arial, sans-serif;
	}

	:lang(ja) {
		--font-family-head: vw-head, ヒラギノ角ゴ Pro W3,
			Hiragino Kaku Gothic Pro, Osaka, メイリオ, Meiryo, MS Pゴシック,
			MS PGothic, Helvetica Neue, Helvetica, Arial, sans-serif;
		--font-family-text: vw-text, ヒラギノ角ゴ Pro W3,
			Hiragino Kaku Gothic Pro, Osaka, メイリオ, Meiryo, MS Pゴシック,
			MS PGothic, Helvetica Neue, Helvetica, Arial, sans-serif;
	}

	font-family: var(--font-family-text);
`;
exports.StyledIntegratorRoot = theme_provider_1.styled.div.withConfig({ displayName: "StyledIntegratorRoot", componentId: "sc-7fx0kf" }) `
	${exports._fontFamilyStyles}

	-webkit-font-smoothing: antialiased;
	-moz-osx-font-smoothing: grayscale;
	* {
		box-sizing: border-box;
	}
	${get_media_query_vars_1.getMediaQueryVars()};
`;
const BROWSER_ADDRESS_BAR_CSS_VAR_NAME = 'vwa-components-core-browser-address-bar';
/**
 * On mobile browsers address bar isn't taken into account when using `vh` units. This isn't always desired so this method provides computed value that you can use to calculate proper height.
 *
 * For desktop browsers address bar height is 0px.
 *
 * Example:
 * ```
 * main {
 *   height: 100vh; // falback
 *   height: calc(100vh - ${getBrowserBarHeightValue()});
 * }
 * ```
 */
function getBrowserBarHeightValue() {
    return `var(--${BROWSER_ADDRESS_BAR_CSS_VAR_NAME}, 0px)`;
}
exports.getBrowserBarHeightValue = getBrowserBarHeightValue;
function updateCssVar(cssVarName, value) {
    document.documentElement.style.setProperty(`--${cssVarName}`, `${value}px`);
}
class IntegratorRoot extends React.Component {
    constructor() {
        super(...arguments);
        this.updateVh = () => {
            if (this.vhCheckResult) {
                const result = this.vhCheckResult.recompute();
                updateCssVar(BROWSER_ADDRESS_BAR_CSS_VAR_NAME, result.value);
            }
        };
        this.tryUpdateVh = () => {
            if (helpers_1.isMobileBrowser()) {
                this.timeout = window.setTimeout(() => {
                    // on iPhone window height isn't calculated properly at the first try
                    if (window.innerHeight > window.screen.height) {
                        this.tryUpdateVh();
                    }
                    else {
                        window.requestAnimationFrame(this.updateVh);
                    }
                }, 50);
            }
        };
    }
    componentDidMount() {
        this.vhCheckResult = vh_check_1.default(BROWSER_ADDRESS_BAR_CSS_VAR_NAME);
        this.tryUpdateVh();
    }
    componentDidUpdate() {
        this.tryUpdateVh();
    }
    componentWillUnmount() {
        // remove all listeners that are registered by vh-check
        if (this.vhCheckResult) {
            this.vhCheckResult.unbind();
        }
        if (this.timeout) {
            window.clearTimeout(this.timeout);
            this.timeout = undefined;
        }
    }
    render() {
        const { language } = this.props;
        return (React.createElement(exports.StyledIntegratorRoot, { lang: language },
            React.createElement(GlobalStyle, null),
            this.props.children));
    }
}
exports.IntegratorRoot = IntegratorRoot;
