"use strict";
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];
    result["default"] = mod;
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
const React = __importStar(require("react"));
const theme_provider_1 = require("../../theme-provider");
const utils_1 = require("../utils");
const icons_core_1 = require("@volkswagen-onehub/icons-core");
const helpers_1 = require("../../helpers");
const StyledClearButton = theme_provider_1.styled.button.withConfig({ displayName: "StyledClearButton", componentId: "sc-1o29182" }) `
	background: transparent;
	padding: 0;
	border: none;
	line-height: 0;
	cursor: pointer;
	color: ${utils_1.getLabelIconColor};
	border-bottom: 1px solid transparent;
	pointer-events: initial;
	:hover {
		color: ${props => props.theme.interaction.recipe400.hover};
	}
	:focus {
		color: ${props => props.theme.interaction.recipe400.hover};
		${props => helpers_1.createA11yOutlineStyles(props)}
	}
`;
const StyledClearButtonWrapper = theme_provider_1.styled.div.withConfig({ displayName: "StyledClearButtonWrapper", componentId: "sc-1guav8u" }) `
	position: absolute;
	right: 0;
	left: 0;
	/* text-input margin + text-input padding + CharacterCounter line-height */
	bottom: ${props => {
    const textInputSpacings = parseInt(props.theme.size.static150) +
        parseInt(props.theme.size.static100);
    if (props.maxLength) {
        return `calc(${textInputSpacings}px + ${props.theme.textAppearances.copy100.lineHeight})`;
    }
    return `${textInputSpacings}px`;
}};
	pointer-events: none;
	display: flex;
	flex-direction: row-reverse;
`;
exports.TextFieldCleanWrapper = props => {
    const { appearance, children, onClear, clearIconLabel, hasClearButton, isClearButtonVisible, maxLength } = props;
    return (React.createElement(React.Fragment, null,
        children,
        hasClearButton && isClearButtonVisible && (React.createElement(StyledClearButtonWrapper, { maxLength: maxLength },
            React.createElement(StyledClearButton, { appearance: appearance, "aria-label": clearIconLabel, title: clearIconLabel, onClick: onClear, type: "button" },
                React.createElement(icons_core_1.Close, { variant: "default" }))))));
};
exports.TextFieldCleanWrapper.displayName = 'TextFieldCleanWrapper';
