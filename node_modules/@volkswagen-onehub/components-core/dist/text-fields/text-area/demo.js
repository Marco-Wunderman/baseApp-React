"use strict";
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];
    result["default"] = mod;
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
const React = __importStar(require("react"));
const demo_container_1 = require("../../demo/demo-container");
const demo_root_1 = require("../../demo/demo-root");
const demo_theme_provider_with_toggle_1 = require("../../demo/demo-theme-provider-with-toggle");
const shared_1 = require("../shared");
const index_1 = require("./index");
const handleChange = (event) => {
    console.log('onChange', event.currentTarget.value);
};
const handleBlur = (event) => {
    console.log('onBlur', event.currentTarget.value);
};
const handleFocus = (event) => {
    console.log('onFocus', event.currentTarget.value);
};
class TextAreaWithErrors extends React.Component {
    constructor(props) {
        super(props);
        this.verifyInput = (e) => {
            const { value } = e.currentTarget;
            if (value.length > this.state.maxLength) {
                this.setState({ invalid: true });
            }
            else {
                this.setState({ invalid: false });
            }
            this.setState({ value });
        };
        this.state = {
            maxLength: 10,
            invalid: false,
            value: undefined
        };
    }
    render() {
        return (React.createElement(index_1.TextArea, { appearance: this.state.invalid
                ? shared_1.TextAreaAppearance.Error
                : shared_1.TextAreaAppearance.Default, label: "Please tell us your opinion", onChange: this.verifyInput, errorText: "Text is too long", maxLength: this.state.maxLength, value: this.state.value }));
    }
}
const test = () => (React.createElement(demo_root_1.DemoRoot, null,
    React.createElement("h2", null, "Text Area"),
    React.createElement(demo_theme_provider_with_toggle_1.DemoThemeProviderWithToggle, null,
        React.createElement("h4", null, "default style"),
        React.createElement(demo_container_1.DemoContainer, null,
            React.createElement(index_1.TextArea, { appearance: shared_1.TextAreaAppearance.Default, label: "Please tell us your opinion", placeholder: "Please tell us your opinion", onChange: handleChange })),
        React.createElement("h4", null, "Floating Label"),
        React.createElement(demo_container_1.DemoContainer, null,
            React.createElement(index_1.TextArea, { appearance: shared_1.TextAreaAppearance.Default, label: "Please tell us your opinion", isFloating: true, minLength: 4, onChange: handleChange })),
        React.createElement("h4", null, "directly controlled component"),
        React.createElement(demo_container_1.DemoContainer, null,
            React.createElement(index_1.TextArea, { appearance: shared_1.TextAreaAppearance.Default, label: "Please tell us your opinion", onChange: handleChange, value: "Lorem ipsum dolor sit amet, consetetur sadipscing elitr, sed diam nonumy eirmod tempor invidunt ut labore et dolore magna aliquyam erat, sed diam voluptua. At v" })),
        React.createElement("h4", null, "invalid style"),
        React.createElement(demo_container_1.DemoContainer, null,
            React.createElement(TextAreaWithErrors, null)),
        React.createElement("h4", null, "disabled style"),
        React.createElement(demo_container_1.DemoContainer, null,
            React.createElement(index_1.TextArea, { appearance: shared_1.TextAreaAppearance.Disabled, label: "Please tell us your opinion", onChange: handleChange })),
        React.createElement("h4", null, "disabled style with floating label"),
        React.createElement(demo_container_1.DemoContainer, null,
            React.createElement(index_1.TextArea, { appearance: shared_1.TextAreaAppearance.Disabled, label: "Please tell us your opinion", onChange: handleChange, isFloating: true })),
        React.createElement("h4", null, "readonly style"),
        React.createElement(demo_container_1.DemoContainer, null,
            React.createElement(index_1.TextArea, { appearance: shared_1.TextAreaAppearance.ReadOnly, label: "Please tell us your opinion", onChange: handleChange, value: "Lorem ipsum dolor sit amet, consetetur sadipscing elitr, sed diam nonumy eirmod tempor invidunt ut labore et dolore magna aliquyam erat, sed diam voluptua. At v" })),
        React.createElement("h4", null, "required style"),
        React.createElement(demo_container_1.DemoContainer, null,
            React.createElement(index_1.TextArea, { appearance: shared_1.TextAreaAppearance.Default, label: "Please tell us your opinion", onChange: handleChange, placeholder: "Please tell us your opinion", value: "Lorem ipsum dolor sit amet, consetetur sadipscing elitr, sed diam nonumy eirmod tempor invidunt ut labore et dolore magna aliquyam erat, sed diam voluptua. At ve", required: true })),
        React.createElement("h4", null, "with character counter"),
        React.createElement(demo_container_1.DemoContainer, null,
            React.createElement(index_1.TextArea, { appearance: shared_1.TextAreaAppearance.Default, label: "Please tell us your opinion", onChange: handleChange, value: "Lorem ipsum dolor sit amet, consetetur sadipscing elitr, sed diam nonumy eirmod tempor invidunt ut labore et dolore magna aliquyam erat, sed diam voluptua. At v", maxLength: 16, rows: 2 })),
        React.createElement("h4", null, "with unmatching character counter"),
        React.createElement(demo_container_1.DemoContainer, null,
            React.createElement(index_1.TextArea, { appearance: shared_1.TextAreaAppearance.Default, label: "Please tell us your opinion", onChange: handleChange, value: "\u3042\uFF69\u3079\u9F49\u81C6\u9020\u6C49\u5B57\uD83D\uDC36\uD83D\uDE45\u200D\u2642\uFE0F", maxLength: 10 })),
        React.createElement("h4", null, "with multiple rows"),
        React.createElement(demo_container_1.DemoContainer, null,
            React.createElement(index_1.TextArea, { appearance: shared_1.TextAreaAppearance.Default, label: "Please tell us your opinion", onChange: handleChange, value: "Lorem ipsum dolor sit amet, consetetur sadipscing elitr, sed diam nonumy eirmod tempor invidunt ut labore et dolore magna aliquyam erat, sed diam voluptua. At v\n\t\t\t\t\tLorem ipsum dolor sit amet, consetetur sadipscing elitr, sed diam nonumy eirmod tempor invidunt ut labore et dolore magna aliquyam erat, sed diam voluptua. At v\n\t\t\t\t\tLorem ipsum dolor sit amet, consetetur sadipscing elitr, sed diam nonumy eirmod tempor invidunt ut labore et dolore magna aliquyam erat, sed diam voluptua. At v\n\t\t\t\t\tLorem ipsum dolor sit amet, consetetur sadipscing elitr, sed diam nonumy eirmod tempor invidunt ut labore et dolore magna aliquyam erat, sed diam voluptua. At v\n\t\t\t\t\tLorem ipsum dolor sit amet, consetetur sadipscing elitr, sed diam nonumy eirmod tempor invidunt ut labore et dolore magna aliquyam erat, sed diam voluptua. At v", rows: 3 })),
        React.createElement("h4", null, "with onBlur handler"),
        React.createElement(demo_container_1.DemoContainer, null,
            React.createElement(index_1.TextArea, { appearance: shared_1.TextAreaAppearance.Default, label: "Please tell us your opinion", placeholder: "Please tell us your opinion", onChange: handleChange, onBlur: handleBlur })),
        React.createElement("h4", null, "with onFocus handler"),
        React.createElement(demo_container_1.DemoContainer, null,
            React.createElement(index_1.TextArea, { appearance: shared_1.TextAreaAppearance.Default, label: "Please tell us your opinion", placeholder: "Please tell us your opinion", onChange: handleChange, onFocus: handleFocus })))));
exports.default = test;
