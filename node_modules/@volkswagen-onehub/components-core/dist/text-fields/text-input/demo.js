"use strict";
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];
    result["default"] = mod;
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
const React = __importStar(require("react"));
const ReactDOM = __importStar(require("react-dom"));
const demo_container_1 = require("../../demo/demo-container");
const demo_root_1 = require("../../demo/demo-root");
const demo_theme_provider_with_toggle_1 = require("../../demo/demo-theme-provider-with-toggle");
const shared_1 = require("../shared");
const index_1 = require("./index");
const container_1 = require("../../container");
const infobox_1 = require("../../infobox");
const text_1 = require("../../text");
const theme_provider_1 = require("../../theme-provider");
const icons_core_1 = require("@volkswagen-onehub/icons-core");
const handleChange = (event) => {
    console.log('onChange', event.currentTarget.value);
};
const handleBlur = (event) => {
    console.log('onBlur', event.currentTarget.value);
};
const handleFocus = (event) => {
    console.log('onFocus', event.currentTarget.value);
};
class TextInputDemo extends React.PureComponent {
    constructor() {
        super(...arguments);
        this.state = {
            isClearButtonVisible: false
        };
    }
    renderSearchError() {
        return (React.createElement(container_1.Container, { padding: {
                top: container_1.ContainerPadding.static100,
                bottom: container_1.ContainerPadding.static100
            } },
            React.createElement(theme_provider_1.ThemeProvider, { theme: "inverted" },
                React.createElement(infobox_1.Infobox, { ariaLabel: "Notification", ariaLive: "polite" },
                    React.createElement(text_1.Text, { tag: text_1.TextTag.p }, 'There are no matches to your search')))));
    }
    render() {
        const textInputSearchRef = React.createRef();
        const { isClearButtonVisible } = this.state;
        const handleClear = () => {
            // We need to use findDOMNode to ensure that we also get the
            // element from the reference in styled-components version v3.x.x.
            // After discontinuing the support for styled-components v3 we can remove
            // the `findDOMNode` and directly access the reference again.
            // eslint-disable-next-line react/no-find-dom-node
            const target = ReactDOM.findDOMNode(textInputSearchRef.current);
            if (target) {
                target.value = '';
                this.setState({
                    isClearButtonVisible: false
                });
            }
        };
        const handleSeachChange = () => {
            // We need to use findDOMNode to ensure that we also get the
            // element from the reference in styled-components version v3.x.x.
            // After discontinuing the support for styled-components v3 we can remove
            // the `findDOMNode` and directly access the reference again.
            // eslint-disable-next-line react/no-find-dom-node
            const target = ReactDOM.findDOMNode(textInputSearchRef.current);
            this.setState({
                isClearButtonVisible: target && target.value !== '' ? true : false
            });
        };
        return (React.createElement(demo_root_1.DemoRoot, null,
            React.createElement("h2", null, "Text Input"),
            React.createElement(demo_theme_provider_with_toggle_1.DemoThemeProviderWithToggle, null,
                React.createElement("h4", null, "default style"),
                React.createElement(demo_container_1.DemoContainer, null,
                    React.createElement(index_1.TextInput, { appearance: shared_1.TextInputAppearance.Default, label: "Firstname", name: "firstname", onChange: handleChange })),
                React.createElement("h4", null, "with floating label"),
                React.createElement(demo_container_1.DemoContainer, null,
                    React.createElement(index_1.TextInput, { appearance: shared_1.TextInputAppearance.Default, label: "Firstname", name: "firstname", onChange: handleChange, onBlur: handleBlur, isFloating: true })),
                React.createElement("h4", null, "with default value"),
                React.createElement(demo_container_1.DemoContainer, null,
                    React.createElement(index_1.TextInput, { appearance: shared_1.TextInputAppearance.Default, label: "Username", defaultValue: "username" })),
                React.createElement("h4", null, "directly controlled component"),
                React.createElement(demo_container_1.DemoContainer, null,
                    React.createElement(index_1.TextInput, { appearance: shared_1.TextInputAppearance.Default, label: "Username", defaultValue: "username" })),
                React.createElement("h4", null, "required"),
                React.createElement(demo_container_1.DemoContainer, null,
                    React.createElement(index_1.TextInput, { appearance: shared_1.TextInputAppearance.Default, label: "Username", defaultValue: "username", required: true })),
                React.createElement("h4", null, "success style"),
                React.createElement(demo_container_1.DemoContainer, null,
                    React.createElement(index_1.TextInput, { appearance: shared_1.TextInputAppearance.Success, label: "Username", defaultValue: "Username" })),
                React.createElement("h4", null, "invalid and with error text"),
                React.createElement(demo_container_1.DemoContainer, null,
                    React.createElement(index_1.TextInput, { appearance: shared_1.TextInputAppearance.Error, label: "Username", defaultValue: "username", errorText: "Username does not exist" })),
                React.createElement("h4", null, "with infobox displaying error message"),
                React.createElement(demo_container_1.DemoContainer, null,
                    React.createElement(index_1.TextInput, { appearance: shared_1.TextInputAppearance.Search, label: "Search", defaultValue: "search", additionalFeedback: this.renderSearchError() })),
                React.createElement("h4", null, "disabled"),
                React.createElement(demo_container_1.DemoContainer, null,
                    React.createElement(index_1.TextInput, { appearance: shared_1.TextInputAppearance.Disabled, label: "Username" })),
                React.createElement("h4", null, "disabled with value"),
                React.createElement(demo_container_1.DemoContainer, null,
                    React.createElement(index_1.TextInput, { appearance: shared_1.TextInputAppearance.Disabled, label: "Username", defaultValue: "username" })),
                React.createElement("h4", null, "readonly mode"),
                React.createElement(demo_container_1.DemoContainer, null,
                    React.createElement(index_1.TextInput, { appearance: shared_1.TextInputAppearance.ReadOnly, label: "Username", defaultValue: "username" })),
                React.createElement("h4", null, "with placeholder"),
                React.createElement(demo_container_1.DemoContainer, null,
                    React.createElement(index_1.TextInput, { appearance: shared_1.TextInputAppearance.Default, label: "Username", placeholder: "placeholder" })),
                React.createElement("h4", null, "with onBlur handler"),
                React.createElement(demo_container_1.DemoContainer, null,
                    React.createElement(index_1.TextInput, { appearance: shared_1.TextInputAppearance.Default, label: "Firstname", name: "firstname", onBlur: handleBlur })),
                React.createElement("h4", null, "with onFocus handler"),
                React.createElement(demo_container_1.DemoContainer, null,
                    React.createElement(index_1.TextInput, { appearance: shared_1.TextInputAppearance.Default, label: "Firstname", name: "firstname", onFocus: handleFocus })),
                React.createElement("h4", null, "with maxLength defined"),
                React.createElement(demo_container_1.DemoContainer, null,
                    React.createElement(index_1.TextInput, { appearance: shared_1.TextInputAppearance.Default, label: "Firstname", name: "firstname", maxLength: 5 })),
                React.createElement("h4", null, "with autofocus"),
                React.createElement(demo_container_1.DemoContainer, null,
                    React.createElement(index_1.TextInput, { appearance: shared_1.TextInputAppearance.Default, label: "autofocus", name: "autofocus", autoFocus: true })),
                React.createElement("h4", null, "with a type (password)"),
                React.createElement(demo_container_1.DemoContainer, null,
                    React.createElement(index_1.TextInput, { appearance: shared_1.TextInputAppearance.Default, label: "Password", placeholder: "placeholder", type: "password" })),
                React.createElement("h4", null, "with a reference"),
                React.createElement(demo_container_1.DemoContainer, null,
                    React.createElement(index_1.TextInput, { appearance: shared_1.TextInputAppearance.Default, label: "Username", defaultValue: "username", ref: React.createRef() })),
                React.createElement("h4", null, "with icon and clear button"),
                React.createElement(demo_container_1.DemoContainer, null,
                    React.createElement(index_1.TextInput, { appearance: shared_1.TextInputAppearance.Search, label: "Search", name: "search", icon: React.createElement(icons_core_1.Magnifier, { variant: "default" }), hasClearButton: true, isClearButtonVisible: isClearButtonVisible, onClear: handleClear, onChange: handleSeachChange, clearIconLabel: "Clear search", ref: textInputSearchRef })),
                React.createElement("h4", null, "with icon and floating label"),
                React.createElement(demo_container_1.DemoContainer, null,
                    React.createElement(index_1.TextInput, { icon: React.createElement(icons_core_1.Magnifier, { variant: "default" }), appearance: shared_1.TextInputAppearance.Default, label: "Firstname", name: "firstname", onChange: handleChange, onBlur: handleBlur, isFloating: true })),
                React.createElement("h4", null, "with icon and floating label and maxLength"),
                React.createElement(demo_container_1.DemoContainer, null,
                    React.createElement(index_1.TextInput, { maxLength: 100, appearance: shared_1.TextInputAppearance.Search, label: "Search", name: "search", icon: React.createElement(icons_core_1.Magnifier, { variant: "default" }), hasClearButton: true, isClearButtonVisible: true, clearIconLabel: "Clear search" })))));
    }
}
exports.TextInputDemo = TextInputDemo;
exports.default = TextInputDemo;
