"use strict";
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];
    result["default"] = mod;
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
const React = __importStar(require("react"));
const button_1 = require("../button");
const checkbox_1 = require("../checkbox");
const container_1 = require("../container");
const demo_container_1 = require("../demo/demo-container");
const demo_root_1 = require("../demo/demo-root");
const demo_theme_provider_with_toggle_1 = require("../demo/demo-theme-provider-with-toggle");
const helpers_1 = require("../helpers");
const hoc_1 = require("../hoc");
const layer_wrapper_1 = require("../layer-wrapper");
const radio_button_1 = require("../radio-button");
const text_1 = require("../text");
const index_1 = require("./index");
const demo_data_1 = require("./demo-data");
const InteractionLayerWithFocusLock = hoc_1.withFocusLock(index_1.InteractionLayer);
class InteractionLayerDemo extends React.Component {
    constructor() {
        super(...arguments);
        this.state = {
            size: index_1.InteractionLayerSize.A,
            longContent: true,
            show: false,
            direction: 'ltr'
        };
        this.handleShow = (show) => {
            this.setState({
                show
            });
        };
        this.handleSizeChange = (_event, props) => {
            this.setState({
                size: props.value
            });
        };
        this.handleLongTextChange = (_event, props) => {
            this.setState({
                longContent: !props.checked
            });
        };
    }
    render() {
        const { longContent, show, size } = this.state;
        const content = longContent ? demo_data_1.data.long : demo_data_1.data.short;
        return (React.createElement(demo_root_1.DemoRoot, { showGridOverlayToggle: true },
            React.createElement(demo_theme_provider_with_toggle_1.DemoThemeProviderWithToggle, null,
                React.createElement(demo_theme_provider_with_toggle_1.DemoThemeProviderToggleContext.Consumer, null, value => (React.createElement(React.Fragment, null,
                    React.createElement("h2", null, "Interaction Layer"),
                    React.createElement("p", null, "Note: to make this area not clickable, use a shim component!"),
                    React.createElement("p", null, "Please note: the keys used in this demo cause a re-render of the button right when you change the text direction. You probably don't want to do that in your application."),
                    React.createElement(demo_container_1.DemoContainer, null,
                        React.createElement(text_1.Text, null, "Select the layer you want to open:"),
                        React.createElement(radio_button_1.RadioButton, { name: "size", value: "A", checked: size === 'A', onChange: this.handleSizeChange, label: "Size A" }),
                        React.createElement(radio_button_1.RadioButton, { name: "size", value: "B", checked: size === 'B', onChange: this.handleSizeChange, label: "Size B" }),
                        React.createElement(radio_button_1.RadioButton, { name: "size", value: "C", checked: size === 'C', onChange: this.handleSizeChange, label: "Size C" }),
                        React.createElement(radio_button_1.RadioButton, { name: "size", value: "D", checked: size === 'D', onChange: this.handleSizeChange, label: "Size D" }),
                        React.createElement(checkbox_1.Checkbox, { value: "long-text", checked: longContent, onChange: this.handleLongTextChange, label: "has long text" }),
                        React.createElement(button_1.Button, { onClick: () => this.handleShow(true) }, "Show Layer"),
                        demo_data_1.data.long.split('\n\n').map((paragraph, index) => (React.createElement(text_1.Text, { key: `background-paragraph-${index}` }, paragraph))),
                        React.createElement(layer_wrapper_1.LayerWrapper, null, show ? (React.createElement(InteractionLayerWithFocusLock, { key: `interaction-layer-${value.direction}`, size: size, active: true, onEscKeyUp: () => this.handleShow(false) },
                            React.createElement(container_1.Container, { gutter: {
                                    [helpers_1.Breakpoints.default]: container_1.ContainerGutter.static300,
                                    [helpers_1.Breakpoints.b560]: container_1.ContainerGutter.static350,
                                    [helpers_1.Breakpoints.b1600]: container_1.ContainerGutter.static370
                                }, padding: container_1.ContainerPadding.grid001, wrap: container_1.ContainerWrap.always },
                                React.createElement(button_1.Button, { key: "close-top", onClick: () => this.handleShow(false) }, "Close Top"),
                                content.split('\n\n').map((paragraph, index) => (React.createElement(text_1.Text, { key: `content-paragraph-${index}` }, paragraph))),
                                React.createElement(button_1.Button, { key: "close-bottom", onClick: () => this.handleShow(false) }, "Close Bottom")))) : (undefined)))))))));
    }
}
exports.default = InteractionLayerDemo;
