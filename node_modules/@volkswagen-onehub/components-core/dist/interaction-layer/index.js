"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];
    result["default"] = mod;
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
/* eslint-disable-next-line import/default */
const lodash_throttle_1 = __importDefault(require("lodash.throttle"));
const React = __importStar(require("react"));
const react_transition_group_1 = require("react-transition-group");
const styled_components_1 = require("styled-components");
const react_dom_1 = require("react-dom");
const helpers_1 = require("../helpers");
const theme_provider_1 = require("../theme-provider");
var InteractionLayerSize;
(function (InteractionLayerSize) {
    InteractionLayerSize["A"] = "A";
    InteractionLayerSize["B"] = "B";
    InteractionLayerSize["C"] = "C";
})(InteractionLayerSize = exports.InteractionLayerSize || (exports.InteractionLayerSize = {}));
const animationClassName = 'animation';
const LayerScrollContainer = theme_provider_1.styled.div.withConfig({ displayName: "LayerScrollContainer", componentId: "sc-1omkeja" }) `
	overflow-y: auto;
	-webkit-overflow-scrolling: touch;

	height: ${props => (props.windowHeight ? `${props.windowHeight}px` : '100%')};
`;
const StyledLayer = theme_provider_1.styled.div.withConfig({ displayName: "StyledLayer", componentId: "sc-1wno2sw" }) `
	background-color: ${props => props.theme.global.backgroundColor};

	position: fixed;
	top: 0;
	bottom: 0;
	${props => (props.direction === 'rtl' ? `left: 0;` : `right: 0;`)}

	box-shadow: ${props => {
    const themeShadowColor = props.theme.shadowColor || '#FFFFFF';
    const darkShadowColor = helpers_1.hexColorToRgba(themeShadowColor, 0.1);
    const lightShadowColor = helpers_1.hexColorToRgba(themeShadowColor, 0.05);
    return `0 8px 32px 0 ${darkShadowColor}, 0 16px 48px 0 ${lightShadowColor}`;
}};

	&.${animationClassName}-ltr-enter {
		transform: translateX(100%);
		right: 0;
	}
	&.${animationClassName}-ltr-enter-active {
		transform: translateX(0);
		right: 0;
		transition: ${props => {
    const duration = props.theme.animation.duration.layer;
    const timingFunction = props.theme.animation.timingFunction.in;
    return `transform ${duration} ${timingFunction}`;
}};
	}
	&.${animationClassName}-ltr-enter-done {
		right: 0;
	}
	&.${animationClassName}-ltr-exit {
		transform: translateX(0);
		right: 0;
	}
	&.${animationClassName}-ltr-exit-active {
		transform: translateX(100%);
		right: 0;
		transition: ${props => {
    const duration = props.theme.animation.duration.layer;
    const timingFunction = props.theme.animation.timingFunction.in;
    return `transform ${duration} ${timingFunction}`;
}};
	}

	&.${animationClassName}-rtl-enter {
		transform: translateX(-100%);
		left: 0;
	}
	&.${animationClassName}-rtl-enter-active {
		transform: translateX(0);
		left: 0;
		transition: ${props => {
    const duration = props.theme.animation.duration.layer;
    const timingFunction = props.theme.animation.timingFunction.in;
    return `transform ${duration} ${timingFunction}`;
}};
	}
	&.${animationClassName}-rtl-enter-done {
		left: 0;
	}
	&.${animationClassName}-rtl-exit {
		transform: translateX(0);
		left: 0;
	}
	&.${animationClassName}-rtl-exit-active {
		transform: translateX(-100%);
		left: 0;
		transition: ${props => {
    const duration = props.theme.animation.duration.layer;
    const timingFunction = props.theme.animation.timingFunction.in;
    return `transform ${duration} ${timingFunction}`;
}};
	}

	${props => theme_provider_1.css `${props.size === 'A' &&
    `width: ${helpers_1.getGridColumn(23)};

				@media (min-width: ${helpers_1.Breakpoints.b560}px) {
					width: ${helpers_1.getGridColumn(18)};
				}
				@media (min-width: ${helpers_1.Breakpoints.b960}px) {
					width: ${helpers_1.getGridColumn(12)};
				}
				@media (min-width: ${helpers_1.Breakpoints.b1280}px) {
					width: ${helpers_1.getGridColumn(8)};
				}
				@media (min-width: ${helpers_1.Breakpoints.b1600}px) {
					width: ${helpers_1.getGridColumn(6)};
				}
				@media (min-width: ${helpers_1.Breakpoints.b2560}px) {
					width: ${helpers_1.getColumnsWidthForBreakpoint(6, helpers_1.Breakpoints.b2560)};
				}
			`}
			${props.size === 'B' &&
    `width: ${helpers_1.getGridColumn(23)};

				@media (min-width: ${helpers_1.Breakpoints.b560}px) {
					width: ${helpers_1.getGridColumn(22)};
				}
				@media (min-width: ${helpers_1.Breakpoints.b960}px) {
					width: ${helpers_1.getGridColumn(20)};
				}
				@media (min-width: ${helpers_1.Breakpoints.b1600}px) {
					width: ${helpers_1.getGridColumn(19)};
				}
				@media (min-width: ${helpers_1.Breakpoints.b1920}px) {
					width: ${helpers_1.getGridColumn(18)};
				}
				@media (min-width: ${helpers_1.Breakpoints.b2560}px) {
					width: ${helpers_1.getColumnsWidthForBreakpoint(18, helpers_1.Breakpoints.b2560)};
				}
			`}
			${props.size === 'C' &&
    `width: ${helpers_1.getGridColumn(22)};

				@media (min-width: ${helpers_1.Breakpoints.b560}px) {
					width: ${helpers_1.getGridColumn(9)};
				}
				@media (min-width: ${helpers_1.Breakpoints.b2560}px) {
					width: ${helpers_1.getColumnsWidthForBreakpoint(9, helpers_1.Breakpoints.b2560)};
				}
			`}
			`};
`;
StyledLayer.displayName = 'StyledLayer';
const UnanimatedInteractionLayer = React.forwardRef((props, ref) => {
    const { active, children, direction, size, scrollElementRef, windowHeight } = props;
    const innerRef = ref || undefined;
    return (React.createElement(StyledLayer, { role: "dialog", "aria-modal": active, size: size, ref: innerRef, direction: direction },
        React.createElement(LayerScrollContainer, { ref: scrollElementRef, windowHeight: windowHeight }, children)));
});
UnanimatedInteractionLayer.displayName = 'UnanimatedInteractionLayer';
class InteractionLayerInternal extends React.PureComponent {
    constructor(props) {
        super(props);
        this.getWindowHeight = () => {
            const windowHeight = window.innerHeight;
            this.setState({ windowHeight });
        };
        this.resizeInteractionLayer = lodash_throttle_1.default(() => {
            this.getWindowHeight();
        }, 50);
        this.ref = React.createRef();
        this.state = {
            direction: undefined,
            windowHeight: window.innerHeight
        };
    }
    componentDidMount() {
        if (!this.ref || !this.ref.current || !window) {
            return;
        }
        // We need to use findDOMNode to ensure that we also get the
        // element from the reference in styled-components version v3.x.x.
        // After discontinuing the support for styled-components v3 we can remove
        // the `findDOMNode` and directly access the reference again.
        // eslint-disable-next-line react/no-find-dom-node
        const direction = window.getComputedStyle(react_dom_1.findDOMNode(this.ref.current)).direction;
        if (direction === 'ltr' || direction === 'rtl') {
            this.setState({ direction });
        }
        window.addEventListener('resize', this.resizeInteractionLayer);
        this.resizeInteractionLayer();
    }
    componentWillUnmount() {
        window.removeEventListener('resize', this.resizeInteractionLayer);
    }
    render() {
        const { direction, windowHeight } = this.state;
        const { active, children, in: visible = true, key, onExited, scrollElementRef, size, theme } = this.props;
        const timeout = parseInt(theme.animation.duration.layer || '0', 10);
        return (React.createElement(react_transition_group_1.CSSTransition, { classNames: `${animationClassName}-${direction}`, onExited: onExited, in: Boolean(visible && direction), timeout: timeout },
            React.createElement(UnanimatedInteractionLayer, { active: active, size: size, scrollElementRef: scrollElementRef, direction: direction, ref: this.ref, key: key, windowHeight: windowHeight }, children)));
    }
}
exports.InteractionLayer = styled_components_1.withTheme(InteractionLayerInternal);
