"use strict";
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];
    result["default"] = mod;
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
const React = __importStar(require("react"));
const react_transition_group_1 = require("react-transition-group");
const styled_components_1 = require("styled-components");
const theme_provider_1 = require("../theme-provider");
var ShimBackgroundType;
(function (ShimBackgroundType) {
    ShimBackgroundType["OPAQUE"] = "OPAQUE";
    ShimBackgroundType["TRANSPARENT"] = "TRANSPARENT";
})(ShimBackgroundType = exports.ShimBackgroundType || (exports.ShimBackgroundType = {}));
const animationClassName = 'animation';
const StyledShimLayer = theme_provider_1.styled.div.withConfig({ displayName: "StyledShimLayer", componentId: "sc-fcqlz9" }) `
	position: fixed;
	top: 0;
	right: 0;
	bottom: 0;
	left: 0;

	background-color: ${props => props.backgroundType === ShimBackgroundType.TRANSPARENT
    ? 'transparent'
    : props.theme.global.shimColor};
	opacity: 1;

	transition: ${props => {
    const duration = props.theme.animation.duration.layer;
    const timingFunction = props.theme.animation.timingFunction.in;
    return `opacity ${duration} ${timingFunction}`;
}};

	&.${animationClassName}-exit {
		opacity: 1;
	}

	&.${animationClassName}-enter,
		&.${animationClassName}-exit-active,
		&.${animationClassName}-exit-done {
		opacity: 0;
	}

	// this must be separate from the animation-exit definition because the order in the CSS must be in a specific order
	// for the animation to work and some of the values for the animation are breakpoint specific.
	// * <name>-<state> => breakpoint specific for enter
	// * <name>-<state>-active => breakpoint specific for exit
	// * <name>-<state>-done (if needed) => breakpoint specific for exit
	&.${animationClassName}-enter-active {
		opacity: 1;
	}
`;
StyledShimLayer.displayName = 'StyledShimLayer';
exports.InternalShimLayer = props => {
    const { backgroundType = ShimBackgroundType.OPAQUE, in: visible, onExited } = props;
    const handleClick = (event) => {
        const { onClick = () => undefined } = props;
        onClick(event);
    };
    const timeout = parseInt(props.theme.animation.duration.layer || '0', 10);
    return (React.createElement(react_transition_group_1.CSSTransition, { classNames: animationClassName, onExited: onExited, in: visible, timeout: timeout },
        React.createElement(StyledShimLayer, { onClick: handleClick, backgroundType: backgroundType })));
};
exports.ShimLayer = styled_components_1.withTheme(exports.InternalShimLayer);
