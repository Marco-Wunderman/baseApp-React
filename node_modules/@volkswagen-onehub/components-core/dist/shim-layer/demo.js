"use strict";
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];
    result["default"] = mod;
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
const React = __importStar(require("react"));
const button_1 = require("../button");
const checkbox_1 = require("../checkbox");
const container_1 = require("../container");
const demo_container_1 = require("../demo/demo-container");
const demo_root_1 = require("../demo/demo-root");
const demo_theme_provider_with_toggle_1 = require("../demo/demo-theme-provider-with-toggle");
const layer_wrapper_1 = require("../layer-wrapper");
const text_1 = require("../text");
const index_1 = require("./index");
const demo_data_1 = require("./demo-data");
class ShimLayerDemo extends React.Component {
    constructor() {
        super(...arguments);
        this.state = {
            layerIsVisible: false,
            layerBackgroundType: index_1.ShimBackgroundType.OPAQUE
        };
        this.toggleVisibility = () => {
            this.setState({
                layerIsVisible: !this.state.layerIsVisible
            });
        };
        this.toggleLayerTransparency = () => {
            this.setState({
                layerBackgroundType: this.state.layerBackgroundType === index_1.ShimBackgroundType.OPAQUE
                    ? index_1.ShimBackgroundType.TRANSPARENT
                    : index_1.ShimBackgroundType.OPAQUE
            });
        };
    }
    render() {
        return (React.createElement(demo_root_1.DemoRoot, { showGridOverlayToggle: true },
            React.createElement(demo_theme_provider_with_toggle_1.DemoThemeProviderWithToggle, null,
                React.createElement(demo_container_1.DemoContainer, null,
                    React.createElement(container_1.Container, { gutter: container_1.ContainerGutter.dynamic0100, padding: container_1.ContainerPadding.grid001, wrap: container_1.ContainerWrap.always },
                        React.createElement(text_1.Text, { tag: text_1.TextTag.div, appearance: text_1.TextAppearance.headline350 }, "Select your shim layer options"),
                        React.createElement(checkbox_1.Checkbox, { value: "layer-is-transparent", checked: this.state.layerBackgroundType ===
                                index_1.ShimBackgroundType.TRANSPARENT, onChange: this.toggleLayerTransparency, label: "transparent shim layer" }),
                        React.createElement(button_1.Button, { onClick: this.toggleVisibility }, "Open Shim Layer"),
                        React.createElement(text_1.Text, { tag: text_1.TextTag.p },
                            "Click on the shim layer that opens to close it.",
                            React.createElement("br", null),
                            "The layer is currently",
                            ' ',
                            React.createElement(text_1.Text, { tag: text_1.TextTag.span, bold: true },
                                this.state.layerIsVisible ? 'open' : 'closed',
                                "."))),
                    React.createElement(container_1.Container, { gutter: container_1.ContainerGutter.static100, padding: container_1.ContainerPadding.grid001, wrap: container_1.ContainerWrap.always },
                        React.createElement(text_1.Text, { tag: text_1.TextTag.div, appearance: text_1.TextAppearance.headline350 }, "This is some dummy page content"),
                        React.createElement(text_1.Text, null, demo_data_1.demoData)),
                    React.createElement(layer_wrapper_1.LayerWrapper, null, this.state.layerIsVisible ? (React.createElement(index_1.ShimLayer, { onClick: this.toggleVisibility, backgroundType: this.state.layerBackgroundType })) : (undefined))))));
    }
}
exports.default = ShimLayerDemo;
