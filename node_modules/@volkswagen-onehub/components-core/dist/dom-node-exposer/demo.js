"use strict";
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];
    result["default"] = mod;
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
const React = __importStar(require("react"));
const action_button_1 = require("../action-button");
const button_1 = require("../button");
const demo_root_1 = require("../demo/demo-root");
const integrator_root_1 = require("../integrator-root");
const text_1 = require("../text");
const text_input_1 = require("../text-input");
const theme_provider_1 = require("../theme-provider");
const index_1 = require("./index");
class DOMNodeExposerDemo extends React.Component {
    constructor() {
        super(...arguments);
        this.state = {
            unmount: false,
            updateComponent: false
        };
    }
    render() {
        return (React.createElement(demo_root_1.DemoRoot, null,
            React.createElement(theme_provider_1.ThemeProvider, null,
                React.createElement("h2", null, "DOMNodeExposer"),
                React.createElement("h3", null, "You can find the detected elements when accessing `window.elementRefs`"),
                React.createElement(index_1.DOMNodeExposer, { name: "test" },
                    React.createElement(text_input_1.TextInput, null)),
                React.createElement(index_1.DOMNodeExposer, { name: "test2" },
                    React.createElement(text_1.Text, { tag: this.state.updateComponent ? text_1.TextTag.div : text_1.TextTag.h2 }, "Test 2")),
                React.createElement(index_1.DOMNodeExposer, { name: "integratorRoot" },
                    React.createElement(integrator_root_1.IntegratorRoot, null,
                        !this.state.unmount && (React.createElement(index_1.DOMNodeExposer, { name: "testButtonMounted" },
                            React.createElement(button_1.Button, { onClick: () => this.setState({ unmount: true }) }, "Unmount component"))),
                        this.state.unmount && (React.createElement(button_1.Button, { onClick: () => this.setState({ unmount: false }) }, "Remount component")),
                        React.createElement(index_1.DOMNodeExposer, { name: "testButton" },
                            React.createElement(button_1.Button, { appearance: this.state.updateComponent
                                    ? button_1.ButtonAppearance.Primary
                                    : button_1.ButtonAppearance.Secondary, onClick: () => this.setState({
                                    updateComponent: !this.state.updateComponent
                                }) }, "Update component")),
                        React.createElement(index_1.DOMNodeExposer, { name: "testButton" },
                            React.createElement(button_1.Button, null, "Test 2")),
                        React.createElement(index_1.DOMNodeExposer, { name: "testActionButton" },
                            React.createElement(action_button_1.ActionButton, null, "Test 2")))),
                React.createElement(index_1.DOMNodeExposer, { name: "testDiv" },
                    React.createElement("div", null, "Test")))));
    }
}
exports.default = DOMNodeExposerDemo;
