"use strict";
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];
    result["default"] = mod;
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
const React = __importStar(require("react"));
const text_1 = require("../text");
const theme_provider_1 = require("../theme-provider");
const container_1 = require("../container");
var FieldsetAppearance;
(function (FieldsetAppearance) {
    FieldsetAppearance[FieldsetAppearance["Default"] = 0] = "Default";
    FieldsetAppearance[FieldsetAppearance["Error"] = 1] = "Error";
})(FieldsetAppearance = exports.FieldsetAppearance || (exports.FieldsetAppearance = {}));
const StyledFieldset = theme_provider_1.styled.fieldset.withConfig({ displayName: "StyledFieldset", componentId: "sc-16gvfsk" }) `
	border: none;
	padding: 0;
	margin: 0;
	min-width: 0;
`;
const StyledErrorText = theme_provider_1.styled.span.withConfig({ displayName: "StyledErrorText", componentId: "sc-1cts30a" }) `
	display: block;
	color: ${props => props.theme.interaction.recipe360.default};
	&:first-child {
		margin-bottom: ${props => props.errorShouldBeVisible && props.theme.size.static350};
	}
	&:nth-child(2) {
		margin-bottom: ${props => props.theme.size.static350};
		margin-top: ${props => props.errorShouldBeVisible && props.theme.size.static200};
	}
`;
exports.Fieldset = props => {
    const { children, legend, required, appearance, errorText } = props;
    const errorShouldBeVisible = Boolean(appearance === FieldsetAppearance.Error && errorText);
    return (React.createElement(StyledFieldset, null,
        legend && (React.createElement(text_1.Text, { appearance: text_1.TextAppearance.copy0200, bold: true, staticSize: true, tag: text_1.TextTag.legend },
            legend,
            required && '*')),
        React.createElement(StyledErrorText, { errorShouldBeVisible: errorShouldBeVisible, "aria-live": "assertive", "aria-relevant": "all" }, errorShouldBeVisible && (React.createElement(text_1.Text, { appearance: text_1.TextAppearance.copy0100, color: text_1.TextColor.inherit, staticSize: true }, errorText))),
        React.createElement(container_1.Container, { gutter: container_1.ContainerGutter.static350, wrap: container_1.ContainerWrap.always }, children)));
};
