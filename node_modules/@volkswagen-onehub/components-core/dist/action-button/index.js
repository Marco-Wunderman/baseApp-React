"use strict";
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];
    result["default"] = mod;
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
const React = __importStar(require("react"));
const styled_components_1 = require("styled-components");
const helpers_1 = require("../helpers");
const theme_provider_1 = require("../theme-provider");
const getColor = (props) => {
    const textRecipe = props.theme.interaction.recipe450;
    return props.disabled
        ? styled_components_1.css `
				color: ${textRecipe.disabled};
		  `
        : styled_components_1.css `
				& {
					color: ${textRecipe.default};
				}
				:hover,
				:focus {
					color: ${textRecipe.hover};
				}
				:active {
					color: ${textRecipe.active};
				}
		  `;
};
const getBorder = (props) => {
    const borderRecipe = props.theme.interaction.recipe450;
    return props.disabled
        ? styled_components_1.css `
				border-color: ${borderRecipe.disabled};
		  `
        : styled_components_1.css `
				& {
					border-color: ${borderRecipe.default};
				}
				:hover,
				:focus {
					border-color: ${borderRecipe.hover};
				}
				:active {
					border-color: ${borderRecipe.active};
				}
		  `;
};
const actionButtonStyle = (props) => styled_components_1.css `
	min-width: 30px;
	min-height: 30px;
	margin: 0;
	padding: 0 ${props.theme.size.static150};
	border: 1px solid;
	border-radius: 15px;
	outline: none;
	transition: all 0.2s ease-in-out;

	display: inline-flex;
	align-items: center;

	cursor: ${props.disabled ? 'not-allowed' : 'pointer'};
	background: ${props.theme.transparentColor};

	${getColor(props)}
	${getBorder(props)}

	:focus {
		${helpers_1.createA11yOutlineStyles(props)}
	}
`;
const StyledActionButton = theme_provider_1.styled.button.withConfig({ displayName: "StyledActionButton", componentId: "sc-1drw0xj" }) `
	${actionButtonStyle};
`;
const StyledActionButtonLink = theme_provider_1.styled.a.withConfig({ displayName: "StyledActionButtonLink", componentId: "sc-t878c9" }) `
	${actionButtonStyle};

	text-decoration: none;
`;
const StyledTextWrap = theme_provider_1.styled.div.withConfig({ displayName: "StyledTextWrap", componentId: "sc-2ebcn5" }) `
	margin: 0 ${props => props.theme.size.static100};
	display: ${props => (props.reduced ? 'none' : '')};

	// NOTE: this overlaps "margin hack" on Text element due wrong font baseline to get better alignment here
	font-size: ${props => props.theme.textAppearances.copy0100.fontSize};
	position: relative;
	top: 0.11em; // same relative value as in Text component
`;
exports.ActionButton = props => {
    const { children, icon, reduced, disabled, onClick, innerRef } = props;
    return (React.createElement(StyledActionButton, { disabled: disabled, onClick: onClick, ref: innerRef },
        icon,
        React.createElement(StyledTextWrap, { reduced: reduced }, children)));
};
exports.ActionButtonLink = props => {
    const { children, icon, reduced, disabled, onClick, innerRef, download, target, title, href, rel } = props;
    return (React.createElement(StyledActionButtonLink, { disabled: disabled, onClick: onClick, ref: innerRef, download: download, target: target, title: title, href: href, rel: rel },
        icon,
        React.createElement(StyledTextWrap, { reduced: reduced }, children)));
};
