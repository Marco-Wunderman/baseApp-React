"use strict";
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];
    result["default"] = mod;
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
const React = __importStar(require("react"));
const breakpoint_wrapper_1 = require("../breakpoint-wrapper");
const demo_container_1 = require("../demo/demo-container");
const demo_root_1 = require("../demo/demo-root");
const demo_theme_provider_with_toggle_1 = require("../demo/demo-theme-provider-with-toggle");
const fixed_width_container_1 = require("../fixed-width-container");
const helpers_1 = require("../helpers");
const layout_1 = require("../layout");
const index_1 = require("./index");
const menuItems = [
    { name: 'Item One', url: '#' },
    {
        name: 'Item Two',
        children: [
            { name: 'Item Two - SubItem One', url: '#' },
            { name: 'Item Two - SubItem Two', url: '#' }
        ]
    },
    {
        name: 'Item Three',
        children: [
            { name: 'SubItem One', url: '#' },
            { name: 'Item Three - SubItem Two', url: '#' },
            { name: 'Item Three - SubItem Three', url: '#' }
        ]
    }
];
class MobileNavigationItemStateHolder extends React.PureComponent {
    constructor(props) {
        super(props);
        this.onClick = (e) => {
            e.preventDefault();
            this.setState(state => ({ isOpen: !state.isOpen }));
        };
        this.state = {
            isOpen: false
        };
    }
    render() {
        return this.props.children(this.state.isOpen, this.onClick);
    }
}
class NavigationLevelListDemo extends React.PureComponent {
    constructor() {
        super(...arguments);
        this.state = {
            openItem: 0
        };
        this.onClick = (index) => {
            this.setState({ openItem: index });
        };
    }
    render() {
        return (React.createElement(demo_root_1.DemoRoot, { showGridOverlayToggle: true },
            React.createElement("h2", null, "Navigation Level List"),
            React.createElement(demo_theme_provider_with_toggle_1.DemoThemeProviderWithToggle, null,
                React.createElement(demo_container_1.DemoContainer, null,
                    React.createElement(layout_1.Layout, null,
                        React.createElement(breakpoint_wrapper_1.BreakpointWrapper, { max: helpers_1.Breakpoints.b560 },
                            React.createElement(index_1.NavigationLevelList, null, menuItems.map(item => (React.createElement(MobileNavigationItemStateHolder, { key: item.name }, (isOpen, onClick) => (React.createElement(index_1.NavigationLevelListItem, { id: item.name.split(/\s+/).join(''), name: item.name, url: item.url, subItems: item.children, isOpen: isOpen, onClick: onClick }))))))),
                        React.createElement(breakpoint_wrapper_1.BreakpointWrapper, { min: helpers_1.Breakpoints.b560 },
                            React.createElement(fixed_width_container_1.FixedWidthContainer, { columns: 13 },
                                React.createElement(index_1.NavigationLevelList, null, menuItems.map((item, index) => (React.createElement(index_1.NavigationLevelListItem, { id: item.name.split(/\s+/).join(''), name: item.name, url: item.url, subItems: item.children, isOpen: this.state.openItem === index, onClick: () => this.onClick(index), key: item.name })))))))))));
    }
}
exports.default = NavigationLevelListDemo;
