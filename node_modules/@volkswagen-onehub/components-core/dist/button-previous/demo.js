"use strict";
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];
    result["default"] = mod;
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
const React = __importStar(require("react"));
const container_1 = require("../container");
const demo_container_1 = require("../demo/demo-container");
const demo_root_1 = require("../demo/demo-root");
const demo_1 = require("../demo");
const index_1 = require("./index");
const CTADemo = () => (React.createElement(demo_root_1.DemoRoot, { showGridOverlayToggle: true },
    React.createElement(demo_1.DemoThemeProviderWithToggle, null,
        React.createElement(demo_1.DemoThemeProviderToggleContext.Consumer, null, value => (React.createElement(React.Fragment, null,
            React.createElement("h2", null, "Previous Button"),
            React.createElement("p", null, "Please note: the keys used in this demo cause a re-render of the button right when you change the text direction. You probably don't want to do that in your application."),
            React.createElement(demo_container_1.DemoContainer, null,
                React.createElement(container_1.Container, { gutter: container_1.ContainerGutter.static200, padding: container_1.ContainerPadding.static200 },
                    React.createElement(index_1.ButtonPrevious, { onClick: () => undefined, emphasis: "primary", tag: "button", key: `button-1-${value.direction}`, ariaLabel: "aria label" }, "Previous?"),
                    React.createElement(index_1.ButtonPrevious, { onClick: () => undefined, emphasis: "secondary", tag: "button", key: `button-2-${value.direction}` }, "Previous?"),
                    React.createElement(index_1.ButtonPrevious, { onClick: () => undefined, emphasis: "primary", tag: "button", key: `button-3-${value.direction}`, size: "small" }, "Previous?"),
                    React.createElement(index_1.ButtonPrevious, { onClick: () => undefined, emphasis: "secondary", tag: "button", key: `button-4-${value.direction}`, size: "small" }, "Previous?")))))))));
exports.default = CTADemo;
