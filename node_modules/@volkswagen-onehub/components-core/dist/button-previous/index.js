"use strict";
var __rest = (this && this.__rest) || function (s, e) {
    var t = {};
    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
        t[p] = s[p];
    if (s != null && typeof Object.getOwnPropertySymbols === "function")
        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) if (e.indexOf(p[i]) < 0)
            t[p[i]] = s[p[i]];
    return t;
};
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];
    result["default"] = mod;
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
const React = __importStar(require("react"));
const ReactDOM = __importStar(require("react-dom"));
const icons_core_1 = require("@volkswagen-onehub/icons-core");
const call_to_action_1 = require("../call-to-action");
class ButtonPrevious extends React.PureComponent {
    constructor(props) {
        super(props);
        this.ref = React.createRef();
        this.state = {
            direction: 'ltr'
        };
    }
    componentDidMount() {
        const direction = this.ref &&
            this.ref.current &&
            window &&
            // We need to use findDOMNode to ensure that we also get the
            // element from the reference in styled-components version v3.x.x.
            // After discontinuing the support for styled-components v3 we can remove
            // the `findDOMNode` and directly access the reference again.
            // eslint-disable-next-line react/no-find-dom-node
            window.getComputedStyle(ReactDOM.findDOMNode(this.ref.current)).direction;
        if (direction === 'ltr' || direction === 'rtl') {
            this.setState({ direction });
        }
    }
    render() {
        const { size } = this.props;
        const { direction } = this.state;
        const icon = direction === 'ltr' ? (React.createElement(icons_core_1.ArrowLeft, { variant: size === 'small' ? 'small' : 'default' })) : (React.createElement(icons_core_1.ArrowRight, { variant: size === 'small' ? 'small' : 'default' }));
        const _a = this.props, { children } = _a, rest = __rest(_a, ["children"]);
        return (React.createElement(call_to_action_1.CTA, Object.assign({}, rest, { icon: icon, ref: this.ref, size: size }), children));
    }
}
exports.ButtonPrevious = ButtonPrevious;
