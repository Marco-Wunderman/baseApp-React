"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
require("jest-styled-components");
const helpers_1 = require("../../helpers");
const helpers_2 = require("../../helpers/__tests__/helpers");
const definitions_1 = require("../definitions");
const helpers_3 = require("../helpers");
const index_1 = require("../index");
describe('createCSSVariablesForSizes', () => {
    const testConfig = {
        [helpers_1.Breakpoints.default]: index_1.ContainerPadding.static100
    };
    const testTheme = {
        size: {
            static100: 'testToken'
        }
    };
    test('creates media queries for test config', () => {
        const css = helpers_3.createCSSVariablesForSizes(testConfig, testTheme);
        expect(helpers_2.createTestStyledComponent(css)).toHaveStyleRule('--container-0-static100', 'testToken');
    });
});
describe('createSpacingBetweenElementsStyles', () => {
    const testTheme = {
        size: {
            static100: 'testToken'
        }
    };
    test('creates styles without media query', () => {
        const css = helpers_3.createSpacingBetweenElementsStyles(definitions_1.ContainerWrap.always, testTheme);
        expect(JSON.stringify(css)).not.toMatch(/media/);
    });
    test('creates styles with media query', () => {
        const testConfigWrap = {
            [helpers_1.Breakpoints.b960]: definitions_1.ContainerWrap.always
        };
        const breakpoint = `(min-width: ${helpers_1.Breakpoints.b960}px)`;
        const css = helpers_3.createSpacingBetweenElementsStyles(testConfigWrap, testTheme);
        expect(JSON.stringify(css)).toContain(breakpoint);
    });
});
describe('createSpacingAroundElementsStyles', () => {
    const testTheme = {
        size: {
            static100: 'testToken'
        }
    };
    test('creates media queries for test config with breakpoints', () => {
        const testPadding = {
            [helpers_1.Breakpoints.default]: index_1.ContainerPadding.static100
        };
        const css = helpers_3.createSpacingAroundElementsStyles(testPadding, testTheme);
        expect(helpers_2.createTestStyledComponent(css)).toHaveStyleRule('padding', 'var(--container-0-static100)');
        expect(helpers_2.createTestStyledComponent(css)).toHaveStyleRule('padding', 'var(--container-0-static100)');
    });
    test('creates media queries for test config with directions', () => {
        const testPadding = {
            top: index_1.ContainerPadding.static100
        };
        const css = helpers_3.createSpacingAroundElementsStyles(testPadding, testTheme);
        expect(helpers_2.createTestStyledComponent(css)).toHaveStyleRule('padding-top', 'testToken');
    });
    test('creates media queries for test config with directions and breakpoints', () => {
        const testPadding = {
            top: {
                [helpers_1.Breakpoints.default]: index_1.ContainerPadding.static100
            }
        };
        const css = helpers_3.createSpacingAroundElementsStyles(testPadding, testTheme);
        expect(helpers_2.createTestStyledComponent(css)).toHaveStyleRule('padding-top', 'var(--container-0-static100)');
    });
});
