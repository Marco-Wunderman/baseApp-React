"use strict";
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];
    result["default"] = mod;
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
const React = __importStar(require("react"));
const ReactDOM = __importStar(require("react-dom"));
const icons_core_1 = require("@volkswagen-onehub/icons-core");
const input_1 = require("../helpers/input");
const theme_provider_1 = require("../theme-provider");
// the icon needs to be moved up by the size of the wrapper's bottom padding
const StyledIcon = theme_provider_1.styled.span.withConfig({ displayName: "StyledIcon", componentId: "sc-1sq4bcc" }) `
	position: absolute;
	bottom: ${props => `${parseInt(props.theme.size.static150)}px`};
	display: flex;
	width: 100%;
	justify-content: flex-end;
	height: ${props => props.theme.size.static350};
	pointer-events: none;
	transition: ${props => `color ${props.theme.animation.timingFunction.cubicOut} ${props.theme.animation.duration.color}`};
`;
const StyledLabelText = theme_provider_1.styled.span.withConfig({ displayName: "StyledLabelText", componentId: "sc-62bnde" }) `
	width: 100%;
	display: flex;
	transition: ${props => `color ${props.theme.animation.timingFunction.cubicOut} ${props.theme.animation.duration.color}`};
	font-size: ${props => props.theme.textAppearances.copy0100.fontSize};
	pointer-events: none;
`;
const StyledSelect = theme_provider_1.styled.select.withConfig({ displayName: "StyledSelect", componentId: "sc-131xm3f" }) `
	appearance: none;
	box-shadow: none;
	width: 100%;
	${props => props.direction === 'rtl'
    ? theme_provider_1.css `
					padding: ${props.theme.size.static150} 0 ${props.theme.size.static150}
						${props.theme.size.static350};
			  `
    : theme_provider_1.css `
					padding: ${props.theme.size.static150} ${props.theme.size.static350}
						${props.theme.size.static150} 0;
			  `}
	border: 0;
	border-bottom: 1px solid;
	border-radius: 0;
	border-color: ${props => props.hasError
    ? props.theme.interaction.recipe360.default
    : props.theme.interaction.recipe150.default};
	color: inherit;
	background: transparent;
	font-size: ${props => props.theme.textAppearances.copy0200.fontSize};
	font-family: ${props => props.theme.textAppearances.copy0200.fontFamily};
	outline: none;
	cursor: ${props => (props.disabled ? 'not-allowed' : 'pointer')};

	&:focus {
		border-color: ${props => props.hasError
    ? props.theme.interaction.recipe360.default
    : props.theme.interaction.recipe450.default};
	}

	&:disabled {
		border-color: ${props => props.theme.interaction.recipe150.disabled};
	}
`;
const StyledLabel = theme_provider_1.styled.label.withConfig({ displayName: "StyledLabel", componentId: "sc-13dfu81" }) `
	position: relative;
	display: block;
	color: ${props => props.theme.interaction.recipe450.default};

	${props => props.disabled
    ? theme_provider_1.css `
					cursor: not-allowed;
					color: ${props => props.theme.interaction.recipe450.disabled};
			  `
    : theme_provider_1.css `
					cursor: pointer;
					:hover {
						color: ${props => props.theme.interaction.recipe450.hover};
					}
			  `}
`;
const StyledErrorText = theme_provider_1.styled.div.withConfig({ displayName: "StyledErrorText", componentId: "sc-1n7896m" }) `
	color: ${props => props.theme.interaction.recipe360.default};
	font-size: ${props => props.theme.textAppearances.copy0100.fontSize};
`;
class Select extends React.Component {
    constructor(props) {
        super(props);
        this.ref = React.createRef();
        this.handleChange = (e) => {
            const { onChange = () => undefined } = this.props;
            onChange(e, this.props);
        };
        this.state = {
            direction: undefined
        };
    }
    componentDidMount() {
        if (!this.ref.current || this.ref.current.selectedIndex > 0) {
            return;
        }
        this.ref.current.selectedIndex = -1;
        const direction = this.ref &&
            this.ref.current &&
            window &&
            // We need to use findDOMNode to ensure that we also get the
            // element from the reference in styled-components version v3.x.x.
            // After discontinuing the support for styled-components v3 we can remove
            // the `findDOMNode` and directly access the reference again.
            // eslint-disable-next-line react/no-find-dom-node
            window.getComputedStyle(ReactDOM.findDOMNode(this.ref.current)).direction;
        if (direction === 'ltr' || direction === 'rtl') {
            this.setState({ direction });
        }
    }
    render() {
        const { autoComplete, children, disabled, label, appearance, errorText, defaultValue, value, required = false, name, autoFocus = false } = this.props;
        const errorShouldBeVisible = Boolean(appearance === input_1.InputAppearance.Error && errorText);
        const { direction } = this.state;
        return (React.createElement(React.Fragment, null,
            React.createElement(StyledLabel, { disabled: disabled },
                label && (React.createElement(StyledLabelText, null,
                    label,
                    required && '*')),
                React.createElement(StyledSelect, { autoComplete: autoComplete, disabled: disabled, required: required, ref: this.ref || undefined, defaultValue: defaultValue, value: value, onChange: this.handleChange, hasError: errorShouldBeVisible, name: name, direction: direction, autoFocus: autoFocus }, children),
                React.createElement(StyledIcon, null,
                    React.createElement(icons_core_1.ChevronDown, { variant: "default" }))),
            React.createElement(StyledErrorText, { role: "alert" }, errorShouldBeVisible && errorText)));
    }
}
exports.Select = Select;
