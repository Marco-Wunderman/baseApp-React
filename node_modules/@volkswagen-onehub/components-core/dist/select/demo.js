"use strict";
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];
    result["default"] = mod;
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
const React = __importStar(require("react"));
const demo_container_1 = require("../demo/demo-container");
const demo_root_1 = require("../demo/demo-root");
const demo_theme_provider_with_toggle_1 = require("../demo/demo-theme-provider-with-toggle");
const input_1 = require("../helpers/input");
const theme_provider_1 = require("../theme-provider");
const index_1 = require("./index");
const StyledSelectDemoElementContainer = theme_provider_1.styled.div.withConfig({ displayName: "StyledSelectDemoElementContainer", componentId: "sc-15n0hac" }) `
	width: 300px;
`;
// Create 5 option items
const options = [...Array(5).keys()].map(index => (React.createElement("option", { key: index + 1, value: index + 1 },
    "Option ",
    index + 1)));
class SelectDemo extends React.PureComponent {
    constructor(props) {
        super(props);
        this.state = {
            selectedOptionFirstSelect: '',
            selectedOptionSecondSelect: ''
        };
    }
    render() {
        const { selectedOptionFirstSelect: selectedOptionFirstSelect, selectedOptionSecondSelect: selectedOptionSecondSelect } = this.state;
        return (React.createElement(demo_root_1.DemoRoot, null,
            React.createElement("h2", null, "Select"),
            React.createElement("p", null, "Please note: the keys used in this demo cause a re-render of the select component right when you change the text direction. You probably don't want to do that in your application."),
            React.createElement(demo_theme_provider_with_toggle_1.DemoThemeProviderWithToggle, null,
                React.createElement(demo_theme_provider_with_toggle_1.DemoThemeProviderToggleContext.Consumer, null, value => (React.createElement(React.Fragment, null,
                    React.createElement("h4", null, "default"),
                    React.createElement(demo_container_1.DemoContainer, null,
                        React.createElement(StyledSelectDemoElementContainer, null,
                            React.createElement(index_1.Select, { label: "What do you want to do", value: selectedOptionFirstSelect, name: "what_to_do", onChange: (evt) => {
                                    const { value } = evt.currentTarget;
                                    this.setState({ selectedOptionFirstSelect: value });
                                    alert(`You have selected the Option ${value}`);
                                }, autoComplete: 'given-name', key: `select-1-${value.direction}` }, options))),
                    React.createElement("h4", null, "invalid and with error text"),
                    React.createElement(demo_container_1.DemoContainer, null,
                        React.createElement(StyledSelectDemoElementContainer, null,
                            React.createElement(index_1.Select, { appearance: input_1.InputAppearance.Error, errorText: "This field is required", label: "What do you want to do", value: selectedOptionSecondSelect, name: "what_to_do", onChange: (evt) => {
                                    const { value } = evt.currentTarget;
                                    this.setState({ selectedOptionSecondSelect: value });
                                    alert(`You have selected the Option ${value}`);
                                }, key: `select-2-${value.direction}` }, options))),
                    React.createElement("h4", null, "disabled"),
                    React.createElement(demo_container_1.DemoContainer, null,
                        React.createElement(StyledSelectDemoElementContainer, null,
                            React.createElement(index_1.Select, { disabled: true, label: "What do you want to do", key: `select-3-${value.direction}` }, options))),
                    React.createElement("h4", null, "with empty option"),
                    React.createElement(demo_container_1.DemoContainer, null,
                        React.createElement(StyledSelectDemoElementContainer, null,
                            React.createElement(index_1.Select, { label: "What do you want to do", key: `select-4-${value.direction}` },
                                React.createElement("option", { disabled: true, value: "" }),
                                options))),
                    React.createElement("h4", null, "required"),
                    React.createElement(demo_container_1.DemoContainer, null,
                        React.createElement(StyledSelectDemoElementContainer, null,
                            React.createElement(index_1.Select, { label: "What do you want to do", value: selectedOptionFirstSelect, name: "what_to_do", onChange: (evt) => {
                                    const { value } = evt.currentTarget;
                                    this.setState({ selectedOptionFirstSelect: value });
                                    alert(`You have selected the Option ${value}`);
                                }, required: true, key: `select-5-${value.direction}` }, options))),
                    React.createElement("h4", null, "default with autoFocus"),
                    React.createElement(demo_container_1.DemoContainer, null,
                        React.createElement(StyledSelectDemoElementContainer, null,
                            React.createElement(index_1.Select, { label: "What do you want to do", value: selectedOptionFirstSelect, name: "what_to_do", onChange: (evt) => {
                                    const { value } = evt.currentTarget;
                                    this.setState({ selectedOptionFirstSelect: value });
                                    alert(`You have selected the Option ${value}`);
                                }, autoComplete: 'given-name', autoFocus: true, key: `select-6-${value.direction}` }, options)))))))));
    }
}
exports.default = SelectDemo;
