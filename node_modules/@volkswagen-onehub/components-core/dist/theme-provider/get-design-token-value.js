"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
/* eslint-disable-next-line import/default */
const lodash_get_1 = __importDefault(require("lodash.get"));
const logger_1 = require("../helpers/logger");
const create_css_var_name_1 = require("./create-css-var-name");
const inject_design_tokens_option_1 = require("./inject-design-tokens-option");
function getDesignTokenValue(propertyPath = '', optionsOverride) {
    if (!propertyPath) {
        logger_1.warnWithTrace(`Design token value could not be found: ${propertyPath}`);
        return undefined;
    }
    const options = inject_design_tokens_option_1.injectDesignTokensOption(optionsOverride);
    const designTokenValue = lodash_get_1.default(options.tokens, propertyPath);
    // array values, return css var instead
    // the assumption is that every array is a dynamic designToken
    if (Array.isArray(designTokenValue)) {
        // @todo: we need to add a fallback for browsers that cannot handle css vars
        return `var(${create_css_var_name_1.createCSSVarName(propertyPath)})`;
    }
    return typeof designTokenValue === 'string' ? designTokenValue : undefined;
}
exports.getDesignTokenValue = getDesignTokenValue;
