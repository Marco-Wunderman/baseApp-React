"use strict";
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];
    result["default"] = mod;
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
const React = __importStar(require("react"));
const helpers_1 = require("../helpers");
const theme_provider_1 = require("../theme-provider");
const StyledContainer = theme_provider_1.styled.div.withConfig({ displayName: "StyledContainer", componentId: "sc-13ur9q2" }) `
	${props => {
    const sortedBreakpointsWithConfiguration = Object.keys(props.columns).sort(helpers_1.compareBreakpoints);
    const maxConfiguredBreakpoint = sortedBreakpointsWithConfiguration[sortedBreakpointsWithConfiguration.length - 1];
    const maxBreakpoint = helpers_1.Breakpoints.b2560;
    const maxWidthStyles = maxConfiguredBreakpoint &&
        `
			@media (min-width: ${maxBreakpoint}px) {
				min-width: ${helpers_1.getColumnsWidthForBreakpoint(props.columns[maxConfiguredBreakpoint], maxBreakpoint)};
				max-width: ${helpers_1.getColumnsWidthForBreakpoint(props.columns[maxConfiguredBreakpoint], maxBreakpoint)};
			}
		`;
    const perBreakpointStyles = sortedBreakpointsWithConfiguration
        .map(breakpoint => {
        const columns = props.columns[breakpoint];
        const styles = `
				min-width: ${helpers_1.getGridColumn(columns)};
				max-width: ${helpers_1.getGridColumn(columns)};
			`;
        if (parseInt(breakpoint, 10) === helpers_1.Breakpoints.default) {
            return styles;
        }
        return `
				@media (min-width: ${breakpoint}px) {
					${styles}
				}
			`;
    })
        .join('\n');
    return `
			${perBreakpointStyles}
			${maxWidthStyles}
		`;
}}

	overflow: hidden;
`;
exports.FixedWidthContainer = (props) => {
    const { columns, children } = props;
    const breakpointConfig = typeof columns === 'number' ? { [helpers_1.Breakpoints.default]: columns } : columns;
    return (React.createElement(StyledContainer, { columns: breakpointConfig }, children));
};
