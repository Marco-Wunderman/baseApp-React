"use strict";
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];
    result["default"] = mod;
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
const enzyme_1 = require("enzyme");
require("jest-styled-components");
const React = __importStar(require("react"));
const renderer = __importStar(require("react-test-renderer"));
const theme_provider_1 = require("../../theme-provider");
const index_1 = require("../index");
describe('Link', () => {
    test('empty link', () => {
        const link = enzyme_1.mount(React.createElement(theme_provider_1.ThemeProvider, null,
            React.createElement(index_1.Link, null)));
        expect(link.find('a').length).toBe(1);
        expect(link.find('a span').length).toBe(0);
        expect(link.find('a').get(0).props.href).toBeFalsy();
    });
    test('link with text', () => {
        const link = enzyme_1.mount(React.createElement(theme_provider_1.ThemeProvider, null,
            React.createElement(index_1.Link, null, "hallo")));
        expect(link.find('a').text()).toBe('hallo');
    });
    test('link with href', () => {
        const link = enzyme_1.mount(React.createElement(theme_provider_1.ThemeProvider, null,
            React.createElement(index_1.Link, { href: "/href" })));
        expect(link.find('a').get(0).props.href).toBe('/href');
    });
    test('link with disabled', () => {
        const link = renderer
            .create(React.createElement(theme_provider_1.ThemeProvider, null,
            React.createElement(index_1.Link, { disabled: true })))
            .toJSON();
        expect(link).toHaveStyleRule('pointer-events', 'none');
    });
    test('link without disabled', () => {
        const link = renderer
            .create(React.createElement(theme_provider_1.ThemeProvider, null,
            React.createElement(index_1.Link, null)))
            .toJSON();
        expect(link).not.toHaveStyleRule('pointer-events');
    });
});
