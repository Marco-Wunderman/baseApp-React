import * as React from 'react';
export declare type LinkTarget = '_self' | '_blank' | '_parent' | '_top';
export declare type LinkRel = 'alternate' | 'archives' | 'author' | 'bookmark' | 'external' | 'help' | 'license' | 'next' | 'nofollow' | 'noopener' | 'noreferrer' | 'prev' | 'search' | 'tag';
/**
 * <Omit> Type Helper for extending an Interface while dropping certain included keys.
 */
declare type Omit<T, K extends keyof T> = Pick<T, Exclude<keyof T, K>>;
declare type ExportedLegacyProps = 'innerRef' | 'onClick' | 'onMouseOver' | 'onMouseOut';
export interface BaseLinkProps {
    readonly href?: string;
    readonly innerRef?: React.RefObject<HTMLAnchorElement>;
    readonly onClick?: React.MouseEventHandler<HTMLAnchorElement>;
    readonly onMouseOver?: React.MouseEventHandler<HTMLAnchorElement>;
    readonly onMouseOut?: React.MouseEventHandler<HTMLAnchorElement>;
    readonly target?: LinkTarget;
    readonly title?: string;
    readonly isInline?: boolean;
    readonly disabled?: boolean;
    readonly rel?: LinkRel;
}
export interface LinkProps extends Omit<BaseLinkProps, ExportedLegacyProps> {
    readonly innerRef?: React.RefObject<HTMLAnchorElement>;
    readonly onClick?: React.MouseEventHandler<HTMLAnchorElement>;
    readonly onMouseOver?: React.MouseEventHandler<HTMLAnchorElement>;
    readonly onMouseOut?: React.MouseEventHandler<HTMLAnchorElement>;
    readonly property?: string;
    readonly typeOf?: string;
    readonly itemProp?: string;
}
interface LinkButtonProps extends Omit<BaseLinkProps, ExportedLegacyProps> {
    readonly innerRef?: React.RefObject<HTMLButtonElement>;
    readonly onClick?: React.MouseEventHandler<HTMLButtonElement>;
}
export declare const Link: React.FunctionComponent<LinkProps>;
export declare const LinkButton: React.FunctionComponent<LinkButtonProps>;
export {};
