"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];
    result["default"] = mod;
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
const markdown_to_jsx_1 = __importDefault(require("markdown-to-jsx"));
const React = __importStar(require("react"));
const link_1 = require("../link");
const list_1 = require("../list");
const text_1 = require("../text");
const { headline0400, headline0350, headline0250, headline0200, copy0200 } = text_1.TextAppearance;
const { div, h1, h2, h3, h4, strong, p } = text_1.TextTag;
function createTagOverride(component, props) {
    return { component, props };
}
exports.createTagOverride = createTagOverride;
const defaultMdOptions = {
    overrides: {
        h1: createTagOverride(text_1.Text, { tag: h1, appearance: headline0400 }),
        h2: createTagOverride(text_1.Text, { tag: h2, appearance: headline0350 }),
        h3: createTagOverride(text_1.Text, { tag: h3, appearance: headline0250 }),
        h4: createTagOverride(text_1.Text, { tag: h4, appearance: headline0200 }),
        p: createTagOverride(text_1.Text, { tag: p, appearance: copy0200 }),
        span: createTagOverride(text_1.Text, { appearance: copy0200 }),
        div: createTagOverride(text_1.Text, { tag: div, appearance: copy0200 }),
        strong: createTagOverride(text_1.Text, { tag: strong, bold: true }),
        a: createTagOverride(link_1.Link, { isInline: true }),
        ul: createTagOverride(list_1.List),
        ol: createTagOverride(list_1.List, { isOrdered: true }),
        li: createTagOverride(list_1.ListItem)
    }
};
exports.Richtext = props => {
    const { markdown, overrides } = props;
    const mdOptions = {
        overrides: Object.assign({}, defaultMdOptions.overrides, overrides)
    };
    return React.createElement(markdown_to_jsx_1.default, { options: mdOptions }, markdown);
};
